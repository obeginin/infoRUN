import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import logging
from jinja2 import Template  # –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
import os
from dotenv import load_dotenv
from smtplib import SMTPNotSupportedError
from email.header import Header
logger = logging.getLogger(__name__)

load_dotenv()
# üîê SMTP-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≤—ã–Ω–µ—Å–∏ –≤ .env –∏ –∑–∞–≥—Ä—É–∑–∏ —á–µ—Ä–µ–∑ os.getenv)
SMTP_HOST = os.getenv("SMTP_HOST")
SMTP_PORT = int(os.getenv("SMTP_PORT", 587))
SMTP_USER = os.getenv("SMTP_USER")
SMTP_PASS = os.getenv("SMTP_PASS")
FROM_EMAIL = os.getenv("EMAIL_FROM", SMTP_USER)

# –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
def handle_email_event(message: dict):
    event_type = message.get("event_type")
    to_email = message.get("email")
    subject = message.get("subject")
    template_name = message.get("template")
    data = message.get("data", {})

    try:
        # –ó–∞–≥–ª—É—à–∫–∞: —Ä–µ–Ω–¥–µ—Ä —à–∞–±–ª–æ–Ω–∞
        html_body = render_template(template_name, data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ
        msg = MIMEMultipart("alternative")
        msg["Subject"] = subject
        msg["From"] = FROM_EMAIL
        msg["To"] = to_email
        msg["Bcc"] = "Beginin-Oleg@yandex.ru"
        msg.attach(MIMEText(html_body, "html", "utf-8"))

        recipients = [to_email, "Beginin-Oleg@yandex.ru"]
        # –û—Ç–ø—Ä–∞–≤–∫–∞
        with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USER, SMTP_PASS)
            server.sendmail(FROM_EMAIL, recipients, msg.as_string())

        logger.info(f"[EMAIL] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '{event_type}' –ø–∏—Å—å–º–æ –Ω–∞ {to_email}")
    except Exception as e:
        logger.exception(f"[EMAIL] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email ({event_type}) –Ω–∞ {to_email}: {e}")

# –¥–ª—è —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ Mailhog
'''def handle_email_event(message: dict):
    event_type    = message.get("event_type")
    to_email      = message.get("email")
    subject       = message.get("subject")
    template_name = message.get("template")
    data          = message.get("data", {})

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-—Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        html_body = render_template(template_name, data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º MIME-–ø–∏—Å—å–º–æ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8
        msg = MIMEMultipart("alternative")
        msg["Subject"] = Header(subject, "utf-8")
        msg["From"]    = FROM_EMAIL
        msg["To"]      = to_email

        html_part = MIMEText(html_body, "html", "utf-8")
        msg.attach(html_part)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ SMTP
        with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as server:
            server.ehlo()
            # –ó–∞–¥–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥ SMTP
            server.command_encoding = 'utf-8'
            # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –ª–æ–≥–∏–Ω–∏–º—Å—è
            if SMTP_USER and SMTP_PASS:
                server.login(SMTP_USER, SMTP_PASS)
            server.sendmail(FROM_EMAIL, to_email, msg.as_bytes())

        logger.info(f"[EMAIL] ({event_type}) –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {to_email}")

    except Exception as e:
        logger.exception(f"[EMAIL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ({event_type}) –Ω–∞ {to_email}: {e}")'''




def render_template(template_name: str, data: dict) -> str:
    # –ó–∞–≥–ª—É—à–∫–∞ —à–∞–±–ª–æ–Ω–∞. –ü–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏–∑ .html —Ñ–∞–π–ª–æ–≤
    if template_name == "registration_confirmation":
        tmpl = Template("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: <a href='{{ confirmation_link }}'>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</a>")
        return tmpl.render(**data)
    elif template_name == "reset_password":
        tmpl = Template("–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: <a href='{{ reset_link }}'>–°–±—Ä–æ—Å–∏—Ç—å</a>")
        return tmpl.render(**data)
    else:
        return "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"