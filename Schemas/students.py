from pydantic import BaseModel
from datetime import datetime
from typing import Optional
from pydantic import ConfigDict
# Schemas\students.py
''' –î–∞–Ω–Ω—ã–µ —Å—Ö–µ–º—ã –æ–ø–∏—Å—ã–≤–∞—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ–ª—É—á–∞–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON –∏ –æ–±—Ä–∞—Ç–Ω–æ)
'''


# –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º —Å—Ç—É–¥–µ–Ω—Ç–µ
class StudentSafe(BaseModel):
    ID: int
    Login: str
    Last_Name: str
    First_Name: str
    Role: str

    model_config = ConfigDict(from_attributes=True)

# –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
class StudentBase(BaseModel):
    Login: str
    Last_Name: str
    First_Name: str
    Middle_Name: str
    Email: str
    Sex: str
    BirthDate: datetime
    Comment: str


class StudentsRead(StudentBase):
    ID: int

    class Config:
        from_attributes = True


# –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å StudentTask
class StudentTaskBase(BaseModel):
    StudentTaskID: int
    StudentID: int
    SubTaskID: int
    CompletionStatus: Optional[str] = None
    Score: Optional[float] = None
    CompletionDate: Optional[datetime] = None
    StudentAnswer: Optional[str] = None

    model_config = ConfigDict(
        from_attributes=True,
        json_encoders={datetime: lambda v: v.isoformat() if v else None}
    )

# üîç –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ (–Ω–∞—Å–ª–µ–¥—É–µ–º –æ—Ç StudentTaskBase)
class StudentTaskRead(StudentTaskBase):
    Login: Optional[str] = None
    Role: Optional[str] = None
    TaskID: Optional[int] = None
    TaskTitle: Optional[str] = None
    SubTaskNumber: Optional[int] = None
    ImagePath: Optional[str] = None
    Description: Optional[str] = None
    Answer: Optional[str] = None
    SolutionPath: Optional[str] = None
    TotalSubTasks: Optional[int] = None
    CompletedSubTasks: Optional[int] = None
    TotalCount: Optional[int] = None

#  (–Ω–∞—Å–ª–µ–¥—É–µ–º –æ—Ç StudentTaskRead)
class StudentTaskDetails(StudentTaskRead):
    SolutionStudentPath: Optional[str] = None



class AnswerInput(BaseModel):
    subtaskId: int
    studentId: int
    student_answer: str

class SolutionInput(BaseModel):
    student_id: int
    subtask_id: int
    solution_text: Optional[str] = None