from config_test import BASE_URL, login_admin, pass_admin, login_user, pass_user, token_admin, token
import requests
import pytest
import httpx
from uuid import uuid4

# –§–∏–∫—Å—Ç—É—Ä–∞ —Å–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ —Ç–µ—Å—Ç–∞—Ö
@pytest.fixture(scope="module")
def unique_login():
    return f"test_student_{uuid4().hex[:8]}"

@pytest.mark.asyncio
async def test_add_new_student_success(unique_login):
    async with httpx.AsyncClient(base_url=BASE_URL) as client:
        print(unique_login)
        headers = {"Authorization": f"Bearer {token_admin}"}
        payload = {
            "Login": unique_login,
            "Email": f"{unique_login}@example.com",
            "Password": "Secret123!",
            "Last_Name": "–ò–≤–∞–Ω–æ–≤",
            "First_Name": "–ò–≤–∞–Ω",
            "Middle_Name": "–ò–≤–∞–Ω–æ–≤–∏—á",
            "Sex": "–ú",
            "BirthDate": "2000-01-01",
            "Comment": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "RoleID": 3,  # –£–∫–∞–∂–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID —Ä–æ–ª–∏
            "IsActive": True
        }

        response = await client.post("/api/students/new_student", headers=headers, json=payload)

        assert response.status_code == 200, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {response.text}"
        assert response.json()["message"] == "–°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
        print("‚úÖ –ù–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")


@pytest.mark.asyncio
async def test_edit_existing_student(unique_login):
    async with httpx.AsyncClient(base_url=BASE_URL) as client:
        headers = {"Authorization": f"Bearer {token_admin}"}
        print(unique_login)
        # üîç –ü–æ–ª—É—á–∞–µ–º ID –ø–æ –ª–æ–≥–∏–Ω—É
        search_response = await client.get(
            "/api/students/search",
            headers=headers,
            params={"field_name": "Login", "value": unique_login}
        )

        assert search_response.status_code == 200, f"–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è: {search_response.text}"
        student = search_response.json()

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤—Å–µ –ø–æ–ª—è –∏–∑ StudentCreate)
        student_id = student["ID"]
        update_payload = {
            "Login": f"{unique_login}",
            "Email": f"{unique_login}_updated@example.com",
            "Last_Name": "–ò–≤–∞–Ω–æ–≤",
            "First_Name": "–ü—ë—Ç—Ä",
            "Middle_Name": "–°–µ—Ä–≥–µ–µ–≤–∏—á",
            "Sex": "–ú",
            "BirthDate": "1990-12-31",
            "Comment": "–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é",
            "RoleID": 2,
            "IsActive": False
        }
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PATCH –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        patch_response = await client.patch(
            f"/api/students/edit_student?id={student_id}",
            headers=headers,
            json=update_payload
        )

        assert patch_response.status_code == 200, f"PATCH –Ω–µ –ø—Ä–æ—à—ë–ª: {patch_response.text}"
        assert "—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω" in patch_response.json()["message"]
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ ID {student_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


STUDENT_ID = 8
STUDENT_LOGIN = 'test'
STUDENT_EMAIL = 'test@gmail.com'
STUDENT_PHONE = '78889997766'


@pytest.mark.asyncio
@pytest.mark.parametrize("field_name, value", [
    ("ID", STUDENT_ID),
    ("Login", STUDENT_LOGIN),
    ("Email", STUDENT_EMAIL),
    ("Phone", STUDENT_PHONE),
])
async def test_search_student(field_name, value):
    async with httpx.AsyncClient(base_url=BASE_URL) as client:
        headers = {"Authorization": f"Bearer {token_admin}"}

        params = {
            "field_name": field_name,
            "value": value
        }

        response = await client.get("/api/students/search", headers=headers, params=params)

        if response.status_code == 200:
            data = response.json()
            assert field_name in data or (field_name == "ID" and "ID" in data), "–í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –∏—Å–∫–æ–º–æ–≥–æ –ø–æ–ª—è"
            print(f"‚úÖ –ü–æ–∏—Å–∫ –ø–æ {field_name} = {value} —É—Å–ø–µ—à–µ–Ω, –Ω–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç {data.get('Login')}")
        else:
            # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —á—Ç–æ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 404
            assert response.status_code == 404
            print(f"‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç —Å {field_name} = {value} –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")

@pytest.mark.asyncio
async def test_activate_deactivate_student(unique_login):
    async with httpx.AsyncClient(base_url=BASE_URL) as client:
        headers = {"Authorization": f"Bearer {token_admin}"}

        # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –ª–æ–≥–∏–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
        search_response = await client.get(
            "/api/students/search",
            headers=headers,
            params={"field_name": "Login", "value": unique_login}
        )
        assert search_response.status_code == 200, f"–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {search_response.text}"
        student = search_response.json()
        student_id = student["ID"]

        # 2. –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (flag=True)
        activate_response = await client.post(
            "/api/students/active",
            headers=headers,
            params={"id": student_id, "flag": True}
        )
        assert activate_response.status_code == 200, f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activate_response.text}"
        assert "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" in activate_response.json().get("message", "").lower()

        # 3. –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (flag=False)
        deactivate_response = await client.post(
            "/api/students/active",
            headers=headers,
            params={"id": student_id, "flag": False}
        )
        assert deactivate_response.status_code == 200, f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {deactivate_response.text}"
        assert "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" in deactivate_response.json().get("message", "").lower()

        print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç —Å ID {student_id} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")


@pytest.mark.asyncio
async def test_delete_student(unique_login):
    async with httpx.AsyncClient(base_url=BASE_URL) as client:
        headers = {"Authorization": f"Bearer {token_admin}"}

        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –ª–æ–≥–∏–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
        search_response = await client.get(
            "/api/students/search",
            headers=headers,
            params={"field_name": "Login", "value": unique_login}
        )
        assert search_response.status_code == 200, f"–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {search_response.text}"
        student = search_response.json()
        student_id = student["ID"]

        # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        delete_response = await client.post(
            "/api/students/delete_student",
            headers=headers,
            params={"id": student_id}  # –µ—Å–ª–∏ —Ä–æ—É—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–µ—Ä–µ–∑ query
            # –ï—Å–ª–∏ —Ä–æ—É—Ç –æ–∂–∏–¥–∞–µ—Ç form, —Ç–æ json= –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç, –Ω–∞–¥–æ data= –∏–ª–∏ json=
        )

        assert delete_response.status_code == 200, f"–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ: {delete_response.text}"
        assert "—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω" in delete_response.json().get("message", ""), "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç —Å ID {student_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
