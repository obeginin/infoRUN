import requests
from time import time, sleep
from dotenv import load_dotenv
import jwt
from datetime import datetime, timedelta, timezone
import os
load_dotenv()

BASE_URL = "https://info-run.ru/"
#BASE_URL = "http://localhost:9000/"




def login_wrong_password():
    response = requests.post(f"{BASE_URL}/auth/login", json={
        "Login": "ivan",
        "Password": "wrongpass"
    })
    try:
        data = response.json()
        print(data)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-–æ—Ç–≤–µ—Ç–∞:", e)
        print("–û—Ç–≤–µ—Ç:", response.text)
        return
    data.get("detail", {}).get("error")
    if response.status_code == 401 and data.get("detail", {}).get("error") == "PasswordFailed":
        print("–¢–µ—Å—Ç ‚Ññ1 –ø—Ä–æ–π–¥–µ–Ω. ‚úÖ ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å:", response.status_code, data)
    else:
        print("‚ùå –¢–µ—Å—Ç ‚Ññ1 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –û–∂–∏–¥–∞–ª—Å—è –æ—Ç–∫–∞–∑ –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è:", response.status_code, data)


def login_wrong_username():
    response = requests.post(f"{BASE_URL}/auth/login", json={
        "Login": "nosuchuser",
        "Password": "standart"
    })

    try:
        data = response.json()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-–æ—Ç–≤–µ—Ç–∞:", e)
        print("–û—Ç–≤–µ—Ç:", response.text)
        return

    if response.status_code == 401 and data.get("detail", {}).get("error") == "LoginNotFound":
        print("–¢–µ—Å—Ç ‚Ññ2 –ø—Ä–æ–π–¥–µ–Ω. ‚úÖ ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω:", response.status_code, data)
    else:
        print("‚ùå –¢–µ—Å—Ç ‚Ññ2 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –û–∂–∏–¥–∞–ª—Å—è –æ—Ç–∫–∞–∑ –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞:", response.status_code, data)


def login_inactive_user():
    response = requests.post(f"{BASE_URL}/auth/login", json={
        "Login": "rustam",
        "Password": "standart"
    })
    try:
        data = response.json()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-–æ—Ç–≤–µ—Ç–∞:", e)
        print("–û—Ç–≤–µ—Ç:", response.text)
        return

    if response.status_code == 403 and data.get("detail", {}).get("error") == "StudentNoActive":
        print("–¢–µ—Å—Ç ‚Ññ3 –ø—Ä–æ–π–¥–µ–Ω. ‚úÖ ‚õî –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", response.status_code, data)
    else:
        print("‚ùå –¢–µ—Å—Ç ‚Ññ3 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –û–∂–∏–¥–∞–ª—Å—è –æ—Ç–∫–∞–∑ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", response.status_code, data)

def login_success():
    response = requests.post(f"{BASE_URL}/auth/login", json={
        "Login": "ivan",
        "Password": "standart"
    })
    try:
        data = response.json()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-–æ—Ç–≤–µ—Ç–∞:", e)
        print("–û—Ç–≤–µ—Ç:", response.text)
        return None

    if response.status_code == 200 and "access_token" in data:
        print("–¢–µ—Å—Ç ‚Ññ4 –ø—Ä–æ–π–¥–µ–Ω. ‚úÖ ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:", data)
        return data["access_token"]
    else:
        print(f"‚ùå –¢–µ—Å—Ç ‚Ññ4 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ö–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç:", data)
        return None

'''–ü—Ä–æ–≤–µ—Ä–∫–∞ –¢–æ–∫–µ–Ω–∞'''
def check_token():
    token = login_success()
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = requests.get(f"{BASE_URL}/auth/check-token", headers=headers)
    try:
        data = response.json()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-–æ—Ç–≤–µ—Ç–∞:", e)
        print("–û—Ç–≤–µ—Ç:", response.text)
        return

    if response.status_code == 200:
        print("–¢–µ—Å—Ç ‚Ññ5 –ø—Ä–æ–π–¥–µ–Ω. ‚úÖ ‚úÖ –ü–æ–ª—É—á–∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ —Ç–æ–∫–µ–Ω—É:", response.status_code, data)
    else:
        print("–¢–µ—Å—Ç ‚Ññ5 –û—à–∏–±–∫–∞!!!. ‚ùå  –ö–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç:", data)

'''–ü—Ä–æ–≤–µ—Ä–∫–∞ –¢–æ–∫–µ–Ω–∞'''
def invalid_token():
    headers = {
        "Authorization": "Bearer eyJhbGciOiJIUretzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpdmFuIiwiZXhwIjoxNzUyNTU0NjEzfQ._bkf8eUrMYAkPcYFsvOt3WjXVsjq22jwKHnmlVM9nUM"
    }
    response = requests.get(f"{BASE_URL}/auth/check-token", headers=headers)
    try:
        data = response.json()
        if response.status_code == 401 and data["detail"]["error"] == "TokenInvalid":
            print("–¢–µ—Å—Ç ‚Ññ6 –ü—Ä–æ–π–¥–µ–Ω. ‚úÖ ‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –¢–æ–∫–µ–Ω:", response.status_code, response.json())
        else:
            print("–¢–µ—Å—Ç ‚Ññ6 –û—à–∏–±–∫–∞!!!. ‚ùå  –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –¢–æ–∫–µ–Ω:", response.status_code)
    except Exception as e:
        print("‚ùå –¢–µ—Å—Ç ‚Ññ6. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç:", e)
        print("üîÅ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.text)

def invalid_schema_token():
    token = login_success()
    headers = {
        "Authorization": f"Token {token}"
    }
    response = requests.get(f"{BASE_URL}/auth/check-token", headers=headers)
    try:
        data = response.json()
        if response.status_code == 401 and data["detail"]["error"] == "TokenMalformed":
            print("–¢–µ—Å—Ç ‚Ññ7 –ü—Ä–æ–π–¥–µ–Ω. ‚úÖ ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –¢–æ–∫–µ–Ω–∞:", response.status_code, response.json())
        else:
            print("–¢–µ—Å—Ç ‚Ññ7 –û—à–∏–±–∫–∞!!!. ‚ùå  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –¢–æ–∫–µ–Ω–∞:", response.status_code)
    except Exception as e:
        print("‚ùå –¢–µ—Å—Ç ‚Ññ7. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç:", e)
        print("üîÅ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.text)


# —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
SECRET_KEY = os.getenv("SECRET_KEY")
ALGORITHM = os.getenv("ALGORITHM")
def create_error_token(login: str):
    payload = {
        "sub": login,
        "exp": datetime.now(timezone.utc) + timedelta(minutes=10)
    }
    token = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)
    return token

def student_not_found():
    # –¢–æ–∫–µ–Ω —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º payload, –Ω–æ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ª–æ–≥–∏–Ω–æ–º "nosuchuser"
    fake_token = create_error_token("nosuchuser")
    #print(fake_token)

    headers = {
        "Authorization": f"Bearer {fake_token}"
    }
    response = requests.get(f"{BASE_URL}/auth/check-token", headers=headers)

    try:
        data = response.json()
        if response.status_code == 401 and data.get("detail", {}).get("error") == "StudentNotFound":
            print("–¢–µ—Å—Ç ‚Ññ8 –ü—Ä–æ–π–¥–µ–Ω. ‚úÖ ‚ùå: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ —Ç–æ–∫–µ–Ω–∞ –ª–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–¥", response.status_code, data)
        else:
            print("–¢–µ—Å—Ç ‚Ññ8 –û—à–∏–±–∫–∞!!! ‚ùå: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ —Ç–æ–∫–µ–Ω–∞ –ª–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–¥", response.status_code, data)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞:", e)
        print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.text)


def token_without_sub():
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –±–µ–∑ –ø–æ–ª—è "sub"
    payload = {
        "exp": int(time()) + 60,  # —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ 1 –º–∏–Ω—É—Ç–∞
        # "sub" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
    }

    token = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = requests.get(f"{BASE_URL}/auth/check-token", headers=headers)

    try:
        data = response.json()
        if response.status_code == 401 and data.get("detail", {}).get("error") == "TokenInvalidPayload":
            print("–¢–µ—Å—Ç ‚Ññ9 –ü—Ä–æ–π–¥–µ–Ω. ‚úÖ ‚ùå: –¢–æ–∫–µ–Ω –±–µ–∑ 'sub'", response.status_code, data)
        else:
            print("–¢–µ—Å—Ç ‚Ññ9. –û—à–∏–±–∫–∞!!!‚ùå: –¢–æ–∫–µ–Ω –±–µ–∑ 'sub' ", response.status_code, data)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞:", e)
        print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.text)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT-—Ç–æ–∫–µ–Ω —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ 5 —Å–µ–∫—É–Ω–¥
def generate_short_lived_token(login: str) -> str:
    payload = {
        "sub": login,
        "exp": datetime.now(timezone.utc) + timedelta(seconds=5)
    }
    token = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)
    return token

def expired_Token():
    token = generate_short_lived_token("ivan")
    print("–ñ–¥–µ–º 6 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
    headers = {
        "Authorization": f"Bearer {token}"
    }
    sleep(6)
    response = requests.get(f"{BASE_URL}/auth/check-token", headers=headers)
    try:
        data = response.json()
        if response.status_code == 401 and data.get("detail", {}).get("error") == "TokenExpired":
            print("–¢–µ—Å—Ç ‚Ññ10 –ü—Ä–æ–π–¥–µ–Ω. ‚úÖ ‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç—ë–∫ ", response.status_code, data)
        else:
            print("–¢–µ—Å—Ç ‚Ññ10. –û—à–∏–±–∫–∞!!! ‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç—ë–∫.  –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status_code, data)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞:", e)
        print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.text)

if __name__ == "__main__":
    strat_time = time()
    login_wrong_password()
    login_wrong_username()
    login_inactive_user()
    check_token()
    invalid_token()
    invalid_schema_token()
    student_not_found()
    token_without_sub()
    expired_Token()
    end_time = time()
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {end_time-strat_time}")