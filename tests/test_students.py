from config_test import BASE_URL, login_admin, pass_admin, login_user, pass_user, token_admin, token, STUDENT_ID #, client

import pytest
import requests
import httpx
from uuid import uuid4

STUDENT_ID = 2
STUDENT_TASK_ID = 43
SUBTASK_ID = 10
TASK_ID = 8
SUBJECT_ID = 10
VARIANT_ID = 5
COMPLETION_STATUS = '–ù–µ –ø—Ä–∏—Å—Ç—É–ø–∞–ª'
SEARCH = '–ö—Ä—ã–ª–æ–≤'
SORT_COLUMN1= 'DeadlineDate'
SORT_DIRECTION1= 'DESC'
SORT_COLUMN2 = 'Attempts'
SORT_DIRECTION2 = 'ASC'
LIMIT = 5000
OFFSET = 10


@pytest.mark.asyncio
async def test_add_new_student_success():
    async with httpx.AsyncClient(base_url=BASE_URL) as client:
        headers = {"Authorization": f"Bearer {token_admin}"}
        unique_login = f"test_student_{uuid4().hex[:8]}"
        payload = {
            "Login": unique_login,
            "Email": f"{unique_login}@example.com",
            "Password": "Secret123!",
            "Last_Name": "–ò–≤–∞–Ω–æ–≤",
            "First_Name": "–ò–≤–∞–Ω",
            "Middle_Name": "–ò–≤–∞–Ω–æ–≤–∏—á",
            "Sex": "–ú",
            "BirthDate": "2000-01-01",
            "Comment": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "RoleID": 3,  # –£–∫–∞–∂–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID —Ä–æ–ª–∏
            "IsActive": True
        }

        response = await client.post("/api/students/new_student", headers=headers, json=payload)

        assert response.status_code == 200, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {response.text}"
        assert response.json()["message"] == "–°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
        print("‚úÖ –ù–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")



'''–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—É—Ç–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤'''
def test_get_all_students_tasks_ok():
    url = f"{BASE_URL}/api/students_subtasks"
    headers = {"Authorization": f"Bearer {token}"}

    response = requests.get(url, headers=headers)

    assert response.status_code == 200, "‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200"
    data = response.json()
    assert isinstance(data, list), "‚ùå –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á"
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: {len(data)}")


'''–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—É—Ç–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –Ω–æ —Å path –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º student_id'''
@pytest.mark.parametrize("student_id, expected_status, description", [
    (STUDENT_ID, 200, "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏"),
    (999999, 200, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç ‚Äî –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞)"),
    ("abc", 422, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID —Å—Ç—É–¥–µ–Ω—Ç–∞"),
])
def test_get_tasks_by_student(student_id, expected_status, description):
    url = f"{BASE_URL}/api/students_subtasks/{student_id}"
    headers = {"Authorization": f"Bearer {token_admin}"}

    response = requests.get(url, headers=headers)
    assert response.status_code == expected_status, f"‚ùå {description}"

    if expected_status == 200:
        data = response.json()
        assert isinstance(data, list), "–û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"
        print(f"‚úÖ {description}: –ø–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–¥–∞—á")
    else:
        print(f"‚ö†Ô∏è {description}: —Å—Ç–∞—Ç—É—Å {response.status_code}")

'''–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤'''
def run_student_tasks_query_test(student_id, query_params, expected_status, description):
    url = f"{BASE_URL}/api/students_subtasks/{student_id}"
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(url, headers=headers, params=query_params)
    print("üëâ DEBUG PARAMS:", query_params)
    assert response.status_code == expected_status, f"‚ùå {description}"

    if expected_status == 200:
        data = response.json()
        assert isinstance(data, list), "‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"
        assert len(data) > 0, f"‚ùå {description}: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫"
        print(f"‚úÖ {description}: –ø–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á ‚Äî {len(data)}")
    else:
        print(f"‚ö†Ô∏è {description}: —Å—Ç–∞—Ç—É—Å {response.status_code}")

@pytest.mark.parametrize("query_params, expected_status, description", [
    ({"student_task_id": STUDENT_TASK_ID}, 200, "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ StudentTaskID"),
    ({"sub_task_id": SUBTASK_ID}, 200, "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ SubTaskID"),
    ({"task_id": TASK_ID}, 200, "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ TaskID"),
    ({"subject_id": SUBJECT_ID}, 200, "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ SubjectID"),
    ({"variant_id": VARIANT_ID}, 200, "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ VariantID"),
    ({"completion_status": COMPLETION_STATUS}, 200, "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ CompletionStatus"),
    ({"search": SEARCH}, 200, "–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"),
    ({"sort_column1": SORT_COLUMN1}, 200, "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å—Ç–æ–ª–±—Ü—É"),
    ({"sort_column2": SORT_COLUMN2}, 200, "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ç–æ—Ä–æ–º—É —Å—Ç–æ–ª–±—Ü—É"),
    ({"sort_direction1": SORT_DIRECTION1}, 200, "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (1 —É—Ä–æ–≤–µ–Ω—å)"),
    ({"sort_direction2": SORT_DIRECTION2}, 200, "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (2 —É—Ä–æ–≤–µ–Ω—å)"),
    ({"limit": 5000}, 200, "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫"),
    ({"offset": OFFSET}, 200, "–ü—Ä–æ–ø—É—Å–∫ N —Å—Ç—Ä–æ–∫"),
])
def test_query_params_on_student_tasks(query_params, expected_status, description):
    run_student_tasks_query_test(STUDENT_ID, query_params, expected_status, description)


@pytest.mark.parametrize("student_task_id, expected_status, description", [
    (STUDENT_TASK_ID, 200, "–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ"),
    (999999, 200, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–µ—Ä–Ω—ë—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫"),
    ("abc", 422, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π StudentTaskID ‚Äî –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"),
])
def test_get_student_task_by_id(student_task_id, expected_status, description):
    url = f"{BASE_URL}/api/students_subtasks/2/StudentTask/{student_task_id}"
    headers = {"Authorization": f"Bearer {token}"}

    response = requests.get(url, headers=headers)
    assert response.status_code == expected_status, f"‚ùå {description}"

    if expected_status == 200:
        data = response.json()
        assert isinstance(data, list), "‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"
        print(f"‚úÖ {description}: –ø–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á ‚Äî {len(data)}")
    else:
        print(f"‚ö†Ô∏è {description}: —Å—Ç–∞—Ç—É—Å {response.status_code}")