import { useState as v, useRef as l, useEffect as E } from "react";
import { useRefState as m } from "../useRefState/useRefState.mjs";
import { isTarget as w } from "../../utils/helpers/isTarget.mjs";
import { getElement as R } from "../../utils/helpers/getElement.mjs";
const g = (...n) => {
  const e = w(n[0]) ? n[0] : void 0, i = e ? n[1] : n[0], f = e ? n[2] : n[1], [y, d] = v(!1), o = m(window), t = l(i);
  t.current = i;
  const c = l(f);
  return c.current = f, E(() => {
    if (!e && !o.state) return;
    const s = e ? R(e) : o.current;
    if (!s) return;
    const k = (u) => {
      const r = u;
      (Array.isArray(t.current) ? t.current.includes(r.key) : r.key === t.current) && (d(!0), c.current?.(!0, r));
    }, a = (u) => {
      const r = u;
      (Array.isArray(t.current) ? t.current.includes(r.key) : r.key === t.current) && (d(!1), c.current?.(!1, r));
    };
    return s.addEventListener("keydown", k), s.addEventListener("keyup", a), () => {
      s.removeEventListener("keydown", k), s.removeEventListener("keyup", a);
    };
  }, [e, o.state]), e ? y : { pressed: y, ref: o };
};
export {
  g as useKeyPress
};
//# sourceMappingURL=useKeyPress.mjs.map
