{"version":3,"file":"usePerformanceObserver.mjs","sources":["../../../../src/hooks/usePerformanceObserver/usePerformanceObserver.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/** The use performance observer options type */\nexport type UsePerformanceObserverOptions = PerformanceObserverInit & {\n  /** Whether to start the observer immediately */\n  immediate?: boolean;\n};\n\n/**\n * @name usePerformanceObserver\n * @description - Hook that allows you to observe performance entries\n * @category Sensors\n *\n * @browserapi PerformanceObserver https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver\n *\n * @param {UsePerformanceObserverOptions} options The options for the performance observer\n * @param {PerformanceObserverCallback} callback The function to handle performance entries\n * @returns {object} An object containing the observer's support status and methods to start and stop the observer\n *\n * @example\n * const { supported, entries, start, stop } = usePerformanceObserver();\n */\nexport const usePerformanceObserver = (\n  options: UsePerformanceObserverOptions,\n  callback?: PerformanceObserverCallback\n) => {\n  const supported = typeof window !== 'undefined' && typeof PerformanceObserver !== 'undefined';\n  const [entries, setEntries] = useState<PerformanceEntry[]>([]);\n\n  const observerRef = useRef<PerformanceObserver | null>(null);\n  const internalCallback = useRef<PerformanceObserverCallback | null>(callback);\n  internalCallback.current = callback;\n\n  const start = () => {\n    if (!supported) return;\n    const observer = new PerformanceObserver((entryList, observer) => {\n      setEntries(entryList.getEntries());\n      internalCallback.current?.(entryList, observer);\n    });\n    observer.observe(options);\n    observerRef.current = observer;\n  };\n\n  const stop = () => {\n    if (!supported) return;\n    observerRef.current?.disconnect();\n    observerRef.current = null;\n  };\n\n  useEffect(() => {\n    if (!supported) return;\n    if (options.immediate) start();\n\n    return () => {\n      stop();\n    };\n  }, []);\n\n  return { supported, entries, start, stop };\n};\n"],"names":["usePerformanceObserver","options","callback","supported","entries","setEntries","useState","observerRef","useRef","internalCallback","start","observer","entryList","stop","useEffect"],"mappings":";AAsBO,MAAMA,IAAyB,CACpCC,GACAC,MACG;AACH,QAAMC,IAAY,OAAO,SAAW,OAAe,OAAO,sBAAwB,KAC5E,CAACC,GAASC,CAAU,IAAIC,EAA6B,CAAA,CAAE,GAEvDC,IAAcC,EAAmC,IAAI,GACrDC,IAAmBD,EAA2CN,CAAQ;AAC5E,EAAAO,EAAiB,UAAUP;AAE3B,QAAMQ,IAAQ,MAAM;AAClB,QAAI,CAACP,EAAW;AAChB,UAAMQ,IAAW,IAAI,oBAAoB,CAACC,GAAWD,MAAa;AAChE,MAAAN,EAAWO,EAAU,YAAY,GACjCH,EAAiB,UAAUG,GAAWD,CAAQ;AAAA,IAAA,CAC/C;AACD,IAAAA,EAAS,QAAQV,CAAO,GACxBM,EAAY,UAAUI;AAAA,EAAA,GAGlBE,IAAO,MAAM;AACjB,IAAKV,MACLI,EAAY,SAAS,WAAA,GACrBA,EAAY,UAAU;AAAA,EAAA;AAGxB,SAAAO,EAAU,MAAM;AACd,QAAKX;AACL,aAAIF,EAAQ,aAAWS,EAAA,GAEhB,MAAM;AACX,QAAAG,EAAA;AAAA,MAAK;AAAA,EACP,GACC,EAAE,GAEE,EAAE,WAAAV,GAAW,SAAAC,GAAS,OAAAM,GAAO,MAAAG,EAAA;AACtC;"}