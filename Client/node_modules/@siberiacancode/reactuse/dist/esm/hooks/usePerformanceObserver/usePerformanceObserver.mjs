import { useState as b, useRef as i, useEffect as p } from "react";
const l = (n, t) => {
  const e = typeof window < "u" && typeof PerformanceObserver < "u", [d, a] = b([]), r = i(null), s = i(t);
  s.current = t;
  const o = () => {
    if (!e) return;
    const c = new PerformanceObserver((f, m) => {
      a(f.getEntries()), s.current?.(f, m);
    });
    c.observe(n), r.current = c;
  }, u = () => {
    e && (r.current?.disconnect(), r.current = null);
  };
  return p(() => {
    if (e)
      return n.immediate && o(), () => {
        u();
      };
  }, []), { supported: e, entries: d, start: o, stop: u };
};
export {
  l as usePerformanceObserver
};
//# sourceMappingURL=usePerformanceObserver.mjs.map
