import { useState as a, useRef as b, useEffect as v } from "react";
import { useRefState as R } from "../useRefState/useRefState.mjs";
import { isTarget as O } from "../../utils/helpers/isTarget.mjs";
import { getElement as g } from "../../utils/helpers/getElement.mjs";
const M = (...t) => {
  const e = O(t[0]) ? t[0] : void 0, s = e ? t[1] : t[0], r = e ? t[2] : t[1], [o, d] = a(), m = r?.enabled ?? !0, n = R(window.document.documentElement), u = b(s);
  u.current = s;
  const i = b(r);
  i.current = r, v(() => {
    if (!m || !e && !n.state) return;
    const l = e ? g(e) : n.current;
    if (!l) return;
    const c = new MutationObserver(u.current);
    return d(c), c.observe(l, i.current), () => {
      c.disconnect();
    };
  }, [e, n.state]);
  const f = () => o?.disconnect();
  return e ? { stop: f, observer: o } : {
    ref: n,
    stop: f,
    observer: o
  };
};
export {
  M as useMutationObserver
};
//# sourceMappingURL=useMutationObserver.mjs.map
