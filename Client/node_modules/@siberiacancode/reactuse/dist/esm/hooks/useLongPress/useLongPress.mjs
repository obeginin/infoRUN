import { useState as w, useRef as d, useEffect as h } from "react";
import { useRefState as R } from "../useRefState/useRefState.mjs";
import { isTarget as p } from "../../utils/helpers/isTarget.mjs";
import { getElement as T } from "../../utils/helpers/getElement.mjs";
const S = 400, k = (...r) => {
  const n = p(r[0]) ? r[0] : void 0, a = n ? r[1] : r[0], m = n ? r[2] : r[1], [l, v] = w(!1), o = d(void 0), f = d(!1), c = R(), E = d(a);
  E.current = a;
  const s = d(m);
  return s.current = m, h(() => {
    if (!n && !c.state) return;
    const e = n ? T(n) : c.current;
    if (!e) return;
    const i = (u) => {
      s.current?.onStart?.(u), f.current = !0, o.current = setTimeout(() => {
        E.current(u), v(!0);
      }, s.current?.threshold ?? S);
    }, t = (u) => {
      v((L) => (L ? s.current?.onFinish?.(u) : f.current && s.current?.onCancel?.(u), !1)), f.current = !1, o.current && clearTimeout(o.current);
    };
    return e.addEventListener("mousedown", i), e.addEventListener("touchstart", i), e.addEventListener("mouseup", t), e.addEventListener("touchend", t), window.addEventListener("mouseup", t), window.addEventListener("touchend", t), () => {
      e.removeEventListener("mousedown", i), e.removeEventListener("touchstart", i), e.removeEventListener("mouseup", t), e.removeEventListener("touchend", t), window.removeEventListener("mouseup", t), window.removeEventListener("touchend", t), o.current && clearTimeout(o.current);
    };
  }, [n, c.state]), n ? l : {
    ref: c,
    pressed: l
  };
};
export {
  k as useLongPress
};
//# sourceMappingURL=useLongPress.mjs.map
