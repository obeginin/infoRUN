{"version":3,"file":"useList.mjs","sources":["../../../../src/hooks/useList/useList.ts"],"sourcesContent":["import { useState } from 'react';\n\n/** The use list return type */\nexport interface UseListReturn<Item> {\n  /** The current list of items */\n  value: Item[];\n  /** Clears the list */\n  clear: () => void;\n  /** Inserts an item at the specified index */\n  insertAt: (insertAtIndex: number, item: Item) => void;\n  /** Adds an item to the list */\n  push: (item: Item) => void;\n  /** Removes an item from the list */\n  removeAt: (removeAtIndex: number) => void;\n  /** Sets the list of items */\n  set: (list: Item[]) => void;\n  /** Updates an item at the specified index */\n  updateAt: (updateAtIndex: number, item: Item) => void;\n}\n\n/**\n * @name useList\n * @description - Hook that provides state and helper methods to manage a list of items\n * @category State\n *\n * @template Item The type of the item\n * @param {Item[] | (() => Item[])} initialList The initial list of items\n * @returns {UseListReturn} An object containing the current list and functions to interact with the list\n *\n * @example\n * const { value, set, push, removeAt, insertAt, updateAt, clear } = useList();\n */\nexport const useList = <Item>(initialList: Item[] = []) => {\n  const [list, setList] = useState(initialList);\n\n  const push = (item: Item) => setList((prevList) => [...prevList, item]);\n\n  const removeAt = (removeAtIndex: number) =>\n    setList((prevList) => [\n      ...prevList.slice(0, removeAtIndex),\n      ...prevList.slice(removeAtIndex + 1)\n    ]);\n\n  const insertAt = (insertAtIndex: number, item: Item) =>\n    setList((l) => [...l.slice(0, insertAtIndex), item, ...l.slice(insertAtIndex)]);\n\n  const updateAt = (updateAtIndex: number, item: Item) =>\n    setList((prevList) =>\n      prevList.map((element, index) => (index === updateAtIndex ? item : element))\n    );\n\n  const clear = () => setList([]);\n\n  const reset = () => setList(initialList);\n\n  return {\n    value: list,\n    set: setList,\n    push,\n    removeAt,\n    insertAt,\n    updateAt,\n    clear,\n    reset\n  };\n};\n"],"names":["useList","initialList","list","setList","useState","item","prevList","removeAtIndex","insertAtIndex","l","updateAtIndex","element","index"],"mappings":";AAgCO,MAAMA,IAAU,CAAOC,IAAsB,OAAO;AACzD,QAAM,CAACC,GAAMC,CAAO,IAAIC,EAASH,CAAW;AAsB5C,SAAO;AAAA,IACL,OAAOC;AAAA,IACP,KAAKC;AAAA,IACL,MAvBW,CAACE,MAAeF,EAAQ,CAACG,MAAa,CAAC,GAAGA,GAAUD,CAAI,CAAC;AAAA,IAwBpE,UAtBe,CAACE,MAChBJ,EAAQ,CAACG,MAAa;AAAA,MACpB,GAAGA,EAAS,MAAM,GAAGC,CAAa;AAAA,MAClC,GAAGD,EAAS,MAAMC,IAAgB,CAAC;AAAA,IAAA,CACpC;AAAA,IAmBD,UAjBe,CAACC,GAAuBH,MACvCF,EAAQ,CAACM,MAAM,CAAC,GAAGA,EAAE,MAAM,GAAGD,CAAa,GAAGH,GAAM,GAAGI,EAAE,MAAMD,CAAa,CAAC,CAAC;AAAA,IAiB9E,UAfe,CAACE,GAAuBL,MACvCF;AAAA,MAAQ,CAACG,MACPA,EAAS,IAAI,CAACK,GAASC,MAAWA,MAAUF,IAAgBL,IAAOM,CAAQ;AAAA,IAAA;AAAA,IAc7E,OAXY,MAAMR,EAAQ,EAAE;AAAA,IAY5B,OAVY,MAAMA,EAAQF,CAAW;AAAA,EAUrC;AAEJ;"}