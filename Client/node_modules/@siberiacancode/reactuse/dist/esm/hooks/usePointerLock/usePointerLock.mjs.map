{"version":3,"file":"usePointerLock.mjs","sources":["../../../../src/hooks/usePointerLock/usePointerLock.ts"],"sourcesContent":["import type { MouseEvent } from 'react';\n\nimport { useEffect, useState } from 'react';\n\n/** The use pointer lock return type */\ninterface UsePointerLockReturn {\n  /** The pointer lock element */\n  element?: Element;\n  /** Whether the pointer lock is supported */\n  supported: boolean;\n  /** Lock the pointer lock */\n  lock: (event: MouseEvent) => void;\n  /** Unlock the pointer lock */\n  unlock: () => boolean;\n}\n\n/**\n * @name usePointerLock\n * @description - Hook that provides reactive pointer lock\n * @category Browser\n *\n * @browserapi pointerLockElement https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerLockElement\n *\n * @returns {UsePointerLockReturn} An object containing the pointer lock element and functions to interact with the pointer lock\n *\n * @example\n * const { supported, lock, unlock, element } = usePointerLock();\n */\nexport const usePointerLock = (): UsePointerLockReturn => {\n  const supported = typeof document !== 'undefined' && 'pointerLockElement' in document;\n  const [element, setElement] = useState<Element>();\n\n  useEffect(() => {\n    if (!supported) return;\n\n    const handlePointerLockChange = () => {\n      if (!supported) return;\n\n      const currentElement = document.pointerLockElement ?? element;\n\n      if (currentElement && currentElement === element) {\n        setElement(document.pointerLockElement as Element);\n      }\n    };\n    const handlePointerLockError = () => {\n      if (!supported) return;\n\n      const currentElement = document.pointerLockElement ?? element;\n\n      if (currentElement && currentElement === element) {\n        const action = document.pointerLockElement ? 'release' : 'acquire';\n\n        throw new Error(`Failed to ${action} pointer lock.`);\n      }\n    };\n\n    document.addEventListener('pointerlockchange', handlePointerLockChange);\n    document.addEventListener('pointerlockerror', handlePointerLockError);\n\n    return () => {\n      document.removeEventListener('pointerlockchange', handlePointerLockChange);\n      document.removeEventListener('pointerlockerror', handlePointerLockError);\n    };\n  }, []);\n\n  const lock = (event: MouseEvent) => {\n    if (!supported) return false;\n\n    if (event instanceof Event) return false;\n\n    event.currentTarget.requestPointerLock();\n\n    setElement(event.currentTarget);\n    return true;\n  };\n\n  const unlock = () => {\n    if (!supported) return false;\n\n    if (!element) return false;\n\n    document.exitPointerLock();\n    setElement(undefined);\n\n    return true;\n  };\n\n  return {\n    supported,\n    element,\n    lock,\n    unlock\n  };\n};\n"],"names":["usePointerLock","supported","element","setElement","useState","useEffect","handlePointerLockChange","currentElement","handlePointerLockError","action","event"],"mappings":";AA4BO,MAAMA,IAAiB,MAA4B;AACxD,QAAMC,IAAY,OAAO,WAAa,OAAe,wBAAwB,UACvE,CAACC,GAASC,CAAU,IAAIC,EAAA;AAE9B,SAAAC,EAAU,MAAM;AACd,QAAI,CAACJ,EAAW;AAEhB,UAAMK,IAA0B,MAAM;AACpC,UAAI,CAACL,EAAW;AAEhB,YAAMM,IAAiB,SAAS,sBAAsBL;AAEtD,MAAIK,KAAkBA,MAAmBL,KACvCC,EAAW,SAAS,kBAA6B;AAAA,IACnD,GAEIK,IAAyB,MAAM;AACnC,UAAI,CAACP,EAAW;AAEhB,YAAMM,IAAiB,SAAS,sBAAsBL;AAEtD,UAAIK,KAAkBA,MAAmBL,GAAS;AAChD,cAAMO,IAAS,SAAS,qBAAqB,YAAY;AAEzD,cAAM,IAAI,MAAM,aAAaA,CAAM,gBAAgB;AAAA,MAAA;AAAA,IACrD;AAGF,oBAAS,iBAAiB,qBAAqBH,CAAuB,GACtE,SAAS,iBAAiB,oBAAoBE,CAAsB,GAE7D,MAAM;AACX,eAAS,oBAAoB,qBAAqBF,CAAuB,GACzE,SAAS,oBAAoB,oBAAoBE,CAAsB;AAAA,IAAA;AAAA,EACzE,GACC,EAAE,GAwBE;AAAA,IACL,WAAAP;AAAA,IACA,SAAAC;AAAA,IACA,MAzBW,CAACQ,MACR,CAACT,KAEDS,aAAiB,QAAc,MAEnCA,EAAM,cAAc,mBAAA,GAEpBP,EAAWO,EAAM,aAAa,GACvB;AAAA,IAkBP,QAfa,MACT,CAACT,KAED,CAACC,IAAgB,MAErB,SAAS,gBAAA,GACTC,EAAW,MAAS,GAEb;AAAA,EAOP;AAEJ;"}