import { useState as u, useEffect as l } from "react";
const a = () => {
  const e = typeof document < "u" && "pointerLockElement" in document, [t, o] = u();
  return l(() => {
    if (!e) return;
    const n = () => {
      if (!e) return;
      const r = document.pointerLockElement ?? t;
      r && r === t && o(document.pointerLockElement);
    }, c = () => {
      if (!e) return;
      const r = document.pointerLockElement ?? t;
      if (r && r === t) {
        const i = document.pointerLockElement ? "release" : "acquire";
        throw new Error(`Failed to ${i} pointer lock.`);
      }
    };
    return document.addEventListener("pointerlockchange", n), document.addEventListener("pointerlockerror", c), () => {
      document.removeEventListener("pointerlockchange", n), document.removeEventListener("pointerlockerror", c);
    };
  }, []), {
    supported: e,
    element: t,
    lock: (n) => !e || n instanceof Event ? !1 : (n.currentTarget.requestPointerLock(), o(n.currentTarget), !0),
    unlock: () => !e || !t ? !1 : (document.exitPointerLock(), o(void 0), !0)
  };
};
export {
  a as usePointerLock
};
//# sourceMappingURL=usePointerLock.mjs.map
