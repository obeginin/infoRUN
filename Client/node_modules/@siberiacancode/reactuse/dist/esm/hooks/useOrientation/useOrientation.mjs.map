{"version":3,"file":"useOrientation.mjs","sources":["../../../../src/hooks/useOrientation/useOrientation.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\ndeclare global {\n  interface ScreenOrientation {\n    lock: (orientation: OrientationLockType) => Promise<void>;\n  }\n}\n\n/* The use device orientation value type */\nexport interface UseOrientationValue {\n  /** The current angle */\n  angle: number;\n  /** The current orientation type */\n  orientationType: OrientationType;\n}\n\n/* The screen lock orientation type */\nexport type OrientationLockType =\n  | 'any'\n  | 'landscape-primary'\n  | 'landscape-secondary'\n  | 'landscape'\n  | 'natural'\n  | 'portrait-primary'\n  | 'portrait-secondary'\n  | 'portrait';\n\n/* The use device orientation return type */\nexport interface useOrientationReturn {\n  /** Whether the screen orientation is supported */\n  supported: boolean;\n  /** The current screen orientation value */\n  value: UseOrientationValue;\n  /** Lock the screen orientation */\n  lock: (orientation: OrientationLockType) => void;\n  /** Unlock the screen orientation */\n  unlock: () => void;\n}\n\n/**\n * @name useOrientation\n * @description - Hook that provides the current screen orientation\n * @category Sensors\n *\n * @browserapi screen.orientation https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation\n *\n * @returns {useOrientationReturn} The current screen orientation\n *\n * @example\n * const { supported, value, lock, unlock } = useOrientation();\n */\nexport const useOrientation = (): useOrientationReturn => {\n  const supported =\n    typeof window !== 'undefined' && 'screen' in window && 'orientation' in window.screen;\n  const orientation = (supported ? window.screen.orientation : {}) as ScreenOrientation;\n\n  const [value, setValue] = useState<UseOrientationValue>(() => {\n    return {\n      angle: orientation?.angle ?? 0,\n      orientationType: orientation?.type\n    };\n  });\n\n  useEffect(() => {\n    if (!supported) return;\n\n    const onOrientationChange = () =>\n      setValue({\n        angle: orientation.angle,\n        orientationType: orientation.type\n      });\n\n    window.addEventListener('orientationchange', onOrientationChange);\n    return () => {\n      window.removeEventListener('orientationchange', onOrientationChange);\n    };\n  });\n\n  const lock = (type: OrientationLockType) => {\n    if (supported && typeof orientation.lock === 'function') return orientation.lock(type);\n  };\n\n  const unlock = () => {\n    if (supported && typeof orientation.unlock === 'function') orientation.unlock();\n  };\n\n  return {\n    supported,\n    value,\n    lock,\n    unlock\n  };\n};\n"],"names":["useOrientation","supported","orientation","value","setValue","useState","useEffect","onOrientationChange","type"],"mappings":";AAmDO,MAAMA,IAAiB,MAA4B;AACxD,QAAMC,IACJ,OAAO,SAAW,OAAe,YAAY,UAAU,iBAAiB,OAAO,QAC3EC,IAAeD,IAAY,OAAO,OAAO,cAAc,CAAA,GAEvD,CAACE,GAAOC,CAAQ,IAAIC,EAA8B,OAC/C;AAAA,IACL,OAAOH,GAAa,SAAS;AAAA,IAC7B,iBAAiBA,GAAa;AAAA,EAAA,EAEjC;AAED,SAAAI,EAAU,MAAM;AACd,QAAI,CAACL,EAAW;AAEhB,UAAMM,IAAsB,MAC1BH,EAAS;AAAA,MACP,OAAOF,EAAY;AAAA,MACnB,iBAAiBA,EAAY;AAAA,IAAA,CAC9B;AAEH,kBAAO,iBAAiB,qBAAqBK,CAAmB,GACzD,MAAM;AACX,aAAO,oBAAoB,qBAAqBA,CAAmB;AAAA,IAAA;AAAA,EACrE,CACD,GAUM;AAAA,IACL,WAAAN;AAAA,IACA,OAAAE;AAAA,IACA,MAXW,CAACK,MAA8B;AAC1C,UAAIP,KAAa,OAAOC,EAAY,QAAS,WAAY,QAAOA,EAAY,KAAKM,CAAI;AAAA,IAAA;AAAA,IAWrF,QARa,MAAM;AACnB,MAAIP,KAAa,OAAOC,EAAY,UAAW,gBAAwB,OAAA;AAAA,IAAO;AAAA,EAO9E;AAEJ;"}