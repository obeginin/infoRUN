import { useRef as T, useEffect as Y } from "react";
import { useRefState as b } from "../useRefState/useRefState.mjs";
import { isTarget as H } from "../../utils/helpers/isTarget.mjs";
import { getElement as R } from "../../utils/helpers/getElement.mjs";
const O = (...n) => {
  const c = H(n[0]) ? n[0] : void 0, f = n[1] || (typeof n[0] == "object" ? n[0] : {}), { enabled: v = !0 } = f, l = b(), r = T(f);
  if (r.current = f, Y(() => {
    if (!v || !c && !l.state) return;
    const e = c ? R(c) : l.state;
    if (!e) return;
    let s = !0, h = 0, a = 0;
    const m = () => {
      if (r.current.force) return;
      const { scrollHeight: t, clientHeight: i, scrollTop: o } = e, u = t - i, d = u / 2;
      console.log(
        u,
        o,
        d,
        o < a,
        u - o <= d
      ), o < a ? s = !1 : u - o <= d && (s = !0), a = o;
    }, E = (t) => {
      r.current.force || (t.deltaY < 0 ? s = !1 : m());
    }, g = (t) => {
      r.current.force || (h = t.touches[0].clientY);
    }, S = (t) => {
      if (r.current.force) return;
      const i = t.touches[0].clientY;
      h - i < 0 ? s = !1 : m(), h = i;
    }, L = () => {
      !s && !r.current.force || e.scrollTo({ top: e.scrollHeight });
    };
    e.addEventListener("wheel", E), e.addEventListener("touchstart", g), e.addEventListener("touchmove", S);
    const p = new MutationObserver(L);
    return p.observe(e, {
      childList: !0,
      subtree: !0,
      characterData: !0
    }), () => {
      p.disconnect(), e.removeEventListener("wheel", E), e.removeEventListener("touchstart", g), e.removeEventListener("touchmove", S);
    };
  }, [v, c, l.state]), !c)
    return l;
};
export {
  O as useAutoScroll
};
//# sourceMappingURL=useAutoScroll.mjs.map
