{"version":3,"file":"useAutoScroll.mjs","sources":["../../../../src/hooks/useAutoScroll/useAutoScroll.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport type { HookTarget } from '@/utils/helpers';\n\nimport { getElement, isTarget } from '@/utils/helpers';\n\nimport type { StateRef } from '../useRefState/useRefState';\n\nimport { useRefState } from '../useRefState/useRefState';\n\n/** The use auto scroll options type */\nexport interface UseAutoScrollOptions {\n  /** Whether auto-scrolling is enabled */\n  enabled?: boolean;\n  /** Whether to force auto-scrolling regardless of user interactions */\n  force?: boolean;\n}\n\nexport interface UseAutoScroll {\n  (target: HookTarget, options?: UseAutoScrollOptions): void;\n\n  <Target extends HTMLElement>(options?: UseAutoScrollOptions): StateRef<Target>;\n}\n\n/**\n * @name useAutoScroll\n * @description - Hook that automatically scrolls a list element to the bottom\n * @category Elements\n *\n * @overload\n * @param {HookTarget} target The target element to auto-scroll\n * @param {boolean} [options.enabled] Whether auto-scrolling is enabled\n * @returns {void}\n *\n * @example\n * useAutoScroll(ref);\n *\n * @overload\n * @template Target\n * @param {boolean} [options.enabled] Whether auto-scrolling is enabled\n * @returns {StateRef<Target>} A React ref to attach to the list element\n *\n * @example\n * const ref = useAutoScroll();\n */\nexport const useAutoScroll = ((...params: any[]) => {\n  const target = isTarget(params[0]) ? params[0] : undefined;\n  const options = (params[1] ||\n    (typeof params[0] === 'object' ? params[0] : {})) as UseAutoScrollOptions;\n  const { enabled = true } = options;\n\n  const internalRef = useRefState<HTMLElement>();\n  const internalOptionsRef = useRef<UseAutoScrollOptions>(options);\n  internalOptionsRef.current = options;\n\n  useEffect(() => {\n    if (!enabled || (!target && !internalRef.state)) return;\n\n    const element = (target ? getElement(target) : internalRef.state) as HTMLElement;\n\n    if (!element) return;\n\n    let shouldAutoScroll = true;\n    let touchStartY = 0;\n    let lastScrollTop = 0;\n\n    const onCheckScrollPosition = () => {\n      if (internalOptionsRef.current.force) return;\n\n      const { scrollHeight, clientHeight, scrollTop } = element;\n      const maxScrollHeight = scrollHeight - clientHeight;\n      const scrollThreshold = maxScrollHeight / 2;\n      console.log(\n        maxScrollHeight,\n        scrollTop,\n        scrollThreshold,\n        scrollTop < lastScrollTop,\n        maxScrollHeight - scrollTop <= scrollThreshold\n      );\n\n      if (scrollTop < lastScrollTop) shouldAutoScroll = false;\n      else if (maxScrollHeight - scrollTop <= scrollThreshold) shouldAutoScroll = true;\n\n      lastScrollTop = scrollTop;\n    };\n\n    const onWheel = (event: WheelEvent) => {\n      if (internalOptionsRef.current.force) return;\n\n      if (event.deltaY < 0) shouldAutoScroll = false;\n      else onCheckScrollPosition();\n    };\n\n    const onTouchStart = (event: TouchEvent) => {\n      if (internalOptionsRef.current.force) return;\n      touchStartY = event.touches[0].clientY;\n    };\n\n    const onTouchMove = (event: TouchEvent) => {\n      if (internalOptionsRef.current.force) return;\n\n      const touchEndY = event.touches[0].clientY;\n      const deltaY = touchStartY - touchEndY;\n\n      if (deltaY < 0) shouldAutoScroll = false;\n      else onCheckScrollPosition();\n\n      touchStartY = touchEndY;\n    };\n\n    const onMutation = () => {\n      if (!shouldAutoScroll && !internalOptionsRef.current.force) return;\n      element.scrollTo({ top: element.scrollHeight });\n    };\n\n    element.addEventListener('wheel', onWheel);\n    element.addEventListener('touchstart', onTouchStart);\n    element.addEventListener('touchmove', onTouchMove);\n\n    const observer = new MutationObserver(onMutation);\n\n    observer.observe(element, {\n      childList: true,\n      subtree: true,\n      characterData: true\n    });\n\n    return () => {\n      observer.disconnect();\n      element.removeEventListener('wheel', onWheel);\n      element.removeEventListener('touchstart', onTouchStart);\n      element.removeEventListener('touchmove', onTouchMove);\n    };\n  }, [enabled, target, internalRef.state]);\n\n  if (target) return;\n  return internalRef;\n}) as UseAutoScroll;\n"],"names":["useAutoScroll","params","target","isTarget","options","enabled","internalRef","useRefState","internalOptionsRef","useRef","useEffect","element","getElement","shouldAutoScroll","touchStartY","lastScrollTop","onCheckScrollPosition","scrollHeight","clientHeight","scrollTop","maxScrollHeight","scrollThreshold","onWheel","event","onTouchStart","onTouchMove","touchEndY","onMutation","observer"],"mappings":";;;;AA6CO,MAAMA,IAAiB,IAAIC,MAAkB;AAClD,QAAMC,IAASC,EAASF,EAAO,CAAC,CAAC,IAAIA,EAAO,CAAC,IAAI,QAC3CG,IAAWH,EAAO,CAAC,MACtB,OAAOA,EAAO,CAAC,KAAM,WAAWA,EAAO,CAAC,IAAI,CAAA,IACzC,EAAE,SAAAI,IAAU,GAAA,IAASD,GAErBE,IAAcC,EAAA,GACdC,IAAqBC,EAA6BL,CAAO;AAmF/D,MAlFAI,EAAmB,UAAUJ,GAE7BM,EAAU,MAAM;AACd,QAAI,CAACL,KAAY,CAACH,KAAU,CAACI,EAAY,MAAQ;AAEjD,UAAMK,IAAWT,IAASU,EAAWV,CAAM,IAAII,EAAY;AAE3D,QAAI,CAACK,EAAS;AAEd,QAAIE,IAAmB,IACnBC,IAAc,GACdC,IAAgB;AAEpB,UAAMC,IAAwB,MAAM;AAClC,UAAIR,EAAmB,QAAQ,MAAO;AAEtC,YAAM,EAAE,cAAAS,GAAc,cAAAC,GAAc,WAAAC,EAAA,IAAcR,GAC5CS,IAAkBH,IAAeC,GACjCG,IAAkBD,IAAkB;AAC1C,cAAQ;AAAA,QACNA;AAAA,QACAD;AAAA,QACAE;AAAA,QACAF,IAAYJ;AAAA,QACZK,IAAkBD,KAAaE;AAAA,MAAA,GAG7BF,IAAYJ,IAAeF,IAAmB,KACzCO,IAAkBD,KAAaE,MAAiBR,IAAmB,KAE5EE,IAAgBI;AAAA,IAAA,GAGZG,IAAU,CAACC,MAAsB;AACrC,MAAIf,EAAmB,QAAQ,UAE3Be,EAAM,SAAS,IAAGV,IAAmB,KACpCG,EAAA;AAAA,IAAsB,GAGvBQ,IAAe,CAACD,MAAsB;AAC1C,MAAIf,EAAmB,QAAQ,UAC/BM,IAAcS,EAAM,QAAQ,CAAC,EAAE;AAAA,IAAA,GAG3BE,IAAc,CAACF,MAAsB;AACzC,UAAIf,EAAmB,QAAQ,MAAO;AAEtC,YAAMkB,IAAYH,EAAM,QAAQ,CAAC,EAAE;AAGnC,MAFeT,IAAcY,IAEhB,IAAGb,IAAmB,KAC9BG,EAAA,GAELF,IAAcY;AAAA,IAAA,GAGVC,IAAa,MAAM;AACvB,MAAI,CAACd,KAAoB,CAACL,EAAmB,QAAQ,SACrDG,EAAQ,SAAS,EAAE,KAAKA,EAAQ,cAAc;AAAA,IAAA;AAGhD,IAAAA,EAAQ,iBAAiB,SAASW,CAAO,GACzCX,EAAQ,iBAAiB,cAAca,CAAY,GACnDb,EAAQ,iBAAiB,aAAac,CAAW;AAEjD,UAAMG,IAAW,IAAI,iBAAiBD,CAAU;AAEhD,WAAAC,EAAS,QAAQjB,GAAS;AAAA,MACxB,WAAW;AAAA,MACX,SAAS;AAAA,MACT,eAAe;AAAA,IAAA,CAChB,GAEM,MAAM;AACX,MAAAiB,EAAS,WAAA,GACTjB,EAAQ,oBAAoB,SAASW,CAAO,GAC5CX,EAAQ,oBAAoB,cAAca,CAAY,GACtDb,EAAQ,oBAAoB,aAAac,CAAW;AAAA,IAAA;AAAA,EACtD,GACC,CAACpB,GAASH,GAAQI,EAAY,KAAK,CAAC,GAEnC,CAAAJ;AACJ,WAAOI;AACT;"}