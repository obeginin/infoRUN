{"version":3,"file":"useFullscreen.mjs","sources":["../../../../src/hooks/useFullscreen/useFullscreen.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport screenfull from 'screenfull';\n\nimport type { HookTarget } from '@/utils/helpers';\n\nimport { getElement, isTarget } from '@/utils/helpers';\n\nimport type { StateRef } from '../useRefState/useRefState';\n\nimport { useRefState } from '../useRefState/useRefState';\n\n/** The use fullscreen options type */\nexport interface UseFullScreenOptions {\n  /** initial value */\n  initialValue?: boolean;\n  /** on enter fullscreen */\n  onEnter?: () => void;\n  /** on exit fullscreen */\n  onExit?: () => void;\n}\n\n/** The use click outside return type */\nexport interface UseFullScreenReturn {\n  /** The fullscreen state */\n  value: boolean;\n  /** The fullscreen enter method */\n  enter: () => void;\n  /** The fullscreen exit method */\n  exit: () => void;\n  /** The fullscreen toggle method */\n  toggle: () => void;\n}\n\nexport interface UseFullScreen {\n  (target: HookTarget, options?: UseFullScreenOptions): UseFullScreenReturn;\n\n  <Target extends Element>(\n    options?: UseFullScreenOptions,\n    target?: never\n  ): UseFullScreenReturn & { ref: StateRef<Target> };\n}\n\n/**\n * @name useFullscreen\n * @description - Hook to handle fullscreen events\n * @category Browser\n *\n * @overload\n * @param {HookTarget} target The target element for fullscreen\n * @param {boolean} [options.initialValue=false] initial value of fullscreen\n * @param {() => void} [options.onEnter] on enter fullscreen\n * @param {() => void} [options.onExit] on exit fullscreen\n * @returns {UseFullScreenReturn} An object with the fullscreen state and methods\n *\n * @example\n * const { enter, exit, toggle, value } = useFullscreen(ref);\n *\n * @overload\n * @template Target The target element for fullscreen\n * @param {boolean} [options.initialValue=false] initial value of fullscreen\n * @param {() => void} [options.onEnter] on enter fullscreen\n * @param {() => void} [options.onExit] on exit fullscreen\n * @returns {UseFullScreenReturn & { ref: RefObject<Target> }} An object with the fullscreen state and methods\n *\n * @example\n * const { ref, enter, exit, toggle, value } = useFullscreen();\n */\nexport const useFullscreen = ((...params: any[]) => {\n  const target = (isTarget(params[0]) ? params[0] : undefined) as HookTarget | undefined;\n  const options = (target ? params[1] : params[0]) as UseFullScreenOptions | undefined;\n\n  const [value, setValue] = useState(options?.initialValue ?? false);\n  const internalRef = useRefState<Element>();\n\n  const onChange = () => {\n    if (!screenfull.isEnabled) return;\n\n    if (screenfull.isFullscreen) {\n      options?.onEnter?.();\n    } else {\n      screenfull.off('change', onChange);\n      options?.onExit?.();\n    }\n\n    setValue(screenfull.isFullscreen);\n  };\n\n  const enter = () => {\n    const element = (target ? getElement(target) : internalRef.current) as Element;\n    if (!element) return;\n\n    if (screenfull.isEnabled) {\n      try {\n        screenfull.request(element);\n        screenfull.on('change', onChange);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  const exit = () => {\n    if (screenfull.isEnabled) screenfull.exit();\n  };\n\n  const toggle = () => {\n    if (value) return exit();\n    enter();\n  };\n\n  useEffect(\n    () => () => {\n      if (screenfull.isEnabled) screenfull.off('change', onChange);\n    },\n    []\n  );\n\n  if (target)\n    return {\n      enter,\n      exit,\n      toggle,\n      value\n    };\n  return {\n    ref: internalRef,\n    enter,\n    exit,\n    toggle,\n    value\n  };\n}) as UseFullScreen;\n"],"names":["useFullscreen","params","target","isTarget","options","value","setValue","useState","internalRef","useRefState","onChange","screenfull","enter","element","getElement","error","exit","toggle","useEffect"],"mappings":";;;;;AAmEO,MAAMA,IAAiB,IAAIC,MAAkB;AAClD,QAAMC,IAAUC,EAASF,EAAO,CAAC,CAAC,IAAIA,EAAO,CAAC,IAAI,QAC5CG,IAAWF,IAASD,EAAO,CAAC,IAAIA,EAAO,CAAC,GAExC,CAACI,GAAOC,CAAQ,IAAIC,EAASH,GAAS,gBAAgB,EAAK,GAC3DI,IAAcC,EAAA,GAEdC,IAAW,MAAM;AACrB,IAAKC,EAAW,cAEZA,EAAW,eACbP,GAAS,UAAA,KAETO,EAAW,IAAI,UAAUD,CAAQ,GACjCN,GAAS,SAAA,IAGXE,EAASK,EAAW,YAAY;AAAA,EAAA,GAG5BC,IAAQ,MAAM;AAClB,UAAMC,IAAWX,IAASY,EAAWZ,CAAM,IAAIM,EAAY;AAC3D,QAAKK,KAEDF,EAAW;AACb,UAAI;AACF,QAAAA,EAAW,QAAQE,CAAO,GAC1BF,EAAW,GAAG,UAAUD,CAAQ;AAAA,MAAA,SACzBK,GAAO;AACd,gBAAQ,MAAMA,CAAK;AAAA,MAAA;AAAA,EAEvB,GAGIC,IAAO,MAAM;AACjB,IAAIL,EAAW,aAAWA,EAAW,KAAA;AAAA,EAAK,GAGtCM,IAAS,MAAM;AACnB,QAAIZ,UAAcW,EAAA;AAClB,IAAAJ,EAAA;AAAA,EAAM;AAUR,SAPAM;AAAA,IACE,MAAM,MAAM;AACV,MAAIP,EAAW,aAAWA,EAAW,IAAI,UAAUD,CAAQ;AAAA,IAAA;AAAA,IAE7D,CAAA;AAAA,EAAC,GAGCR,IACK;AAAA,IACL,OAAAU;AAAA,IACA,MAAAI;AAAA,IACA,QAAAC;AAAA,IACA,OAAAZ;AAAA,EAAA,IAEG;AAAA,IACL,KAAKG;AAAA,IACL,OAAAI;AAAA,IACA,MAAAI;AAAA,IACA,QAAAC;AAAA,IACA,OAAAZ;AAAA,EAAA;AAEJ;"}