import { useState as m, useEffect as E } from "react";
import e from "screenfull";
import { useRefState as d } from "../useRefState/useRefState.mjs";
import { isTarget as h } from "../../utils/helpers/isTarget.mjs";
import { getElement as b } from "../../utils/helpers/getElement.mjs";
const S = (...t) => {
  const n = h(t[0]) ? t[0] : void 0, r = n ? t[1] : t[0], [o, a] = m(r?.initialValue ?? !1), l = d(), i = () => {
    e.isEnabled && (e.isFullscreen ? r?.onEnter?.() : (e.off("change", i), r?.onExit?.()), a(e.isFullscreen));
  }, s = () => {
    const u = n ? b(n) : l.current;
    if (u && e.isEnabled)
      try {
        e.request(u), e.on("change", i);
      } catch (g) {
        console.error(g);
      }
  }, f = () => {
    e.isEnabled && e.exit();
  }, c = () => {
    if (o) return f();
    s();
  };
  return E(
    () => () => {
      e.isEnabled && e.off("change", i);
    },
    []
  ), n ? {
    enter: s,
    exit: f,
    toggle: c,
    value: o
  } : {
    ref: l,
    enter: s,
    exit: f,
    toggle: c,
    value: o
  };
};
export {
  S as useFullscreen
};
//# sourceMappingURL=useFullscreen.mjs.map
