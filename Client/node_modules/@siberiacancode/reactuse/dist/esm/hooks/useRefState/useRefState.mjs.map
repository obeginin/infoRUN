{"version":3,"file":"useRefState.mjs","sources":["../../../../src/hooks/useRefState/useRefState.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport interface StateRef<Value> {\n  (node: Value): void;\n  current: Value;\n  state?: Value;\n}\n\nconst createRefState = <Value>(\n  initialValue: Value | undefined,\n  setState: (value: Value) => void\n) => {\n  let temp = initialValue;\n  function ref(value: Value) {\n    if (temp === value) return;\n    temp = value;\n    setState(temp);\n  }\n\n  Object.defineProperty(ref, 'current', {\n    get() {\n      return temp;\n    },\n    set(value: Value) {\n      if (temp === value) return;\n      temp = value;\n      setState(temp);\n    },\n    configurable: true,\n    enumerable: true\n  });\n\n  return ref as StateRef<Value>;\n};\n\n/**\n * @name useRefState\n * @description - Hook that returns the state reference of the value\n * @category State\n *\n * @template Value The type of the value\n * @param {Value} [initialValue] The initial value\n * @returns {StateRef<Value>} The current value\n *\n * @example\n * const internalRefState = useRefState();\n */\nexport const useRefState = <Value>(initialValue?: Value) => {\n  const [state, setState] = useState<Value | undefined>(initialValue);\n  const [ref] = useState(() => createRefState<Value>(initialValue, setState));\n  ref.state = state;\n  return ref;\n};\n"],"names":["createRefState","initialValue","setState","temp","ref","value","useRefState","state","useState"],"mappings":";AAQA,MAAMA,IAAiB,CACrBC,GACAC,MACG;AACH,MAAIC,IAAOF;AACX,WAASG,EAAIC,GAAc;AACzB,IAAIF,MAASE,MACbF,IAAOE,GACPH,EAASC,CAAI;AAAA,EAAA;AAGf,gBAAO,eAAeC,GAAK,WAAW;AAAA,IACpC,MAAM;AACJ,aAAOD;AAAA,IAAA;AAAA,IAET,IAAIE,GAAc;AAChB,MAAIF,MAASE,MACbF,IAAOE,GACPH,EAASC,CAAI;AAAA,IAAA;AAAA,IAEf,cAAc;AAAA,IACd,YAAY;AAAA,EAAA,CACb,GAEMC;AACT,GAcaE,IAAc,CAAQL,MAAyB;AAC1D,QAAM,CAACM,GAAOL,CAAQ,IAAIM,EAA4BP,CAAY,GAC5D,CAACG,CAAG,IAAII,EAAS,MAAMR,EAAsBC,GAAcC,CAAQ,CAAC;AAC1E,SAAAE,EAAI,QAAQG,GACLH;AACT;"}