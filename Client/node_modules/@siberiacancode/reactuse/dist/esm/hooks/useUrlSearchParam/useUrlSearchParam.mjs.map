{"version":3,"file":"useUrlSearchParam.mjs","sources":["../../../../src/hooks/useUrlSearchParam/useUrlSearchParam.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\n/** The url search params mode type */\nexport type UrlSearchParamMode = 'hash-params' | 'hash' | 'history';\n\n/** The use url search param options type */\nexport interface UseUrlSearchParamOptions<Value> {\n  /** The initial value of the search param */\n  initialValue?: Value;\n  /** The mode to use for writing to the URL */\n  mode?: UrlSearchParamMode;\n  /** The mode to use for writing to the URL */\n  write?: 'push' | 'replace';\n  /** The deserializer function to be invoked */\n  deserializer?: (value: string) => Value;\n  /** The serializer function to be invoked */\n  serializer?: (value: Value) => string;\n}\n\n/** The use url search params set options type */\nexport interface UseUrlSearchParamsActionOptions {\n  /** The mode to use for writing to the URL */\n  write?: 'push' | 'replace';\n}\n\n/** The use url search param return type */\nexport interface UseUrlSearchParamReturn<Value> {\n  /** Current search param value */\n  value: Value | undefined;\n  /** Function to remove the search param */\n  remove: (options?: UseUrlSearchParamsActionOptions) => void;\n  /** Function to update search param */\n  set: (value: Value, options?: UseUrlSearchParamsActionOptions) => void;\n}\n\nexport const URL_SEARCH_PARAMS_EVENT = 'reactuse-url-search-params-event';\n\nexport const getUrlSearchParams = (mode: UrlSearchParamMode = 'history') => {\n  const { search, hash } = window.location;\n\n  let path = '';\n\n  if (mode === 'history') path = search;\n  if (mode === 'hash-params') path = hash.replace(/^#/, '');\n  if (mode === 'hash') {\n    const index = hash.indexOf('?');\n    path = ~index ? hash.slice(index) : '';\n  }\n\n  return new URLSearchParams(path);\n};\n\nexport const createQueryString = (searchParams: URLSearchParams, mode: UrlSearchParamMode) => {\n  const searchParamsString = searchParams.toString();\n  const { search, hash } = window.location;\n\n  if (mode === 'history') return `${searchParamsString ? `?${searchParamsString}` : ''}${hash}`;\n  if (mode === 'hash-params')\n    return `${search}${searchParamsString ? `#${searchParamsString}` : ''}`;\n  if (mode === 'hash') {\n    const index = hash.indexOf('?');\n    const base = index > -1 ? hash.slice(0, index) : hash;\n    return `${search}${base}${searchParamsString ? `?${searchParamsString}` : ''}`;\n  }\n\n  throw new Error('Invalid mode');\n};\n\nexport const dispatchUrlSearchParamsEvent = () =>\n  window.dispatchEvent(new Event(URL_SEARCH_PARAMS_EVENT));\n\nexport interface UseUrlSearchParam {\n  <Value>(\n    key: string,\n    options: UseUrlSearchParamOptions<Value> & { initialValue: Value }\n  ): UseUrlSearchParamReturn<Value>;\n\n  <Value>(\n    key: string,\n    options?: UseUrlSearchParamOptions<Value>\n  ): UseUrlSearchParamReturn<Value | undefined>;\n\n  <Value>(key: string, initialValue: Value): UseUrlSearchParamReturn<Value>;\n\n  <Value>(key: string): UseUrlSearchParamReturn<Value | undefined>;\n}\n\n/**\n * @name useUrlSearchParam\n * @description - Hook that provides reactive URLSearchParams for a single key\n * @category State\n *\n * @overload\n * @template Value The type of the url param values\n * @param {string} key The key of the url param\n * @param {UseUrlSearchParamOptions<Value> & { initialValue: Value }} options The options object with required initialValue\n * @param {Value} options.initialValue The initial value for the url param\n * @param {UrlSearchParamsMode} [options.mode='history'] The mode to use for the URL ('history' | 'hash-params' | 'hash')\n * @param {'push' | 'replace'} [options.write='replace'] The mode to use for writing to the URL\n * @param {(value: Value) => string} [options.serializer] Custom serializer function to convert value to string\n * @param {(value: string) => Value} [options.deserializer] Custom deserializer function to convert string to value\n * @returns {UseUrlSearchParamReturn<Value>} The object with value and function for change value\n *\n * @example\n * const { value, set } = useUrlSearchParam('page', { initialValue: 1 });\n *\n * @overload\n * @template Value The type of the url param values\n * @param {string} key The key of the url param\n * @param {Value} [initialValue] The initial value for the url param\n * @returns {UseUrlSearchParamReturn<Value>} The object with value and function for change value\n *\n * @example\n * const { value, set } = useUrlSearchParam('page', 1);\n */\nexport const useUrlSearchParam = (<Value>(key: string, params?: any) => {\n  const options = (\n    typeof params === 'object' &&\n    params &&\n    ('serializer' in params ||\n      'deserializer' in params ||\n      'initialValue' in params ||\n      'mode' in params ||\n      'write' in params)\n      ? params\n      : undefined\n  ) as UseUrlSearchParamOptions<Value>;\n\n  const initialValue = (options ? options?.initialValue : params) as Value;\n  const { mode = 'history', write: writeMode = 'replace' } = options ?? {};\n\n  if (typeof window === 'undefined') {\n    return {\n      value: initialValue,\n      remove: () => {},\n      set: () => {}\n    } as UseUrlSearchParamReturn<Value>;\n  }\n\n  const serializer = (value: Value) => {\n    if (options?.serializer) return options.serializer(value);\n    if (typeof value === 'string') return value;\n\n    return JSON.stringify(value);\n  };\n\n  const deserializer = (value: string) => {\n    if (options?.deserializer) return options.deserializer(value);\n    if (value === 'undefined' || value === 'null') return undefined as unknown as Value;\n\n    try {\n      return JSON.parse(value) as Value;\n    } catch {\n      return value as Value;\n    }\n  };\n\n  const setUrlSearchParam = (\n    key: string,\n    value: Value | undefined,\n    mode: UrlSearchParamMode,\n    write: 'push' | 'replace' = 'replace'\n  ) => {\n    const searchParams = getUrlSearchParams(mode);\n    const serializedValue =\n      value !== undefined ? (serializer ? serializer(value) : String(value)) : '';\n\n    if (value === undefined) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, serializedValue);\n    }\n\n    const query = createQueryString(searchParams, mode);\n    if (write === 'replace') window.history.replaceState({}, '', query);\n    if (write === 'push') window.history.pushState({}, '', query);\n\n    dispatchUrlSearchParamsEvent();\n  };\n\n  const [value, setValue] = useState<Value | undefined>(() => {\n    const searchParams = getUrlSearchParams(mode);\n    const currentValue = searchParams.get(key);\n\n    if (currentValue === null && initialValue !== undefined) {\n      setUrlSearchParam(key, initialValue, mode, writeMode);\n      return initialValue;\n    }\n\n    return currentValue ? deserializer(currentValue) : undefined;\n  });\n\n  const set = (value: Value, options?: UseUrlSearchParamsActionOptions) => {\n    setUrlSearchParam(key, value, mode, options?.write ?? writeMode);\n    setValue(value);\n  };\n\n  const remove = (options?: UseUrlSearchParamsActionOptions) => {\n    setUrlSearchParam(key, undefined, mode, options?.write ?? writeMode);\n    setValue(undefined);\n  };\n\n  useEffect(() => {\n    const onParamsChange = () => {\n      const searchParams = getUrlSearchParams(mode);\n      const newValue = searchParams.get(key);\n      setValue(newValue ? deserializer(newValue) : undefined);\n    };\n\n    window.addEventListener(URL_SEARCH_PARAMS_EVENT, onParamsChange);\n    window.addEventListener('popstate', onParamsChange);\n    if (mode !== 'history') {\n      window.addEventListener('hashchange', onParamsChange);\n    }\n\n    return () => {\n      window.removeEventListener(URL_SEARCH_PARAMS_EVENT, onParamsChange);\n      window.removeEventListener('popstate', onParamsChange);\n      if (mode !== 'history') {\n        window.removeEventListener('hashchange', onParamsChange);\n      }\n    };\n  }, [key, mode]);\n\n  return {\n    value,\n    remove,\n    set\n  };\n}) as UseUrlSearchParam;\n"],"names":["URL_SEARCH_PARAMS_EVENT","getUrlSearchParams","mode","search","hash","path","index","createQueryString","searchParams","searchParamsString","base","dispatchUrlSearchParamsEvent","useUrlSearchParam","key","params","options","initialValue","writeMode","serializer","value","deserializer","setUrlSearchParam","write","serializedValue","query","setValue","useState","currentValue","set","remove","useEffect","onParamsChange","newValue"],"mappings":"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"}