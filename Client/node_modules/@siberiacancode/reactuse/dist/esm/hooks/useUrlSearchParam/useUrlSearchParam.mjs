import { useState as $, useEffect as y } from "react";
const u = "reactuse-url-search-params-event", f = (n = "history") => {
  const { search: i, hash: r } = window.location;
  let s = "";
  if (n === "history" && (s = i), n === "hash-params" && (s = r.replace(/^#/, "")), n === "hash") {
    const t = r.indexOf("?");
    s = ~t ? r.slice(t) : "";
  }
  return new URLSearchParams(s);
}, z = (n, i) => {
  const r = n.toString(), { search: s, hash: t } = window.location;
  if (i === "history") return `${r ? `?${r}` : ""}${t}`;
  if (i === "hash-params")
    return `${s}${r ? `#${r}` : ""}`;
  if (i === "hash") {
    const a = t.indexOf("?"), h = a > -1 ? t.slice(0, a) : t;
    return `${s}${h}${r ? `?${r}` : ""}`;
  }
  throw new Error("Invalid mode");
}, L = () => window.dispatchEvent(new Event(u)), U = (n, i) => {
  const r = typeof i == "object" && i && ("serializer" in i || "deserializer" in i || "initialValue" in i || "mode" in i || "write" in i) ? i : void 0, s = r ? r?.initialValue : i, { mode: t = "history", write: a = "replace" } = r ?? {};
  if (typeof window > "u")
    return {
      value: s,
      remove: () => {
      },
      set: () => {
      }
    };
  const h = (e) => r?.serializer ? r.serializer(e) : typeof e == "string" ? e : JSON.stringify(e), p = (e) => {
    if (r?.deserializer) return r.deserializer(e);
    if (!(e === "undefined" || e === "null"))
      try {
        return JSON.parse(e);
      } catch {
        return e;
      }
  }, d = (e, o, c, v = "replace") => {
    const l = f(c), m = o !== void 0 ? h ? h(o) : String(o) : "";
    o === void 0 ? l.delete(e) : l.set(e, m);
    const S = z(l, c);
    v === "replace" && window.history.replaceState({}, "", S), v === "push" && window.history.pushState({}, "", S), L();
  }, [E, w] = $(() => {
    const o = f(t).get(n);
    return o === null && s !== void 0 ? (d(n, s, t, a), s) : o ? p(o) : void 0;
  }), P = (e, o) => {
    d(n, e, t, o?.write ?? a), w(e);
  }, g = (e) => {
    d(n, void 0, t, e?.write ?? a), w(void 0);
  };
  return y(() => {
    const e = () => {
      const c = f(t).get(n);
      w(c ? p(c) : void 0);
    };
    return window.addEventListener(u, e), window.addEventListener("popstate", e), t !== "history" && window.addEventListener("hashchange", e), () => {
      window.removeEventListener(u, e), window.removeEventListener("popstate", e), t !== "history" && window.removeEventListener("hashchange", e);
    };
  }, [n, t]), {
    value: E,
    remove: g,
    set: P
  };
};
export {
  u as URL_SEARCH_PARAMS_EVENT,
  z as createQueryString,
  L as dispatchUrlSearchParamsEvent,
  f as getUrlSearchParams,
  U as useUrlSearchParam
};
//# sourceMappingURL=useUrlSearchParam.mjs.map
