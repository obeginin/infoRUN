{"version":3,"file":"useHash.mjs","sources":["../../../../src/hooks/useHash/useHash.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst getHash = () => decodeURIComponent(window.location.hash.replace('#', ''));\n\n/** The use hash return type */\ntype UseHashReturn = [string, (value: string) => void];\n\n/**\n * @name useHash\n * @description - Hook that manages the hash value\n * @category State\n *\n * @param {string} [initialValue] The initial hash value if no hash exists\n * @returns {UseHashReturn} An array containing the hash value and a function to set the hash value\n *\n * @example\n * const [hash, setHash] = useHash(\"initial\");\n */\nexport const useHash = (\n  initialValue = '',\n  mode: 'initial' | 'replace' = 'replace'\n): UseHashReturn => {\n  const [hash, setHash] = useState(() => {\n    if (typeof window === 'undefined') return initialValue;\n    return getHash() || initialValue;\n  });\n\n  const set = (value: string) => {\n    window.location.hash = value;\n    setHash(value);\n  };\n\n  useEffect(() => {\n    if (mode === 'replace') window.location.hash = hash;\n\n    const onHashChange = () => setHash(getHash());\n    window.addEventListener('hashchange', onHashChange);\n    return () => {\n      window.removeEventListener('hashchange', onHashChange);\n    };\n  }, []);\n\n  return [hash, set] as const;\n};\n"],"names":["getHash","useHash","initialValue","mode","hash","setHash","useState","set","value","useEffect","onHashChange"],"mappings":";AAEA,MAAMA,IAAU,MAAM,mBAAmB,OAAO,SAAS,KAAK,QAAQ,KAAK,EAAE,CAAC,GAgBjEC,IAAU,CACrBC,IAAe,IACfC,IAA8B,cACZ;AAClB,QAAM,CAACC,GAAMC,CAAO,IAAIC,EAAS,MAC3B,OAAO,SAAW,MAAoBJ,IACnCF,OAAaE,CACrB,GAEKK,IAAM,CAACC,MAAkB;AAC7B,WAAO,SAAS,OAAOA,GACvBH,EAAQG,CAAK;AAAA,EAAA;AAGf,SAAAC,EAAU,MAAM;AACd,IAAIN,MAAS,cAAW,OAAO,SAAS,OAAOC;AAE/C,UAAMM,IAAe,MAAML,EAAQL,GAAS;AAC5C,kBAAO,iBAAiB,cAAcU,CAAY,GAC3C,MAAM;AACX,aAAO,oBAAoB,cAAcA,CAAY;AAAA,IAAA;AAAA,EACvD,GACC,EAAE,GAEE,CAACN,GAAMG,CAAG;AACnB;"}