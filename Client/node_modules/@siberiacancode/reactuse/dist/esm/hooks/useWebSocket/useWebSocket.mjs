import { useRef as i, useState as S, useEffect as g } from "react";
import { useEvent as R } from "../useEvent/useEvent.mjs";
import { getRetry as d } from "../../utils/helpers/getRetry.mjs";
const w = (c, r) => {
  const t = i(void 0), s = i(r?.retry ? d(r.retry) : 0), u = i(!1), [a, o] = S("connecting"), l = (e) => t.current?.send(e), y = () => {
    u.current = !0, t.current?.close();
  }, f = R(() => {
    t.current = new WebSocket(
      typeof c == "function" ? c() : c,
      r?.protocols
    ), o("connecting");
    const e = t.current;
    e && (e.onopen = () => {
      o("connected"), r?.onConnected?.(e);
    }, e.onerror = (n) => {
      o("failed"), r?.onError?.(n, e);
    }, e.onmessage = (n) => r?.onMessage?.(n, e), e.onclose = (n) => {
      if (o("disconnected"), r?.onDisconnected?.(n, e), !u.current) {
        if (s.current > 0)
          return s.current -= 1, f();
        s.current = r?.retry ? d(r.retry) : 0;
      }
    });
  });
  g(() => (f(), () => {
    t.current && (t.current.close(), t.current = void 0);
  }), [c]);
  const m = () => {
    u.current = !1, f();
  };
  return { client: t.current, close: y, open: m, send: l, status: a };
};
export {
  w as useWebSocket
};
//# sourceMappingURL=useWebSocket.mjs.map
