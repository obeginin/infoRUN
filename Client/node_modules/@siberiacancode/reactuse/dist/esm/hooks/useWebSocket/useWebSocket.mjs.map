{"version":3,"file":"useWebSocket.mjs","sources":["../../../../src/hooks/useWebSocket/useWebSocket.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nimport { getRetry } from '@/utils/helpers';\n\nimport { useEvent } from '../useEvent/useEvent';\n\nexport type UseWebSocketUrl = (() => string) | string;\n\nexport interface UseWebSocketOptions {\n  protocols?: Array<'soap' | 'wasm'>;\n  retry?: boolean | number;\n  onConnected?: (webSocket: WebSocket) => void;\n  onDisconnected?: (event: CloseEvent, webSocket: WebSocket) => void;\n  onError?: (event: Event, webSocket: WebSocket) => void;\n  onMessage?: (event: MessageEvent, webSocket: WebSocket) => void;\n}\n\nexport type UseWebSocketStatus = 'connected' | 'connecting' | 'disconnected' | 'failed';\n\nexport interface UseWebSocketReturn {\n  client?: WebSocket;\n  close: WebSocket['close'];\n  send: WebSocket['send'];\n  status: UseWebSocketStatus;\n  open: () => void;\n}\n\n/**\n * @name useWebSocket\n * @description - Hook that connects to a WebSocket server and handles incoming and outgoing messages\n * @category Browser\n *\n * @param {UseWebSocketUrl} url The URL of the WebSocket server\n * @param {(webSocket: WebSocket) => void} [options.onConnected] The callback function that is called when the WebSocket connection is established\n * @param {(event: CloseEvent, webSocket: WebSocket) => void} [options.onDisconnected] The callback function that is called when the WebSocket connection is closed\n * @param {(event: Event, webSocket: WebSocket) => void} [options.onError] The callback function that is called when an error occurs\n * @param {(event: MessageEvent, webSocket: WebSocket) => void} [options.onMessage] The callback function that is called when a message is received\n * @param {boolean | number} [options.retry] The number of times to retry the connection\n * @param {Array<'soap' | 'wasm'>} [options.protocols] The list of protocols to use\n * @returns {UseWebSocketReturn} An object with the status, close, send, open, and ws properties\n *\n * @example\n * const { status, close, send, open, client } = useWebSocket('url');\n */\nexport const useWebSocket = (\n  url: UseWebSocketUrl,\n  options?: UseWebSocketOptions\n): UseWebSocketReturn => {\n  const webSocketRef = useRef<WebSocket>(undefined);\n  const retryCountRef = useRef(options?.retry ? getRetry(options.retry) : 0);\n  const explicityCloseRef = useRef(false);\n\n  const [status, setStatus] = useState<UseWebSocketStatus>('connecting');\n\n  const send = (data: string | ArrayBufferLike | ArrayBufferView | Blob) =>\n    webSocketRef.current?.send(data);\n\n  const close = () => {\n    explicityCloseRef.current = true;\n    webSocketRef.current?.close();\n  };\n\n  const init = useEvent(() => {\n    webSocketRef.current = new WebSocket(\n      typeof url === 'function' ? url() : url,\n      options?.protocols\n    );\n    setStatus('connecting');\n\n    const webSocket = webSocketRef.current;\n    if (!webSocket) return;\n\n    webSocket.onopen = () => {\n      setStatus('connected');\n      options?.onConnected?.(webSocket);\n    };\n\n    webSocket.onerror = (event) => {\n      setStatus('failed');\n      options?.onError?.(event, webSocket);\n    };\n\n    webSocket.onmessage = (event) => options?.onMessage?.(event, webSocket);\n\n    webSocket.onclose = (event) => {\n      setStatus('disconnected');\n      options?.onDisconnected?.(event, webSocket);\n      if (explicityCloseRef.current) return;\n\n      if (retryCountRef.current > 0) {\n        retryCountRef.current -= 1;\n        return init();\n      }\n      retryCountRef.current = options?.retry ? getRetry(options.retry) : 0;\n    };\n  });\n\n  useEffect(() => {\n    init();\n\n    return () => {\n      if (!webSocketRef.current) return;\n      webSocketRef.current.close();\n      webSocketRef.current = undefined;\n    };\n  }, [url]);\n\n  const open = () => {\n    explicityCloseRef.current = false;\n    init();\n  };\n\n  return { client: webSocketRef.current, close, open, send, status };\n};\n"],"names":["useWebSocket","url","options","webSocketRef","useRef","retryCountRef","getRetry","explicityCloseRef","status","setStatus","useState","send","data","close","init","useEvent","webSocket","event","useEffect","open"],"mappings":";;;AA4CO,MAAMA,IAAe,CAC1BC,GACAC,MACuB;AACvB,QAAMC,IAAeC,EAAkB,MAAS,GAC1CC,IAAgBD,EAAOF,GAAS,QAAQI,EAASJ,EAAQ,KAAK,IAAI,CAAC,GACnEK,IAAoBH,EAAO,EAAK,GAEhC,CAACI,GAAQC,CAAS,IAAIC,EAA6B,YAAY,GAE/DC,IAAO,CAACC,MACZT,EAAa,SAAS,KAAKS,CAAI,GAE3BC,IAAQ,MAAM;AAClB,IAAAN,EAAkB,UAAU,IAC5BJ,EAAa,SAAS,MAAA;AAAA,EAAM,GAGxBW,IAAOC,EAAS,MAAM;AAC1B,IAAAZ,EAAa,UAAU,IAAI;AAAA,MACzB,OAAOF,KAAQ,aAAaA,EAAA,IAAQA;AAAA,MACpCC,GAAS;AAAA,IAAA,GAEXO,EAAU,YAAY;AAEtB,UAAMO,IAAYb,EAAa;AAC/B,IAAKa,MAELA,EAAU,SAAS,MAAM;AACvB,MAAAP,EAAU,WAAW,GACrBP,GAAS,cAAcc,CAAS;AAAA,IAAA,GAGlCA,EAAU,UAAU,CAACC,MAAU;AAC7B,MAAAR,EAAU,QAAQ,GAClBP,GAAS,UAAUe,GAAOD,CAAS;AAAA,IAAA,GAGrCA,EAAU,YAAY,CAACC,MAAUf,GAAS,YAAYe,GAAOD,CAAS,GAEtEA,EAAU,UAAU,CAACC,MAAU;AAG7B,UAFAR,EAAU,cAAc,GACxBP,GAAS,iBAAiBe,GAAOD,CAAS,GACtC,CAAAT,EAAkB,SAEtB;AAAA,YAAIF,EAAc,UAAU;AAC1B,iBAAAA,EAAc,WAAW,GAClBS,EAAA;AAET,QAAAT,EAAc,UAAUH,GAAS,QAAQI,EAASJ,EAAQ,KAAK,IAAI;AAAA;AAAA,IAAA;AAAA,EACrE,CACD;AAED,EAAAgB,EAAU,OACRJ,EAAA,GAEO,MAAM;AACX,IAAKX,EAAa,YAClBA,EAAa,QAAQ,MAAA,GACrBA,EAAa,UAAU;AAAA,EAAA,IAExB,CAACF,CAAG,CAAC;AAER,QAAMkB,IAAO,MAAM;AACjB,IAAAZ,EAAkB,UAAU,IAC5BO,EAAA;AAAA,EAAK;AAGP,SAAO,EAAE,QAAQX,EAAa,SAAS,OAAAU,GAAO,MAAAM,GAAM,MAAAR,GAAM,QAAAH,EAAA;AAC5D;"}