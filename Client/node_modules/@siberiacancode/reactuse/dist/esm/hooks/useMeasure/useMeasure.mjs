import { useState as R, useEffect as d } from "react";
import { useRefState as v } from "../useRefState/useRefState.mjs";
import { isTarget as w } from "../../utils/helpers/isTarget.mjs";
import { getElement as x } from "../../utils/helpers/getElement.mjs";
const S = (...r) => {
  const t = w(r[0]) ? r[0] : void 0, e = v(), [o, c] = R({
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    bottom: 0,
    right: 0
  });
  return d(() => {
    if (!t && !e.state) return;
    const n = t ? x(t) : e.current;
    if (!n) return;
    const s = new ResizeObserver((f) => {
      const i = f[0];
      if (!i) return;
      const { x: u, y: m, width: h, height: g, top: a, left: p, bottom: b, right: l } = i.contentRect;
      c({ x: u, y: m, width: h, height: g, top: a, left: p, bottom: b, right: l });
    });
    return s.observe(n), () => {
      s.disconnect();
    };
  }, [t, e.state]), t ? o : { ref: e, ...o };
};
export {
  S as useMeasure
};
//# sourceMappingURL=useMeasure.mjs.map
