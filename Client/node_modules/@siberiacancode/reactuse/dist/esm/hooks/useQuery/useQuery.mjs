import { useRef as l, useState as c, useEffect as L } from "react";
import { useDidUpdate as x } from "../useDidUpdate/useDidUpdate.mjs";
import { useMount as M } from "../useMount/useMount.mjs";
import { getRetry as b } from "../../utils/helpers/getRetry.mjs";
const B = (E, e) => {
  const a = e?.enabled ?? !0, n = l(e?.retry ? b(e.retry) : 0), o = l(!1), [C, u] = c(!1), [S, i] = c(!1), [k, v] = c(!1), [q, y] = c(!1), [w, I] = c(!!e?.placeholderData), [A, g] = c(void 0), [F, m] = c(e?.placeholderData), h = l(new AbortController()), D = l(void 0), d = e?.keys ?? [], R = () => {
    h.current.abort(), h.current = new AbortController();
  }, s = (t) => {
    R(), u(!0), t === "init" && (o.current = !0, i(!0)), t === "refetch" && y(!0), E({ signal: h.current.signal, keys: d }).then((r) => {
      const f = e?.select ? e?.select(r) : r;
      e?.onSuccess?.(f), m(f), I(!0), g(void 0), v(!1), u(!1), t === "init" && i(!1), t === "refetch" && y(!1);
    }).catch((r) => {
      if (n.current > 0) {
        n.current -= 1;
        const f = typeof e?.retryDelay == "function" ? e?.retryDelay(n.current, r) : e?.retryDelay;
        if (f) {
          setTimeout(() => s(t), f);
          return;
        }
        return s(t);
      }
      e?.onError?.(r), m(void 0), I(!1), g(r), v(!0), u(!1), t === "init" && i(!1), t === "refetch" && y(!1), n.current = e?.retry ? b(e.retry) : 0;
    }).finally(() => {
      if (e?.refetchInterval) {
        const r = setInterval(() => {
          clearInterval(r), s("refetch");
        }, e?.refetchInterval);
        D.current = r;
      }
    });
  };
  return M(() => {
    a && s("init");
  }), x(() => {
    a && s(o.current ? "refetch" : "init");
  }, [a, ...d]), L(() => () => {
    clearInterval(D.current);
  }, [a, e?.refetchInterval, e?.retry, ...d]), {
    abort: R,
    data: F,
    error: A,
    refetch: () => s("refetch"),
    isFetching: C,
    isLoading: S,
    isError: k,
    isSuccess: w,
    isRefetching: q
  };
};
export {
  B as useQuery
};
//# sourceMappingURL=useQuery.mjs.map
