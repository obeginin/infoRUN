import { useState as v, useRef as l, useEffect as p } from "react";
import { useRefState as y } from "../useRefState/useRefState.mjs";
import { isTarget as D } from "../../utils/helpers/isTarget.mjs";
import { getElement as R } from "../../utils/helpers/getElement.mjs";
const T = (...r) => {
  const n = typeof navigator < "u" && "mediaDevices" in navigator && !!navigator.mediaDevices && "getDisplayMedia" in navigator.mediaDevices, i = D(r[0]) ? r[0] : void 0, c = r[1] ? r[1] : r[0], m = c?.immediately ?? !1, [f, d] = v(!1), s = l(null), t = l(null), a = y(), o = () => {
    !t.current || !n || !s.current || (d(!1), s.current.srcObject = null, t.current.getTracks().forEach((e) => e.stop()), t.current = null);
  }, u = async () => {
    if (!n || !s.current) return;
    const e = await navigator.mediaDevices.getDisplayMedia({
      video: c?.video,
      audio: c?.audio
    });
    return d(!0), t.current = e, s.current.srcObject = e, e.getTracks().forEach((g) => g.onended = o), e;
  };
  return p(() => {
    if (!n || !i && !a.state) return;
    const e = i ? R(i) : a.current;
    if (e && (s.current = e, !!m))
      return u(), () => {
        o();
      };
  }, [i, a.state]), i ? {
    stream: t.current,
    sharing: f,
    supported: n,
    start: u,
    stop: o
  } : {
    stream: t.current,
    sharing: f,
    supported: n,
    start: u,
    stop: o,
    ref: a
  };
};
export {
  T as useDisplayMedia
};
//# sourceMappingURL=useDisplayMedia.mjs.map
