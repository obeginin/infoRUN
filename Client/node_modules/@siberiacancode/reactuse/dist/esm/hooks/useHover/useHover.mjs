import { useState as E, useRef as l, useEffect as m } from "react";
import { useRefState as L } from "../useRefState/useRefState.mjs";
import { isTarget as d } from "../../utils/helpers/isTarget.mjs";
import { getElement as g } from "../../utils/helpers/getElement.mjs";
const j = (...e) => {
  const t = d(e[0]) ? e[0] : void 0, u = t ? typeof e[1] == "object" ? e[1] : { onEntry: e[1] } : typeof e[0] == "object" ? e[0] : { onEntry: e[0] }, [i, f] = E(!1), o = L(), r = l(u);
  return r.current = u, m(() => {
    if (!t && !o.state) return;
    const n = t ? g(t) : o.current;
    if (!n) return;
    const c = (s) => {
      r.current?.onEntry?.(s), f(!0);
    }, v = (s) => {
      r.current?.onLeave?.(s), f(!1);
    };
    return n.addEventListener("mouseenter", c), n.addEventListener("mouseleave", v), () => {
      n.removeEventListener("mouseenter", c), n.removeEventListener("mouseleave", v);
    };
  }, [t, o.state]), t ? i : {
    ref: o,
    value: i
  };
};
export {
  j as useHover
};
//# sourceMappingURL=useHover.mjs.map
