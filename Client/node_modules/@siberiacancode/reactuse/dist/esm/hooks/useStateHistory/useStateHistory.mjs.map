{"version":3,"file":"useStateHistory.mjs","sources":["../../../../src/hooks/useStateHistory/useStateHistory.ts"],"sourcesContent":["import { useReducer } from 'react';\n\n/** The use state history hook return type */\ninterface UseStateHistoryReturn<Value> {\n  /** True if a redo operation can be performed */\n  canRedo: boolean;\n  /** True if an undo operation can be performed */\n  canUndo: boolean;\n  /** All history values */\n  history: Value[];\n  /** Current index in history */\n  index: number;\n  /** Current value */\n  value: Value;\n  /** Go back specified number of steps in history (default: 1) */\n  back: (steps?: number) => void;\n  /** Go forward specified number of steps in history (default: 1) */\n  forward: (steps?: number) => void;\n  /** Redo the last change */\n  redo: () => void;\n  /** Reset history to initial state */\n  reset: () => void;\n  /** Set a new value */\n  set: (value: Value) => void;\n  /** Undo the last change */\n  undo: () => void;\n}\n\nexport type StateHistoryAction<Value> =\n  | { type: 'BACK'; payload: { steps: number } }\n  | { type: 'FORWARD'; payload: { steps: number } }\n  | { type: 'REDO' }\n  | { type: 'RESET'; payload: { initialValue: Value; capacity: number } }\n  | { type: 'SET'; payload: { value: Value; capacity: number } }\n  | { type: 'UNDO' };\n\nexport interface StateHistory<Value> {\n  currentIndex: number;\n  history: Value[];\n  redoStack: Value[][];\n  undoStack: Value[][];\n}\n\nexport const stateHistoryReducer = <Value>(\n  state: StateHistory<Value>,\n  action: StateHistoryAction<Value>\n): StateHistory<Value> => {\n  switch (action.type) {\n    case 'SET': {\n      const { value, capacity } = action.payload;\n\n      const newHistory = [...state.history.slice(0, state.currentIndex + 1), value];\n      if (newHistory.length > capacity) {\n        newHistory.shift();\n      }\n\n      const newUndoStack = [state.history, ...state.undoStack];\n      if (newUndoStack.length > capacity) {\n        newUndoStack.pop();\n      }\n\n      return {\n        history: newHistory,\n        currentIndex: newHistory.length - 1,\n        undoStack: newUndoStack,\n        redoStack: []\n      };\n    }\n\n    case 'UNDO': {\n      if (state.undoStack.length === 0) return state;\n\n      return {\n        history: state.undoStack[0],\n        currentIndex: state.undoStack[0].length - 1,\n        undoStack: state.undoStack.slice(1),\n        redoStack: [state.history, ...state.redoStack]\n      };\n    }\n\n    case 'REDO': {\n      if (state.redoStack.length === 0) return state;\n\n      return {\n        history: state.redoStack[0],\n        currentIndex: state.redoStack[0].length - 1,\n        undoStack: [state.history, ...state.undoStack],\n        redoStack: state.redoStack.slice(1)\n      };\n    }\n\n    case 'BACK': {\n      const { steps } = action.payload;\n      return {\n        ...state,\n        currentIndex: Math.max(0, state.currentIndex - steps)\n      };\n    }\n\n    case 'FORWARD': {\n      const { steps } = action.payload;\n      return {\n        ...state,\n        currentIndex: Math.min(state.currentIndex + steps, state.history.length - 1)\n      };\n    }\n\n    case 'RESET': {\n      const { initialValue, capacity } = action.payload;\n      if (state.history.length === 1) return state;\n\n      const newUndoStack = [state.history, ...state.undoStack];\n      if (newUndoStack.length > capacity) {\n        newUndoStack.pop();\n      }\n\n      return {\n        history: [initialValue],\n        currentIndex: 0,\n        undoStack: newUndoStack,\n        redoStack: []\n      };\n    }\n\n    default:\n      throw new Error('Unsupported action type');\n  }\n};\n\n/**\n * @name useStateHistory\n * @description - Hook that manages state with history functionality\n * @category State\n *\n * @param {Value} initialValue - The initial value to start the history with\n * @param {number} [capacity=10] - Maximum number of history entries and undo actions to keep\n * @returns {UseStateHistoryReturn<Value>} Object containing current value, history array and control methods\n *\n * @example\n * const { value, history, index, set, back, forward, reset, undo, redo, canUndo, canRedo } = useStateHistory(0);\n */\nexport const useStateHistory = <Value>(\n  initialValue: Value,\n  capacity = 10\n): UseStateHistoryReturn<Value> => {\n  const [state, dispatch] = useReducer(stateHistoryReducer<Value>, {\n    history: [initialValue],\n    currentIndex: 0,\n    undoStack: [],\n    redoStack: []\n  });\n\n  const value = state.history[state.currentIndex];\n  const canUndo = state.undoStack.length > 0;\n  const canRedo = state.redoStack.length > 0;\n\n  const set = (value: Value) =>\n    dispatch({\n      type: 'SET',\n      payload: { value, capacity }\n    });\n\n  const undo = () => dispatch({ type: 'UNDO' });\n\n  const redo = () => dispatch({ type: 'REDO' });\n\n  const back = (steps = 1) => dispatch({ type: 'BACK', payload: { steps } });\n\n  const forward = (steps = 1) => dispatch({ type: 'FORWARD', payload: { steps } });\n\n  const reset = () => dispatch({ type: 'RESET', payload: { initialValue, capacity } });\n\n  return {\n    history: state.history,\n    value,\n    set,\n    index: state.currentIndex,\n    back,\n    forward,\n    reset,\n    undo,\n    redo,\n    canUndo,\n    canRedo\n  };\n};\n"],"names":["stateHistoryReducer","state","action","value","capacity","newHistory","newUndoStack","steps","initialValue","useStateHistory","dispatch","useReducer","canUndo","canRedo","set","undo","redo","back","forward","reset"],"mappings":"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"}