{"version":3,"file":"useLockCallback.mjs","sources":["../../../../src/hooks/useLockCallback/useLockCallback.ts"],"sourcesContent":["import { useRef } from 'react';\n\n/**\n * @name useLockCallback\n * @description - Hook that prevents a callback from being executed multiple times simultaneously\n * @category Async\n *\n * @param {Function} callback The callback to be locked\n * @returns {Function} The locked callback\n *\n * @example\n * const lockedCallback = useLockCallback(() => promise());\n */\nexport const useLockCallback = <Callback extends (...args: any[]) => any>(callback: Callback) => {\n  const lockRef = useRef(false);\n  const internalCallbackRef = useRef(callback);\n  internalCallbackRef.current = callback;\n\n  return async (...args: Parameters<Callback>) => {\n    if (lockRef.current) return;\n    lockRef.current = true;\n\n    try {\n      return await internalCallbackRef.current(...args);\n    } finally {\n      lockRef.current = false;\n    }\n  };\n};\n"],"names":["useLockCallback","callback","lockRef","useRef","internalCallbackRef","args"],"mappings":";AAaO,MAAMA,IAAkB,CAA2CC,MAAuB;AAC/F,QAAMC,IAAUC,EAAO,EAAK,GACtBC,IAAsBD,EAAOF,CAAQ;AAC3C,SAAAG,EAAoB,UAAUH,GAEvB,UAAUI,MAA+B;AAC9C,QAAI,CAAAH,EAAQ,SACZ;AAAA,MAAAA,EAAQ,UAAU;AAElB,UAAI;AACF,eAAO,MAAME,EAAoB,QAAQ,GAAGC,CAAI;AAAA,MAAA,UAClD;AACE,QAAAH,EAAQ,UAAU;AAAA,MAAA;AAAA;AAAA,EACpB;AAEJ;"}