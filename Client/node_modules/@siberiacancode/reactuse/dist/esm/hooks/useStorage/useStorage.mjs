import { useState as V, useEffect as E } from "react";
const c = "reactuse-storage", f = (t) => window.dispatchEvent(new StorageEvent(c, t)), d = (t, n, o) => {
  const r = t.getItem(n);
  t.setItem(n, o), f({
    key: n,
    oldValue: r,
    newValue: o,
    storageArea: t
  });
}, m = (t, n) => {
  const o = t.getItem(n);
  t.removeItem(n), f({ key: n, oldValue: o, newValue: null, storageArea: t });
}, l = (t, n) => {
  const o = t.getItem(n);
  if (o)
    return o;
}, I = (t, n) => {
  const o = typeof n == "object" && n && ("serializer" in n || "deserializer" in n || "initialValue" in n || "storage" in n) ? n : void 0, r = o ? o?.initialValue : n;
  if (typeof window > "u")
    return {
      value: typeof r == "function" ? r() : r,
      set: () => {
      },
      remove: () => {
      }
    };
  const u = (e) => o?.serializer ? o.serializer(e) : typeof e == "string" ? e : JSON.stringify(e), i = o?.storage ?? window?.localStorage, g = (e) => d(i, t, u(e)), v = () => m(i, t), a = (e) => {
    if (o?.deserializer) return o.deserializer(e);
    if (e !== "undefined")
      try {
        return JSON.parse(e);
      } catch {
        return e;
      }
  }, [w, S] = V(() => {
    const e = l(i, t);
    if (e === void 0 && r !== void 0) {
      const s = typeof r == "function" ? r() : r;
      return d(i, t, u(s)), s;
    }
    return e ? a(e) : void 0;
  });
  return E(() => {
    const e = () => {
      const s = l(i, t);
      S(s ? a(s) : void 0);
    };
    return window.addEventListener(c, e), () => window.removeEventListener(c, e);
  }, [t]), {
    value: w,
    set: g,
    remove: v
  };
};
export {
  c as STORAGE_EVENT,
  f as dispatchStorageEvent,
  I as useStorage
};
//# sourceMappingURL=useStorage.mjs.map
