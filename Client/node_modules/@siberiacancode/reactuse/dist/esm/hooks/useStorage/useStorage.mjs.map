{"version":3,"file":"useStorage.mjs","sources":["../../../../src/hooks/useStorage/useStorage.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\n/* The use storage initial value type */\nexport type UseStorageInitialValue<Value> = (() => Value) | Value;\n\n/* The use storage options type */\nexport interface UseStorageOptions<Value> {\n  /* The initial value of the storage */\n  initialValue?: UseStorageInitialValue<Value>;\n  /* The storage to be used */\n  storage?: Storage;\n  /* The deserializer function to be invoked */\n  deserializer?: (value: string) => Value;\n  /* The serializer function to be invoked */\n  serializer?: (value: Value) => string;\n}\n\n/* The use storage return type */\nexport interface UseStorageReturn<Value> {\n  /* The value of the storage */\n  value: Value;\n  /* The error state of the storage */\n  remove: () => void;\n  /* The loading state of the storage */\n  set: (value: Value) => void;\n}\n\nexport interface UseStorage {\n  <Value>(key: string, options?: UseStorageOptions<Value>): UseStorageReturn<Value | undefined>;\n\n  <Value>(\n    key: string,\n    initialValue?: UseStorageInitialValue<Value>\n  ): UseStorageReturn<Value | undefined>;\n}\n\nexport const STORAGE_EVENT = 'reactuse-storage';\n\nexport const dispatchStorageEvent = (params: Partial<StorageEvent>) =>\n  window.dispatchEvent(new StorageEvent(STORAGE_EVENT, params));\n\nconst setStorageItem = (storage: Storage, key: string, value: string) => {\n  const oldValue = storage.getItem(key);\n\n  storage.setItem(key, value);\n  dispatchStorageEvent({\n    key,\n    oldValue,\n    newValue: value,\n    storageArea: storage\n  });\n};\n\nconst removeStorageItem = (storage: Storage, key: string) => {\n  const oldValue = storage.getItem(key);\n\n  storage.removeItem(key);\n  dispatchStorageEvent({ key, oldValue, newValue: null, storageArea: storage });\n};\n\nconst getStorageItem = (storage: Storage, key: string) => {\n  const value = storage.getItem(key);\n  if (!value) return undefined;\n  return value;\n};\n\n/**\n * @name useStorage\n * @description - Hook that manages storage value\n * @category State\n *\n * @overload\n * @param {string} key The key of the storage\n * @param {UseStorageInitialValue<Value>} [initialValue] The initial value of the storage\n * @returns {UseStorageReturn<Value>} The value and the set function\n *\n * @overload\n * @param {string} key The key of the storage\n * @param {(value: Value) => string} [params.serializer] The serializer function\n * @param {(value: string) => Value} [params.deserializer] The deserializer function\n * @param {Storage} [params.storage] The storage\n * @param {UseStorageInitialValue<Value>} [params.initialValue] The initial value of the storage\n * @returns {UseStorageReturn<Value>} The value and the set function\n *\n * @example\n * const { value, set, remove } = useStorage('key', 'value');\n */\nexport const useStorage = (<Value>(key: string, params?: any): UseStorageReturn<Value> => {\n  const options = (\n    typeof params === 'object' &&\n    params &&\n    ('serializer' in params ||\n      'deserializer' in params ||\n      'initialValue' in params ||\n      'storage' in params)\n      ? params\n      : undefined\n  ) as UseStorageOptions<Value>;\n\n  const initialValue = (options ? options?.initialValue : params) as UseStorageInitialValue<Value>;\n\n  if (typeof window === 'undefined') {\n    const value = typeof initialValue === 'function' ? (initialValue as () => any)() : initialValue;\n    return {\n      value,\n      set: () => {},\n      remove: () => {}\n    };\n  }\n\n  const serializer = (value: Value) => {\n    if (options?.serializer) return options.serializer(value);\n    if (typeof value === 'string') return value;\n    return JSON.stringify(value);\n  };\n\n  const storage = options?.storage ?? window?.localStorage;\n\n  const set = (value: Value) => setStorageItem(storage, key, serializer(value));\n  const remove = () => removeStorageItem(storage, key);\n\n  const deserializer = (value: string) => {\n    if (options?.deserializer) return options.deserializer(value);\n    if (value === 'undefined') return undefined as unknown as Value;\n\n    try {\n      return JSON.parse(value) as Value;\n    } catch {\n      return value as Value;\n    }\n  };\n\n  const [value, setValue] = useState<Value | undefined>(() => {\n    const storageValue = getStorageItem(storage, key);\n    if (storageValue === undefined && initialValue !== undefined) {\n      const value =\n        typeof initialValue === 'function' ? (initialValue as () => Value)() : initialValue;\n      setStorageItem(storage, key, serializer(value));\n      return value;\n    }\n    return storageValue ? deserializer(storageValue) : undefined;\n  });\n\n  useEffect(() => {\n    const onChange = () => {\n      const storageValue = getStorageItem(storage, key);\n      setValue(storageValue ? deserializer(storageValue) : undefined);\n    };\n    window.addEventListener(STORAGE_EVENT, onChange);\n    return () => window.removeEventListener(STORAGE_EVENT, onChange);\n  }, [key]);\n\n  return {\n    value: value as Value,\n    set,\n    remove\n  };\n}) as UseStorage;\n"],"names":["STORAGE_EVENT","dispatchStorageEvent","params","setStorageItem","storage","key","value","oldValue","removeStorageItem","getStorageItem","useStorage","options","initialValue","serializer","set","remove","deserializer","setValue","useState","storageValue","useEffect","onChange"],"mappings":";AAoCO,MAAMA,IAAgB,oBAEhBC,IAAuB,CAACC,MACnC,OAAO,cAAc,IAAI,aAAaF,GAAeE,CAAM,CAAC,GAExDC,IAAiB,CAACC,GAAkBC,GAAaC,MAAkB;AACvE,QAAMC,IAAWH,EAAQ,QAAQC,CAAG;AAEpC,EAAAD,EAAQ,QAAQC,GAAKC,CAAK,GAC1BL,EAAqB;AAAA,IACnB,KAAAI;AAAA,IACA,UAAAE;AAAA,IACA,UAAUD;AAAA,IACV,aAAaF;AAAA,EAAA,CACd;AACH,GAEMI,IAAoB,CAACJ,GAAkBC,MAAgB;AAC3D,QAAME,IAAWH,EAAQ,QAAQC,CAAG;AAEpC,EAAAD,EAAQ,WAAWC,CAAG,GACtBJ,EAAqB,EAAE,KAAAI,GAAK,UAAAE,GAAU,UAAU,MAAM,aAAaH,GAAS;AAC9E,GAEMK,IAAiB,CAACL,GAAkBC,MAAgB;AACxD,QAAMC,IAAQF,EAAQ,QAAQC,CAAG;AACjC,MAAKC;AACL,WAAOA;AACT,GAuBaI,IAAc,CAAQL,GAAaH,MAA0C;AACxF,QAAMS,IACJ,OAAOT,KAAW,YAClBA,MACC,gBAAgBA,KACf,kBAAkBA,KAClB,kBAAkBA,KAClB,aAAaA,KACXA,IACA,QAGAU,IAAgBD,IAAUA,GAAS,eAAeT;AAExD,MAAI,OAAO,SAAW;AAEpB,WAAO;AAAA,MACL,OAFY,OAAOU,KAAiB,aAAcA,MAA+BA;AAAA,MAGjF,KAAK,MAAM;AAAA,MAAA;AAAA,MACX,QAAQ,MAAM;AAAA,MAAA;AAAA,IAAC;AAInB,QAAMC,IAAa,CAACP,MACdK,GAAS,aAAmBA,EAAQ,WAAWL,CAAK,IACpD,OAAOA,KAAU,WAAiBA,IAC/B,KAAK,UAAUA,CAAK,GAGvBF,IAAUO,GAAS,WAAW,QAAQ,cAEtCG,IAAM,CAACR,MAAiBH,EAAeC,GAASC,GAAKQ,EAAWP,CAAK,CAAC,GACtES,IAAS,MAAMP,EAAkBJ,GAASC,CAAG,GAE7CW,IAAe,CAACV,MAAkB;AACtC,QAAIK,GAAS,aAAc,QAAOA,EAAQ,aAAaL,CAAK;AAC5D,QAAIA,MAAU;AAEd,UAAI;AACF,eAAO,KAAK,MAAMA,CAAK;AAAA,MAAA,QACjB;AACN,eAAOA;AAAAA,MAAA;AAAA,EACT,GAGI,CAACA,GAAOW,CAAQ,IAAIC,EAA4B,MAAM;AAC1D,UAAMC,IAAeV,EAAeL,GAASC,CAAG;AAChD,QAAIc,MAAiB,UAAaP,MAAiB,QAAW;AAC5D,YAAMN,IACJ,OAAOM,KAAiB,aAAcA,MAAiCA;AACzE,aAAAT,EAAeC,GAASC,GAAKQ,EAAWP,CAAK,CAAC,GACvCA;AAAAA,IAAA;AAET,WAAOa,IAAeH,EAAaG,CAAY,IAAI;AAAA,EAAA,CACpD;AAED,SAAAC,EAAU,MAAM;AACd,UAAMC,IAAW,MAAM;AACrB,YAAMF,IAAeV,EAAeL,GAASC,CAAG;AAChD,MAAAY,EAASE,IAAeH,EAAaG,CAAY,IAAI,MAAS;AAAA,IAAA;AAEhE,kBAAO,iBAAiBnB,GAAeqB,CAAQ,GACxC,MAAM,OAAO,oBAAoBrB,GAAeqB,CAAQ;AAAA,EAAA,GAC9D,CAAChB,CAAG,CAAC,GAED;AAAA,IACL,OAAAC;AAAA,IACA,KAAAQ;AAAA,IACA,QAAAC;AAAA,EAAA;AAEJ;"}