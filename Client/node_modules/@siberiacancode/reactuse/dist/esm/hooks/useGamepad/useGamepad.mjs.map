{"version":3,"file":"useGamepad.mjs","sources":["../../../../src/hooks/useGamepad/useGamepad.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { useRaf } from '../useRaf/useRaf';\n\ndeclare global {\n  interface Gamepad {\n    hapticActuators?: GamepadHapticActuator[];\n  }\n}\n\n/** The use gamepad return type  */\nexport interface UseGamepadStateReturn {\n  /** The gamepad active status */\n  active: boolean;\n  /** The gamepad state */\n  gamepads: Gamepad[];\n  /** The gamepad supported status */\n  supported: boolean;\n}\n\n/**\n * @name useGamepad\n * @description - Hook for getting information about gamepad\n * @category Browser\n *\n * @browserapi navigator.getGamepads https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getGamepads\n *\n * @returns {UseGamepadStateReturn} An object containing the gamepad information\n *\n * @example\n * const { supported, gamepads, active } = useGamepad();\n */\nexport const useGamepad = () => {\n  const supported = typeof navigator !== 'undefined' && 'getGamepads' in navigator;\n  const [gamepads, setGamepads] = useState<Record<number, Gamepad>>({});\n\n  const createGamepad = (gamepad: Gamepad) => {\n    const hapticActuators = [];\n    const vibrationActuator = 'vibrationActuator' in gamepad ? gamepad.vibrationActuator : null;\n\n    if (vibrationActuator) hapticActuators.push(vibrationActuator);\n    if (gamepad.hapticActuators) hapticActuators.push(...gamepad.hapticActuators);\n\n    return {\n      ...gamepad,\n      hapticActuators\n    } as Gamepad;\n  };\n\n  const updateGamepadState = () => {\n    for (const gamepad of navigator.getGamepads() ?? []) {\n      if (gamepad && gamepads[gamepad.index]) gamepads[gamepad.index] = createGamepad(gamepad);\n    }\n  };\n\n  const { active } = useRaf(updateGamepadState, {\n    enabled: !!Object.keys(gamepads).length\n  });\n\n  useEffect(() => {\n    if (!supported) return;\n    const gamepads = navigator.getGamepads();\n    setGamepads(\n      gamepads.reduce(\n        (acc, gamepad) => ({\n          ...acc,\n          ...(gamepad && { [gamepad.index]: createGamepad(gamepad) })\n        }),\n        {}\n      )\n    );\n  }, []);\n\n  useEffect(() => {\n    const onConnected = (event: Event) => {\n      const { gamepad } = event as GamepadEvent;\n      setGamepads({ ...gamepads, [gamepad.index]: createGamepad(gamepad) });\n    };\n\n    const onDisconnected = (event: Event) => {\n      const { gamepad } = event as GamepadEvent;\n      const updatedGamepads = { ...gamepads };\n      delete updatedGamepads[gamepad.index];\n      setGamepads(updatedGamepads);\n    };\n\n    document.addEventListener('gamepadconnected', onConnected);\n    document.addEventListener('gamepaddisconnected', onDisconnected);\n\n    return () => {\n      document.removeEventListener('gamepadconnected', onConnected);\n      document.removeEventListener('gamepaddisconnected', onDisconnected);\n    };\n  }, []);\n\n  return {\n    active,\n    supported,\n    gamepads: Object.values(gamepads)\n  };\n};\n\nexport const mapGamepadToXbox360Controller = (gamepad: Gamepad) => ({\n  buttons: {\n    a: gamepad.buttons[0],\n    b: gamepad.buttons[1],\n    x: gamepad.buttons[2],\n    y: gamepad.buttons[3]\n  },\n  bumper: {\n    left: gamepad.buttons[4],\n    right: gamepad.buttons[5]\n  },\n  triggers: {\n    left: gamepad.buttons[6],\n    right: gamepad.buttons[7]\n  },\n  stick: {\n    left: {\n      horizontal: gamepad.axes[0],\n      vertical: gamepad.axes[1],\n      button: gamepad.buttons[10]\n    },\n    right: {\n      horizontal: gamepad.axes[2],\n      vertical: gamepad.axes[3],\n      button: gamepad.buttons[11]\n    }\n  },\n  dpad: {\n    up: gamepad.buttons[12],\n    down: gamepad.buttons[13],\n    left: gamepad.buttons[14],\n    right: gamepad.buttons[15]\n  },\n  back: gamepad.buttons[8],\n  start: gamepad.buttons[9]\n});\n"],"names":["useGamepad","supported","gamepads","setGamepads","useState","createGamepad","gamepad","hapticActuators","vibrationActuator","updateGamepadState","active","useRaf","useEffect","acc","onConnected","event","onDisconnected","updatedGamepads","mapGamepadToXbox360Controller"],"mappings":"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"}