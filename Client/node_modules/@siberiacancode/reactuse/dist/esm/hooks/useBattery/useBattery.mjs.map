{"version":3,"file":"useBattery.mjs","sources":["../../../../src/hooks/useBattery/useBattery.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport interface BatteryManager extends EventTarget {\n  charging: boolean;\n  chargingTime: number;\n  dischargingTime: number;\n  level: number;\n}\n\ndeclare global {\n  interface Navigator {\n    readonly getBattery: () => Promise<BatteryManager>;\n  }\n}\n\n/** The use battery value type */\nexport interface UseBatteryValue {\n  /** Is charging battery? */\n  charging: boolean;\n  /** Time until the battery is fully charged */\n  chargingTime: number;\n  /** Time until the battery is completely discharged */\n  dischargingTime: number;\n  /** Battery charge level from 0 to 1 */\n  level: number;\n  /** Is battery information loading? */\n  loading: boolean;\n}\n\n/** The use battery return type */\nexport interface UseBatteryStateReturn {\n  /** Whether the battery api is supported*/\n  supported: boolean;\n  /** The use battery value type  */\n  value: UseBatteryValue;\n}\n\n/**\n * @name useBattery\n * @description - Hook for getting information about battery status\n * @category Browser\n *\n * @browserapi navigator.getBattery https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getBattery\n *\n * @returns {UseBatteryStateReturn} Object containing battery information & Battery API support\n *\n * @example\n * const { supported, loading, charging, chargingTime, dischargingTime, level } = useBattery();\n */\nexport const useBattery = (): UseBatteryStateReturn => {\n  const supported =\n    typeof navigator !== 'undefined' &&\n    'getBattery' in navigator &&\n    typeof navigator.getBattery === 'function';\n  const [value, setValue] = useState<UseBatteryValue>({\n    loading: supported,\n    level: 0,\n    charging: false,\n    chargingTime: 0,\n    dischargingTime: 0\n  });\n\n  useEffect(() => {\n    if (!supported) return;\n\n    let battery: BatteryManager | null;\n\n    const onChange = () =>\n      setValue({\n        loading: false,\n        level: battery?.level ?? 0,\n        charging: battery?.charging ?? false,\n        dischargingTime: battery?.dischargingTime ?? 0,\n        chargingTime: battery?.chargingTime ?? 0\n      });\n\n    navigator.getBattery().then((batteryManager) => {\n      battery = batteryManager;\n      onChange();\n\n      battery.addEventListener('levelchange', onChange);\n      battery.addEventListener('chargingchange', onChange);\n      battery.addEventListener('chargingtimechange', onChange);\n      battery.addEventListener('dischargingtimechange', onChange);\n    });\n\n    return () => {\n      if (!battery) return;\n      console.log('unmount', battery);\n      battery.removeEventListener('levelchange', onChange);\n      battery.removeEventListener('chargingchange', onChange);\n      battery.removeEventListener('chargingtimechange', onChange);\n      battery.removeEventListener('dischargingtimechange', onChange);\n    };\n  }, []);\n\n  return { supported, value };\n};\n"],"names":["useBattery","supported","value","setValue","useState","useEffect","battery","onChange","batteryManager"],"mappings":";AAiDO,MAAMA,IAAa,MAA6B;AACrD,QAAMC,IACJ,OAAO,YAAc,OACrB,gBAAgB,aAChB,OAAO,UAAU,cAAe,YAC5B,CAACC,GAAOC,CAAQ,IAAIC,EAA0B;AAAA,IAClD,SAASH;AAAA,IACT,OAAO;AAAA,IACP,UAAU;AAAA,IACV,cAAc;AAAA,IACd,iBAAiB;AAAA,EAAA,CAClB;AAED,SAAAI,EAAU,MAAM;AACd,QAAI,CAACJ,EAAW;AAEhB,QAAIK;AAEJ,UAAMC,IAAW,MACfJ,EAAS;AAAA,MACP,SAAS;AAAA,MACT,OAAOG,GAAS,SAAS;AAAA,MACzB,UAAUA,GAAS,YAAY;AAAA,MAC/B,iBAAiBA,GAAS,mBAAmB;AAAA,MAC7C,cAAcA,GAAS,gBAAgB;AAAA,IAAA,CACxC;AAEH,qBAAU,WAAA,EAAa,KAAK,CAACE,MAAmB;AAC9C,MAAAF,IAAUE,GACVD,EAAA,GAEAD,EAAQ,iBAAiB,eAAeC,CAAQ,GAChDD,EAAQ,iBAAiB,kBAAkBC,CAAQ,GACnDD,EAAQ,iBAAiB,sBAAsBC,CAAQ,GACvDD,EAAQ,iBAAiB,yBAAyBC,CAAQ;AAAA,IAAA,CAC3D,GAEM,MAAM;AACX,MAAKD,MACL,QAAQ,IAAI,WAAWA,CAAO,GAC9BA,EAAQ,oBAAoB,eAAeC,CAAQ,GACnDD,EAAQ,oBAAoB,kBAAkBC,CAAQ,GACtDD,EAAQ,oBAAoB,sBAAsBC,CAAQ,GAC1DD,EAAQ,oBAAoB,yBAAyBC,CAAQ;AAAA,IAAA;AAAA,EAC/D,GACC,EAAE,GAEE,EAAE,WAAAN,GAAW,OAAAC,EAAA;AACtB;"}