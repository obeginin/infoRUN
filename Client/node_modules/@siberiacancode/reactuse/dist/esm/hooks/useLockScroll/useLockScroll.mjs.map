{"version":3,"file":"useLockScroll.mjs","sources":["../../../../src/hooks/useLockScroll/useLockScroll.ts"],"sourcesContent":["import { useRef, useState } from 'react';\n\nimport type { HookTarget } from '@/utils/helpers';\n\nimport { getElement, isTarget } from '@/utils/helpers';\n\nimport type { StateRef } from '../useRefState/useRefState';\n\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect/useIsomorphicLayoutEffect';\nimport { useRefState } from '../useRefState/useRefState';\n\n/** The use lock scroll options type */\nexport interface UseLockScrollOptions {\n  /** Enable or disable scroll locking. Default: true */\n  enabled?: boolean;\n}\n\n/** The use lock scroll return type */\nexport interface UseLockScrollReturn<Target extends Element> {\n  /** The ref to attach to the element */\n  ref: StateRef<Target>;\n  /** The value of the lock state */\n  value: boolean;\n  /** Lock the scroll */\n  lock: () => void;\n  /** Toggle the scroll lock */\n  toggle: () => void;\n  /** Unlock the scroll */\n  unlock: () => void;\n}\n\nexport interface UseLockScroll {\n  (target: HookTarget, options?: UseLockScrollOptions): UseLockScrollReturn<Element>;\n\n  <Target extends Element>(\n    options?: UseLockScrollOptions,\n    target?: never\n  ): UseLockScrollReturn<Target> & { ref: StateRef<Target> };\n}\n\n/**\n * @name useLockScroll\n * @description - Hook that locks scroll on an element or document body\n * @category Elements\n *\n *\n * @overload\n * @param {HookTarget} [target=document.body] The target element to lock scroll on\n * @param {UseLockScrollOptions} [options] The options for scroll locking\n * @returns {void}\n *\n * @example\n * const { lock, unlock, value, toggle } = useLockScroll(ref);\n *\n * @overload\n * @template Target The target element\n * @param {UseLockScrollOptions} [options] The options for scroll locking\n * @returns {StateRef<Target>} Ref to attach to element, or locks body scroll by default\n *\n * @example\n * const { ref, lock, unlock, value, toggle } = useLockScroll();\n */\nexport const useLockScroll = ((...params: any[]): any => {\n  const target = (isTarget(params[0]) ? params[0] : undefined) as HookTarget | undefined;\n  const options = (target ? params[1] : params[0]) as UseLockScrollOptions | undefined;\n\n  const enabled = options?.enabled ?? true;\n  const [locked, setLocked] = useState(enabled);\n\n  const internalRef = useRefState<Element>();\n\n  const elementRef = useRef<Element>(null);\n\n  useIsomorphicLayoutEffect(() => {\n    const element =\n      ((target ? getElement(target) : internalRef.current) as Element) ?? document.body;\n\n    if (!(element instanceof HTMLElement)) return;\n\n    elementRef.current = element;\n\n    if (!enabled) return;\n\n    const originalStyle = window.getComputedStyle(element).overflow;\n    (elementRef.current as any).__originalOverflow = originalStyle;\n    element.style.overflow = 'hidden';\n\n    return () => {\n      element.style.overflow = originalStyle;\n      elementRef.current = null;\n    };\n  }, [target, internalRef.state, enabled]);\n\n  const lock = () => {\n    if (!elementRef.current) return;\n    const element = elementRef.current as HTMLElement;\n    (elementRef.current as any).__originalOverflow = window.getComputedStyle(element).overflow;\n    element.style.overflow = 'hidden';\n    setLocked(true);\n  };\n\n  const unlock = () => {\n    console.log('unlock', (elementRef.current as any).__originalOverflow);\n    if (!elementRef.current) return;\n    const element = elementRef.current as HTMLElement;\n    element.style.overflow = (elementRef.current as any).__originalOverflow;\n    setLocked(false);\n  };\n\n  const toggle = () => {\n    console.log('toggle', locked, locked ? 'unlock' : 'lock');\n    if (locked) return unlock();\n    lock();\n  };\n\n  if (target)\n    return {\n      value: locked,\n      lock,\n      unlock,\n      toggle\n    };\n  return {\n    ref: internalRef,\n    value: locked,\n    lock,\n    unlock,\n    toggle\n  };\n}) as UseLockScroll;\n"],"names":["useLockScroll","params","target","isTarget","enabled","locked","setLocked","useState","internalRef","useRefState","elementRef","useRef","useIsomorphicLayoutEffect","element","getElement","originalStyle","lock","unlock","toggle"],"mappings":";;;;;AA8DO,MAAMA,IAAiB,IAAIC,MAAuB;AACvD,QAAMC,IAAUC,EAASF,EAAO,CAAC,CAAC,IAAIA,EAAO,CAAC,IAAI,QAG5CG,KAFWF,IAASD,EAAO,CAAC,IAAIA,EAAO,CAAC,IAErB,WAAW,IAC9B,CAACI,GAAQC,CAAS,IAAIC,EAASH,CAAO,GAEtCI,IAAcC,EAAA,GAEdC,IAAaC,EAAgB,IAAI;AAEvC,EAAAC,EAA0B,MAAM;AAC9B,UAAMC,KACFX,IAASY,EAAWZ,CAAM,IAAIM,EAAY,YAAwB,SAAS;AAM/E,QAJI,EAAEK,aAAmB,iBAEzBH,EAAW,UAAUG,GAEjB,CAACT,GAAS;AAEd,UAAMW,IAAgB,OAAO,iBAAiBF,CAAO,EAAE;AACtD,WAAAH,EAAW,QAAgB,qBAAqBK,GACjDF,EAAQ,MAAM,WAAW,UAElB,MAAM;AACX,MAAAA,EAAQ,MAAM,WAAWE,GACzBL,EAAW,UAAU;AAAA,IAAA;AAAA,EACvB,GACC,CAACR,GAAQM,EAAY,OAAOJ,CAAO,CAAC;AAEvC,QAAMY,IAAO,MAAM;AACjB,QAAI,CAACN,EAAW,QAAS;AACzB,UAAMG,IAAUH,EAAW;AAC1B,IAAAA,EAAW,QAAgB,qBAAqB,OAAO,iBAAiBG,CAAO,EAAE,UAClFA,EAAQ,MAAM,WAAW,UACzBP,EAAU,EAAI;AAAA,EAAA,GAGVW,IAAS,MAAM;AAEnB,QADA,QAAQ,IAAI,UAAWP,EAAW,QAAgB,kBAAkB,GAChE,CAACA,EAAW,QAAS;AACzB,UAAMG,IAAUH,EAAW;AAC3B,IAAAG,EAAQ,MAAM,WAAYH,EAAW,QAAgB,oBACrDJ,EAAU,EAAK;AAAA,EAAA,GAGXY,IAAS,MAAM;AAEnB,QADA,QAAQ,IAAI,UAAUb,GAAQA,IAAS,WAAW,MAAM,GACpDA,UAAeY,EAAA;AACnB,IAAAD,EAAA;AAAA,EAAK;AAGP,SAAId,IACK;AAAA,IACL,OAAOG;AAAA,IACP,MAAAW;AAAA,IACA,QAAAC;AAAA,IACA,QAAAC;AAAA,EAAA,IAEG;AAAA,IACL,KAAKV;AAAA,IACL,OAAOH;AAAA,IACP,MAAAW;AAAA,IACA,QAAAC;AAAA,IACA,QAAAC;AAAA,EAAA;AAEJ;"}