import { useState as g, useRef as d } from "react";
import { useIsomorphicLayoutEffect as w } from "../useIsomorphicLayoutEffect/useIsomorphicLayoutEffect.mjs";
import { useRefState as v } from "../useRefState/useRefState.mjs";
import { isTarget as a } from "../../utils/helpers/isTarget.mjs";
import { getElement as y } from "../../utils/helpers/getElement.mjs";
const R = (...n) => {
  const t = a(n[0]) ? n[0] : void 0, l = (t ? n[1] : n[0])?.enabled ?? !0, [r, f] = g(l), c = v(), e = d(null);
  w(() => {
    const o = (t ? y(t) : c.current) ?? document.body;
    if (!(o instanceof HTMLElement) || (e.current = o, !l)) return;
    const m = window.getComputedStyle(o).overflow;
    return e.current.__originalOverflow = m, o.style.overflow = "hidden", () => {
      o.style.overflow = m, e.current = null;
    };
  }, [t, c.state, l]);
  const u = () => {
    if (!e.current) return;
    const o = e.current;
    e.current.__originalOverflow = window.getComputedStyle(o).overflow, o.style.overflow = "hidden", f(!0);
  }, i = () => {
    if (console.log("unlock", e.current.__originalOverflow), !e.current) return;
    const o = e.current;
    o.style.overflow = e.current.__originalOverflow, f(!1);
  }, s = () => {
    if (console.log("toggle", r, r ? "unlock" : "lock"), r) return i();
    u();
  };
  return t ? {
    value: r,
    lock: u,
    unlock: i,
    toggle: s
  } : {
    ref: c,
    value: r,
    lock: u,
    unlock: i,
    toggle: s
  };
};
export {
  R as useLockScroll
};
//# sourceMappingURL=useLockScroll.mjs.map
