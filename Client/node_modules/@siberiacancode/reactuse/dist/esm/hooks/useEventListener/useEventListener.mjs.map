{"version":3,"file":"useEventListener.mjs","sources":["../../../../src/hooks/useEventListener/useEventListener.ts"],"sourcesContent":["import { useEffect } from 'react';\n\nimport type { HookTarget } from '@/utils/helpers';\n\nimport { getElement, isTarget } from '@/utils/helpers';\n\nimport type { StateRef } from '../useRefState/useRefState';\n\nimport { useEvent } from '../useEvent/useEvent';\nimport { useRefState } from '../useRefState/useRefState';\n\n/** The use event listener options */\nexport type UseEventListenerOptions = boolean | AddEventListenerOptions;\n\n/** The use event listener return type */\nexport type UseEventListenerReturn<Target extends Element> = StateRef<Target>;\n\nexport interface UseEventListener {\n  <Event extends keyof WindowEventMap = keyof WindowEventMap>(\n    target: HookTarget,\n    event: Event,\n    listener: (this: Window, event: WindowEventMap[Event]) => void,\n    options?: UseEventListenerOptions\n  ): void;\n\n  <Event extends keyof DocumentEventMap = keyof DocumentEventMap>(\n    target: HookTarget,\n    event: Event,\n    listener: (this: Document, event: DocumentEventMap[Event]) => void,\n    options?: UseEventListenerOptions\n  ): void;\n\n  <Event extends keyof HTMLElementEventMap = keyof HTMLElementEventMap>(\n    target: HookTarget,\n    event: Event,\n    listener: (this: Element, event: HTMLElementEventMap[Event]) => void,\n    options?: UseEventListenerOptions\n  ): void;\n\n  <Target extends Element, Event extends keyof HTMLElementEventMap = keyof HTMLElementEventMap>(\n    event: Event,\n    listener: (this: Target, event: HTMLElementEventMap[Event]) => void,\n    options?: UseEventListenerOptions,\n    target?: never\n  ): UseEventListenerReturn<Target>;\n\n  <\n    Target extends Element,\n    Event extends keyof MediaQueryListEventMap = keyof MediaQueryListEventMap\n  >(\n    event: Event,\n    listener: (this: Target, event: MediaQueryListEventMap[Event]) => void,\n    options?: UseEventListenerOptions,\n    target?: never\n  ): UseEventListenerReturn<Target>;\n}\n\n/**\n * @name useEventListener\n * @description - Hook that attaches an event listener to the specified target\n * @category Browser\n *\n * @overload\n * @template Event Key of window event map\n * @param {Window} target The window object to attach the event listener to\n * @param {Event | Event[]} event An array of event types to listen for\n * @param {(this: Window, event: WindowEventMap[Event]) => void} handler The event handler function\n * @param {UseEventListenerOptions} [options] Options for the event listener\n * @returns {void}\n *\n * @example\n * useEventListener(window, 'click', () => console.log('click'));\n *\n * @overload\n * @template Event Key of window event map\n * @param {Document} target The window object to attach the event listener to\n * @param {Event | Event[]} event An array of event types to listen for\n * @param {(this: Document, event: DocumentEventMap[Event]) => void} handler The event handler function\n * @param {UseEventListenerOptions} [options] Options for the event listener\n * @returns {void}\n *\n * @example\n * useEventListener(document, 'click', () => console.log('click'));\n *\n * @overload\n * @template Event Key of window event map\n * @template Target The target element\n * @param {HookTarget} target The target element to attach the event listener to\n * @param {Event | Event[]} event An array of event types to listen for\n * @param {(this: Target, event: HTMLElementEventMap[Event]) => void} handler The event handler function\n * @param {UseEventListenerOptions} [options] Options for the event listener\n * @returns {void}\n *\n * @example\n * useEventListener(ref, 'click', () => console.log('click'));\n *\n * @overload\n * @template Event Key of window event map\n * @template Target The target element\n * @param {Event | Event[]} event An array of event types to listen for\n * @param {(this: Target, event: HTMLElementEventMap[Event] | MediaQueryListEventMap[Event]) => void} handler The event handler function\n * @param {UseEventListenerOptions} [options] Options for the event listener\n * @returns {UseEventListenerReturn<Target>} A reference to the target element\n *\n * @example\n * const ref = useEventListener('click', () => console.log('click'));\n */\nexport const useEventListener = ((...params: any[]) => {\n  const target = (isTarget(params[0]) ? params[0] : undefined) as HookTarget | undefined;\n  const event = (target ? params[1] : params[0]) as string;\n  const listener = (target ? params[2] : params[1]) as (...arg: any[]) => undefined | void;\n  const options = (target ? params[3] : params[2]) as UseEventListenerOptions | undefined;\n\n  const internalRef = useRefState(window);\n  const internalListener = useEvent(listener);\n\n  useEffect(() => {\n    const element = target ? getElement(target) : internalRef.current;\n    if (!element) return;\n\n    const callback = (event: Event) => internalListener(event);\n\n    element.addEventListener(event, callback, options);\n    return () => {\n      element.removeEventListener(event, callback, options);\n    };\n  }, [target, internalRef.state, event, options]);\n\n  if (target) return;\n  return internalRef;\n}) as UseEventListener;\n"],"names":["useEventListener","params","target","isTarget","event","listener","options","internalRef","useRefState","internalListener","useEvent","useEffect","element","getElement","callback"],"mappings":";;;;;AA2GO,MAAMA,IAAoB,IAAIC,MAAkB;AACrD,QAAMC,IAAUC,EAASF,EAAO,CAAC,CAAC,IAAIA,EAAO,CAAC,IAAI,QAC5CG,IAASF,IAASD,EAAO,CAAC,IAAIA,EAAO,CAAC,GACtCI,IAAYH,IAASD,EAAO,CAAC,IAAIA,EAAO,CAAC,GACzCK,IAAWJ,IAASD,EAAO,CAAC,IAAIA,EAAO,CAAC,GAExCM,IAAcC,EAAY,MAAM,GAChCC,IAAmBC,EAASL,CAAQ;AAc1C,MAZAM,EAAU,MAAM;AACd,UAAMC,IAAUV,IAASW,EAAWX,CAAM,IAAIK,EAAY;AAC1D,QAAI,CAACK,EAAS;AAEd,UAAME,IAAW,CAACV,MAAiBK,EAAiBL,CAAK;AAEzD,WAAAQ,EAAQ,iBAAiBR,GAAOU,GAAUR,CAAO,GAC1C,MAAM;AACX,MAAAM,EAAQ,oBAAoBR,GAAOU,GAAUR,CAAO;AAAA,IAAA;AAAA,EACtD,GACC,CAACJ,GAAQK,EAAY,OAAOH,GAAOE,CAAO,CAAC,GAE1C,CAAAJ;AACJ,WAAOK;AACT;"}