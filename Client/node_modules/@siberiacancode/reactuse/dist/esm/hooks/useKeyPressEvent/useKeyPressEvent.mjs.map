{"version":3,"file":"useKeyPressEvent.mjs","sources":["../../../../src/hooks/useKeyPressEvent/useKeyPressEvent.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport type { HookTarget } from '@/utils/helpers';\n\nimport { getElement, isTarget } from '@/utils/helpers';\n\nimport type { StateRef } from '../useRefState/useRefState';\n\nimport { useRefState } from '../useRefState/useRefState';\n\n/** The key or keys to listen for */\nexport type UseKeyPressEventKey = string | string[];\n\n/** The use key press event options type */\nexport interface UseKeyPressEventOptions {\n  /** Whether the event should be captured */\n  capture?: boolean;\n  /** Whether the event listener should only be triggered once */\n  once?: boolean;\n  /** Whether the event listener should be passive */\n  passive?: boolean;\n}\n\nexport interface UseKeyPressEvent {\n  (\n    target: HookTarget | Window,\n    key: UseKeyPressEventKey,\n    listener: (event: KeyboardEvent) => void,\n    options?: UseKeyPressEventOptions\n  ): void;\n\n  <Target extends Element>(\n    key: UseKeyPressEventKey,\n    listener: (event: KeyboardEvent) => void,\n    options?: UseKeyPressEventOptions,\n    target?: never\n  ): { ref: StateRef<Target> };\n}\n\n/**\n * @name useKeyPressEvent\n * @description - Hook that listens for key press events on specified targets\n * @category Sensors\n *\n * @overload\n * @param {UseKeyPressEventKey} key The key or array of keys to listen for.\n * @param {HookTarget | Window} target The target to attach the event listener to.\n * @param {(event: KeyboardEvent) => void} listener The callback function to be executed when the specified key or keys are pressed.\n * @param {UseKeyPressEventOptions} [options] The options for the event listener.\n * @returns {void}\n *\n * @example\n * useKeyPressEvent(ref, 'Enter', () => console.log('pressed'));\n *\n * @overload\n * @template Target extends Element\n * @param {UseKeyPressEventKey} key The key or array of keys to listen for.\n * @param {(event: KeyboardEvent) => void} listener The callback function to be executed when the specified key or keys are pressed.\n * @param {UseKeyPressEventOptions} [options] The options for the event listener.\n * @returns {{ ref: StateRef<Target> }} An object containing the ref\n *\n * @example\n * const ref = useKeyPressEvent('Enter', (event) => console.log('pressed'));\n */\nexport const useKeyPressEvent = ((...params: any[]) => {\n  const target = isTarget(params[0]) ? params[0] : undefined;\n  const key = (target ? params[1] : params[0]) as UseKeyPressEventKey;\n  const listener = (target ? params[2] : params[1]) as (event: KeyboardEvent) => void;\n  const options = (target ? params[3] : params[2]) as UseKeyPressEventOptions | undefined;\n\n  const internalRef = useRefState(window);\n\n  const keyRef = useRef(key);\n  keyRef.current = key;\n  const listenerRef = useRef(listener);\n  listenerRef.current = listener;\n\n  useEffect(() => {\n    const element = (target ? getElement(target) : internalRef.current) as Element;\n    if (!element) return;\n\n    const onKeyDown = (event: Event) => {\n      const keyboardEvent = event as KeyboardEvent;\n      const keys = Array.isArray(keyRef.current) ? keyRef.current : [keyRef.current];\n      if (keys.includes(keyboardEvent.key)) {\n        listenerRef.current(keyboardEvent);\n      }\n    };\n\n    element.addEventListener('keydown', onKeyDown, {\n      capture: options?.capture,\n      passive: options?.passive,\n      once: options?.once\n    });\n\n    return () => {\n      element.removeEventListener('keydown', onKeyDown, {\n        capture: options?.capture\n      });\n    };\n  }, [target, internalRef.state, options?.capture, options?.passive, options?.once]);\n\n  if (target) return;\n  return internalRef;\n}) as UseKeyPressEvent;\n"],"names":["useKeyPressEvent","params","target","isTarget","key","listener","options","internalRef","useRefState","keyRef","useRef","listenerRef","useEffect","element","getElement","onKeyDown","event","keyboardEvent"],"mappings":";;;;AAgEO,MAAMA,IAAoB,IAAIC,MAAkB;AACrD,QAAMC,IAASC,EAASF,EAAO,CAAC,CAAC,IAAIA,EAAO,CAAC,IAAI,QAC3CG,IAAOF,IAASD,EAAO,CAAC,IAAIA,EAAO,CAAC,GACpCI,IAAYH,IAASD,EAAO,CAAC,IAAIA,EAAO,CAAC,GACzCK,IAAWJ,IAASD,EAAO,CAAC,IAAIA,EAAO,CAAC,GAExCM,IAAcC,EAAY,MAAM,GAEhCC,IAASC,EAAON,CAAG;AACzB,EAAAK,EAAO,UAAUL;AACjB,QAAMO,IAAcD,EAAOL,CAAQ;AA4BnC,MA3BAM,EAAY,UAAUN,GAEtBO,EAAU,MAAM;AACd,UAAMC,IAAWX,IAASY,EAAWZ,CAAM,IAAIK,EAAY;AAC3D,QAAI,CAACM,EAAS;AAEd,UAAME,IAAY,CAACC,MAAiB;AAClC,YAAMC,IAAgBD;AAEtB,OADa,MAAM,QAAQP,EAAO,OAAO,IAAIA,EAAO,UAAU,CAACA,EAAO,OAAO,GACpE,SAASQ,EAAc,GAAG,KACjCN,EAAY,QAAQM,CAAa;AAAA,IACnC;AAGF,WAAAJ,EAAQ,iBAAiB,WAAWE,GAAW;AAAA,MAC7C,SAAST,GAAS;AAAA,MAClB,SAASA,GAAS;AAAA,MAClB,MAAMA,GAAS;AAAA,IAAA,CAChB,GAEM,MAAM;AACX,MAAAO,EAAQ,oBAAoB,WAAWE,GAAW;AAAA,QAChD,SAAST,GAAS;AAAA,MAAA,CACnB;AAAA,IAAA;AAAA,EACH,GACC,CAACJ,GAAQK,EAAY,OAAOD,GAAS,SAASA,GAAS,SAASA,GAAS,IAAI,CAAC,GAE7E,CAAAJ;AACJ,WAAOK;AACT;"}