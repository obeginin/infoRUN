import { useRef as v, useEffect as k } from "react";
import { useRefState as p } from "../useRefState/useRefState.mjs";
import { isTarget as l } from "../../utils/helpers/isTarget.mjs";
import { getElement as E } from "../../utils/helpers/getElement.mjs";
const A = (...e) => {
  const t = l(e[0]) ? e[0] : void 0, s = t ? e[1] : e[0], i = t ? e[2] : e[1], n = t ? e[3] : e[2], o = p(window), r = v(s);
  r.current = s;
  const u = v(i);
  if (u.current = i, k(() => {
    const c = t ? E(t) : o.current;
    if (!c) return;
    const f = (d) => {
      const y = d;
      (Array.isArray(r.current) ? r.current : [r.current]).includes(y.key) && u.current(y);
    };
    return c.addEventListener("keydown", f, {
      capture: n?.capture,
      passive: n?.passive,
      once: n?.once
    }), () => {
      c.removeEventListener("keydown", f, {
        capture: n?.capture
      });
    };
  }, [t, o.state, n?.capture, n?.passive, n?.once]), !t)
    return o;
};
export {
  A as useKeyPressEvent
};
//# sourceMappingURL=useKeyPressEvent.mjs.map
