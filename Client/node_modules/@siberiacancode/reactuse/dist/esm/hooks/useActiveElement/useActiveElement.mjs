import { useState as a, useEffect as l } from "react";
import { useRefState as v } from "../useRefState/useRefState.mjs";
import { isTarget as d } from "../../utils/helpers/isTarget.mjs";
import { getElement as E } from "../../utils/helpers/getElement.mjs";
const p = (...u) => {
  const r = d(u[0]) ? u[0] : void 0, [s, i] = a(null), o = v(window);
  return l(() => {
    const e = r ? E(r) : o.current;
    if (!e) return;
    const c = new MutationObserver((f) => {
      f.filter((t) => t.removedNodes.length).map((t) => Array.from(t.removedNodes)).flat().forEach((t) => {
        i((m) => t === m ? document.activeElement : m);
      });
    });
    c.observe(e, {
      childList: !0,
      subtree: !0
    });
    const n = () => i(document?.activeElement);
    return e.addEventListener("focus", n, !0), e.addEventListener("blur", n, !0), () => {
      c.disconnect(), e.removeEventListener("focus", n, !0), e.removeEventListener("blur", n, !0);
    };
  }, [r, o.state]), r ? s : {
    ref: o,
    value: s
  };
};
export {
  p as useActiveElement
};
//# sourceMappingURL=useActiveElement.mjs.map
