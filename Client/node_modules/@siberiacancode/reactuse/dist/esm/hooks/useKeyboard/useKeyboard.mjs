import { useRef as s, useEffect as y } from "react";
import { useRefState as d } from "../useRefState/useRefState.mjs";
import { isTarget as w } from "../../utils/helpers/isTarget.mjs";
import { getElement as v } from "../../utils/helpers/getElement.mjs";
const k = (...e) => {
  const t = w(e[0]) ? e[0] : void 0, c = t ? typeof e[1] == "object" ? e[1] : { onKeyDown: e[1] } : typeof e[0] == "object" ? e[0] : { onKeyDown: e[0] }, o = d(window), r = s(c);
  if (r.current = c, y(() => {
    if (!t && !o.state) return;
    const n = t ? v(t) : o.current;
    if (!n) return;
    const f = (i) => r.current?.onKeyDown?.(i), u = (i) => r.current?.onKeyUp?.(i);
    return n.addEventListener("keydown", f), n.addEventListener("keyup", u), () => {
      n.removeEventListener("keydown", f), n.removeEventListener("keyup", u);
    };
  }, [t, o.state]), !t)
    return o;
};
export {
  k as useKeyboard
};
//# sourceMappingURL=useKeyboard.mjs.map
