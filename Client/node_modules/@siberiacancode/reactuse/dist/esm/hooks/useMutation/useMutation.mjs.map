{"version":3,"file":"useMutation.mjs","sources":["../../../../src/hooks/useMutation/useMutation.ts"],"sourcesContent":["import { useState } from 'react';\n\n/* The type of the options */\ninterface UseMutationOptions<Data> {\n  /* The retry count of requests */\n  retry?: ((failureCount: number, error: Error) => boolean) | boolean | number;\n  /* The retry delay of requests */\n  retryDelay?: ((retry: number, error: Error) => number) | number;\n  /* The callback function to be invoked on error */\n  onError?: (error: Error) => void;\n  /* The callback function to be invoked on success */\n  onSuccess?: (data: Data) => void;\n}\n\n/* The use mutation return type */\ninterface UseMutationReturn<Body, Data> {\n  /* The data of the mutation */\n  data: Data | null;\n  /* The error of the mutation */\n  error: Error | null;\n  /* The error state of the mutation */\n  isError: boolean;\n  /* The loading state of the mutation */\n  isLoading: boolean;\n  /* The success state of the mutation */\n  isSuccess: boolean;\n  /* The mutate function */\n  mutate: (body?: Body, options?: UseMutationOptions<Data>) => void;\n  /* The mutate async function */\n  mutateAsync: (body?: Body, options?: UseMutationOptions<Data>) => Promise<Data>;\n}\n\nexport interface RequestOptions<Data> extends UseMutationOptions<Data> {\n  /* The attempt count */\n  attempt?: number;\n}\n\n/**\n * @name useMutation\n * @description - Hook that defines the logic when mutate data\n * @category Async\n *\n * @template Body The type of the body\n * @template Data The type of the data\n * @param {(body: Body) => Promise<Data>} callback The callback function to be invoked\n * @param {boolean | number} [options.retry] The retry count of requests\n * @param {(data: Data) => void} [options.onSuccess] The callback function to be invoked on success\n * @param {(error: Error) => void} [options.onError] The callback function to be invoked on error\n * @returns {UseMutationReturn<Data>} An object with the state of the mutation\n *\n * @example\n * const { mutate, mutateAsync, isLoading, isError, isSuccess, error, data } = useMutation((name) => Promise.resolve(name));\n */\nexport const useMutation = <Body, Data>(\n  callback: (body: Body) => Promise<Data>,\n  options?: UseMutationOptions<Data>\n) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n\n  const [error, setError] = useState<Error | null>(null);\n  const [data, setData] = useState<Data | null>(null);\n\n  const request = (\n    body: Body,\n    requestOptions?: RequestOptions<Data>\n  ): Promise<Data | undefined> => {\n    setIsLoading(true);\n    const attempt = requestOptions?.attempt ?? 0;\n\n    return callback(body)\n      .then((response) => {\n        requestOptions?.onSuccess?.(response);\n\n        setData(response);\n        setIsSuccess(true);\n        setIsLoading(false);\n        setError(null);\n        setIsError(false);\n        return response;\n      })\n      .catch((error: Error) => {\n        const retry =\n          typeof requestOptions?.retry === 'function'\n            ? requestOptions?.retry(attempt, error)\n            : requestOptions?.retry;\n\n        const retryDelay =\n          typeof requestOptions?.retryDelay === 'function'\n            ? requestOptions?.retryDelay(attempt, error)\n            : requestOptions?.retryDelay;\n\n        if (typeof retry === 'boolean' && retry) {\n          if (retryDelay) {\n            setTimeout(\n              () => request(body, { ...requestOptions, attempt: attempt + 1 }),\n              retryDelay\n            );\n            return;\n          }\n          return request(body, { ...requestOptions, attempt: attempt + 1 });\n        }\n\n        if (retry && retry > attempt) {\n          if (retryDelay) {\n            setTimeout(\n              () => request(body, { ...requestOptions, attempt: attempt + 1 }),\n              retryDelay\n            );\n            return;\n          }\n          return request(body, { ...requestOptions, attempt: attempt + 1 });\n        }\n\n        requestOptions?.onError?.(error);\n        setData(null);\n        setIsSuccess(false);\n        setIsLoading(false);\n        setError(error);\n        setIsError(true);\n      });\n  };\n  const mutate = (body: Body, mutateOptions?: UseMutationOptions<Data>) => {\n    const requestOptions = {\n      retry: mutateOptions?.retry ?? options?.retry,\n      retryDelay: mutateOptions?.retryDelay ?? options?.retryDelay,\n      onSuccess: mutateOptions?.onSuccess ?? options?.onSuccess,\n      onError: mutateOptions?.onError ?? options?.onError\n    };\n\n    request(body, requestOptions);\n  };\n\n  const mutateAsync = async (body: Body, mutateOptions?: UseMutationOptions<Data>) => {\n    const requestOptions = {\n      retry: mutateOptions?.retry ?? options?.retry,\n      retryDelay: mutateOptions?.retryDelay ?? options?.retryDelay,\n      onSuccess: mutateOptions?.onSuccess ?? options?.onSuccess,\n      onError: mutateOptions?.onError ?? options?.onError\n    };\n\n    return request(body, requestOptions) as Promise<Data>;\n  };\n\n  return {\n    data,\n    error,\n    mutate,\n    mutateAsync,\n    isLoading,\n    isError,\n    isSuccess\n  } as UseMutationReturn<Body, Data>;\n};\n"],"names":["useMutation","callback","options","isLoading","setIsLoading","useState","isError","setIsError","isSuccess","setIsSuccess","error","setError","data","setData","request","body","requestOptions","attempt","response","retry","retryDelay","mutateOptions"],"mappings":";AAqDO,MAAMA,IAAc,CACzBC,GACAC,MACG;AACH,QAAM,CAACC,GAAWC,CAAY,IAAIC,EAAS,EAAK,GAC1C,CAACC,GAASC,CAAU,IAAIF,EAAS,EAAK,GACtC,CAACG,GAAWC,CAAY,IAAIJ,EAAS,EAAK,GAE1C,CAACK,GAAOC,CAAQ,IAAIN,EAAuB,IAAI,GAC/C,CAACO,GAAMC,CAAO,IAAIR,EAAsB,IAAI,GAE5CS,IAAU,CACdC,GACAC,MAC8B;AAC9B,IAAAZ,EAAa,EAAI;AACjB,UAAMa,IAAUD,GAAgB,WAAW;AAE3C,WAAOf,EAASc,CAAI,EACjB,KAAK,CAACG,OACLF,GAAgB,YAAYE,CAAQ,GAEpCL,EAAQK,CAAQ,GAChBT,EAAa,EAAI,GACjBL,EAAa,EAAK,GAClBO,EAAS,IAAI,GACbJ,EAAW,EAAK,GACTW,EACR,EACA,MAAM,CAACR,MAAiB;AACvB,YAAMS,IACJ,OAAOH,GAAgB,SAAU,aAC7BA,GAAgB,MAAMC,GAASP,CAAK,IACpCM,GAAgB,OAEhBI,IACJ,OAAOJ,GAAgB,cAAe,aAClCA,GAAgB,WAAWC,GAASP,CAAK,IACzCM,GAAgB;AAEtB,UAAI,OAAOG,KAAU,aAAaA,GAAO;AACvC,YAAIC,GAAY;AACd;AAAA,YACE,MAAMN,EAAQC,GAAM,EAAE,GAAGC,GAAgB,SAASC,IAAU,GAAG;AAAA,YAC/DG;AAAA,UAAA;AAEF;AAAA,QAAA;AAEF,eAAON,EAAQC,GAAM,EAAE,GAAGC,GAAgB,SAASC,IAAU,GAAG;AAAA,MAAA;AAGlE,UAAIE,KAASA,IAAQF,GAAS;AAC5B,YAAIG,GAAY;AACd;AAAA,YACE,MAAMN,EAAQC,GAAM,EAAE,GAAGC,GAAgB,SAASC,IAAU,GAAG;AAAA,YAC/DG;AAAA,UAAA;AAEF;AAAA,QAAA;AAEF,eAAON,EAAQC,GAAM,EAAE,GAAGC,GAAgB,SAASC,IAAU,GAAG;AAAA,MAAA;AAGlE,MAAAD,GAAgB,UAAUN,CAAK,GAC/BG,EAAQ,IAAI,GACZJ,EAAa,EAAK,GAClBL,EAAa,EAAK,GAClBO,EAASD,CAAK,GACdH,EAAW,EAAI;AAAA,IAAA,CAChB;AAAA,EAAA;AAwBL,SAAO;AAAA,IACL,MAAAK;AAAA,IACA,OAAAF;AAAA,IACA,QAzBa,CAACK,GAAYM,MAA6C;AACvE,YAAML,IAAiB;AAAA,QACrB,OAAOK,GAAe,SAASnB,GAAS;AAAA,QACxC,YAAYmB,GAAe,cAAcnB,GAAS;AAAA,QAClD,WAAWmB,GAAe,aAAanB,GAAS;AAAA,QAChD,SAASmB,GAAe,WAAWnB,GAAS;AAAA,MAAA;AAG9C,MAAAY,EAAQC,GAAMC,CAAc;AAAA,IAAA;AAAA,IAkB5B,aAfkB,OAAOD,GAAYM,MAA6C;AAClF,YAAML,IAAiB;AAAA,QACrB,OAAOK,GAAe,SAASnB,GAAS;AAAA,QACxC,YAAYmB,GAAe,cAAcnB,GAAS;AAAA,QAClD,WAAWmB,GAAe,aAAanB,GAAS;AAAA,QAChD,SAASmB,GAAe,WAAWnB,GAAS;AAAA,MAAA;AAG9C,aAAOY,EAAQC,GAAMC,CAAc;AAAA,IAAA;AAAA,IAQnC,WAAAb;AAAA,IACA,SAAAG;AAAA,IACA,WAAAE;AAAA,EAAA;AAEJ;"}