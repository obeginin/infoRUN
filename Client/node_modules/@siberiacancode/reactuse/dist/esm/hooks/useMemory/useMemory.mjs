import { useState as m, useEffect as a } from "react";
const p = () => {
  const e = performance && "memory" in performance && !!performance.memory, [r, t] = m(
    performance?.memory ?? {
      jsHeapSizeLimit: 0,
      totalJSHeapSize: 0,
      usedJSHeapSize: 0
    }
  );
  return a(() => {
    if (!e) return;
    const o = setInterval(() => t(performance.memory), 1e3);
    return () => clearInterval(o);
  }, []), { supported: e, value: r };
};
export {
  p as useMemory
};
//# sourceMappingURL=useMemory.mjs.map
