{"version":3,"file":"useInterval.mjs","sources":["../../../../src/hooks/useInterval/useInterval.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/** The use interval options */\nexport interface UseIntervalOptions {\n  /** Start the interval immediately */\n  immediately?: boolean;\n}\n\n/** The use interval return type */\nexport interface UseIntervalReturn {\n  /** Is the interval active */\n  active: boolean;\n  /** Pause the interval */\n  pause: () => void;\n  /** Resume the interval */\n  resume: () => void;\n  /** Toggle the interval */\n  toggle: () => void;\n}\n\ninterface UseInterval {\n  (callback: () => void, interval?: number, options?: UseIntervalOptions): UseIntervalReturn;\n\n  (callback: () => void, options?: UseIntervalOptions & { interval?: number }): UseIntervalReturn;\n}\n\n/**\n * @name useInterval\n * @description - Hook that makes and interval and returns controlling functions\n * @category Time\n *\n * @overload\n * @param {() => void} callback Any callback function\n * @param {number} [interval=1000] Time in milliseconds\n * @param {boolean} [options.immediately=true] Start the interval immediately\n * @returns {UseIntervalReturn}\n *\n * @example\n * const { active, pause, resume, toggle } = useInterval(() => console.log('inside interval'), 2500);\n *\n * @overload\n * @param {() => void} callback Any callback function\n * @param {number} [options.interval=1000] Time in milliseconds\n * @param {boolean} [options.immediately=true] Start the interval immediately\n *\n * @example\n * const { active, pause, resume, toggle } = useInterval(() => console.log('inside interval'), { interval: 2500 });\n */\nexport const useInterval = ((...params: any[]): UseIntervalReturn => {\n  const callback = params[0] as () => void;\n  const interval =\n    ((typeof params[1] === 'number'\n      ? params[1]\n      : (params[1] as UseIntervalOptions & { interval?: number }).interval) as number) ?? 1000;\n  const options =\n    typeof params[1] === 'object'\n      ? (params[1] as (UseIntervalOptions & { interval?: number }) | undefined)\n      : (params[2] as UseIntervalOptions | undefined);\n  const immediately = options?.immediately ?? true;\n\n  const [active, setActive] = useState<boolean>(immediately ?? true);\n\n  const intervalIdRef = useRef<ReturnType<typeof setInterval>>(undefined);\n  const internalCallbackRef = useRef(callback);\n  internalCallbackRef.current = callback;\n\n  useEffect(() => {\n    if (!active) return;\n\n    intervalIdRef.current = setInterval(() => internalCallbackRef.current(), interval);\n    return () => {\n      clearInterval(intervalIdRef.current);\n    };\n  }, [active, interval]);\n\n  const pause = () => setActive(false);\n\n  const resume = () => {\n    if (interval <= 0) return;\n    setActive(true);\n  };\n\n  const toggle = () => setActive(!active);\n\n  return {\n    active,\n    pause,\n    resume,\n    toggle\n  };\n}) as UseInterval;\n"],"names":["useInterval","params","callback","interval","immediately","active","setActive","useState","intervalIdRef","useRef","internalCallbackRef","useEffect"],"mappings":";AAgDO,MAAMA,IAAe,IAAIC,MAAqC;AACnE,QAAMC,IAAWD,EAAO,CAAC,GACnBE,KACF,OAAOF,EAAO,CAAC,KAAM,WACnBA,EAAO,CAAC,IACPA,EAAO,CAAC,EAAiD,aAAwB,KAKlFG,KAHJ,OAAOH,EAAO,CAAC,KAAM,WAChBA,EAAO,CAAC,IACRA,EAAO,CAAC,IACc,eAAe,IAEtC,CAACI,GAAQC,CAAS,IAAIC,EAAkBH,KAAe,EAAI,GAE3DI,IAAgBC,EAAuC,MAAS,GAChEC,IAAsBD,EAAOP,CAAQ;AAC3C,SAAAQ,EAAoB,UAAUR,GAE9BS,EAAU,MAAM;AACd,QAAKN;AAEL,aAAAG,EAAc,UAAU,YAAY,MAAME,EAAoB,QAAA,GAAWP,CAAQ,GAC1E,MAAM;AACX,sBAAcK,EAAc,OAAO;AAAA,MAAA;AAAA,EACrC,GACC,CAACH,GAAQF,CAAQ,CAAC,GAWd;AAAA,IACL,QAAAE;AAAA,IACA,OAXY,MAAMC,EAAU,EAAK;AAAA,IAYjC,QAVa,MAAM;AACnB,MAAIH,KAAY,KAChBG,EAAU,EAAI;AAAA,IAAA;AAAA,IASd,QANa,MAAMA,EAAU,CAACD,CAAM;AAAA,EAMpC;AAEJ;"}