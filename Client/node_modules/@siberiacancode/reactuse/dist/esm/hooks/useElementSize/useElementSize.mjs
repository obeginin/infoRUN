import { useState as f } from "react";
import { useIsomorphicLayoutEffect as g } from "../useIsomorphicLayoutEffect/useIsomorphicLayoutEffect.mjs";
import { useRefState as d } from "../useRefState/useRefState.mjs";
import { getElement as l } from "../../utils/helpers/getElement.mjs";
const R = (...s) => {
  const e = s[0], [n, i] = f({ width: 0, height: 0 }), r = d();
  return g(() => {
    const t = e ? l(e) : r.current;
    if (!t) return;
    const { width: c, height: h } = t.getBoundingClientRect();
    i({
      width: c,
      height: h
    });
    const o = new ResizeObserver(() => {
      const { width: u, height: m } = t.getBoundingClientRect();
      i({ width: u, height: m });
    });
    return o.observe(t), () => {
      o.disconnect();
    };
  }, [r.current, e]), e ? { value: n } : {
    ref: r,
    value: n
  };
};
export {
  R as useElementSize
};
//# sourceMappingURL=useElementSize.mjs.map
