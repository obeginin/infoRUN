import { useState as k, useRef as L, useEffect as H } from "react";
import { useRefState as I } from "../useRefState/useRefState.mjs";
import { isTarget as T } from "../../utils/helpers/isTarget.mjs";
import { getElement as W } from "../../utils/helpers/getElement.mjs";
const M = (...e) => {
  const t = T(e[0]) ? e[0] : void 0, c = t ? e[1] : e[0], s = t ? e[2] : e[1], i = s?.direction ?? "bottom", l = s?.distance ?? 10, [n, f] = k(!1), o = I(), a = L(c);
  a.current = c;
  const u = L(n);
  return u.current = n, H(() => {
    if (!t && !o.state) return;
    const r = t ? W(t) : o.current;
    if (!r) return;
    const d = async (g) => {
      if (u.current) return;
      const { clientHeight: R, scrollHeight: b, scrollTop: m, clientWidth: E, scrollWidth: p, scrollLeft: h } = g.target, v = b - (m + R), S = p - (h + E);
      ({
        bottom: v,
        top: m,
        right: S,
        left: h
      })[i] <= l && (f(!0), await a.current(g), f(!1));
    };
    return r.addEventListener("scroll", d), () => {
      r.removeEventListener("scroll", d);
    };
  }, [t, o.state, i, l]), t ? n : {
    ref: o,
    loading: n
  };
};
export {
  M as useInfiniteScroll
};
//# sourceMappingURL=useInfiniteScroll.mjs.map
