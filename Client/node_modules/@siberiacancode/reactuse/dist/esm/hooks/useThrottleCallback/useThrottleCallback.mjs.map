{"version":3,"file":"useThrottleCallback.mjs","sources":["../../../../src/hooks/useThrottleCallback/useThrottleCallback.ts"],"sourcesContent":["import { useMemo, useRef } from 'react';\n\nexport type ThrottledCallback<Params extends unknown[]> = ((...args: Params) => void) & {\n  cancel: () => void;\n};\n\n/**\n * @name useThrottleCallback\n * @description - Hook that creates a throttled callback\n * @category Utilities\n *\n * @template Params The type of the params\n * @template Return The type of the return\n * @param {(...args: Params) => Return} callback The callback function\n * @param {number} delay The delay in milliseconds\n * @returns {(...args: Params) => Return} The callback with throttle\n *\n * @example\n * const throttled = useThrottleCallback(() => console.log('callback'), 500);\n */\nexport const useThrottleCallback = <Params extends unknown[], Return>(\n  callback: (...args: Params) => Return,\n  delay: number\n): ThrottledCallback<Params> => {\n  const internalCallbackRef = useRef(callback);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const isCalledRef = useRef(false);\n  const delayRef = useRef(delay);\n  const lastArgsRef = useRef<Params | null>(null);\n\n  internalCallbackRef.current = callback;\n  delayRef.current = delay;\n\n  const throttled = useMemo(() => {\n    const timer = () => {\n      isCalledRef.current = false;\n\n      if (!lastArgsRef.current) return;\n      internalCallbackRef.current.apply(this, lastArgsRef.current);\n      lastArgsRef.current = null;\n      setTimeout(timer, delayRef.current);\n    };\n\n    const cancel = () => {\n      if (!timeoutRef.current) return;\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n      isCalledRef.current = false;\n    };\n\n    const throttledCallback = function (this: any, ...args: Params) {\n      lastArgsRef.current = args;\n      if (isCalledRef.current) return;\n\n      internalCallbackRef.current.apply(this, args);\n      isCalledRef.current = true;\n      timeoutRef.current = setTimeout(timer, delayRef.current);\n    };\n\n    throttledCallback.cancel = cancel;\n\n    cancel();\n    return throttledCallback;\n  }, [delay]);\n\n  return throttled;\n};\n"],"names":["useThrottleCallback","callback","delay","internalCallbackRef","useRef","timeoutRef","isCalledRef","delayRef","lastArgsRef","useMemo","timer","cancel","throttledCallback","args"],"mappings":";AAoBO,MAAMA,IAAsB,CACjCC,GACAC,MAC8B;AAC9B,QAAMC,IAAsBC,EAAOH,CAAQ,GACrCI,IAAaD,EAA6C,IAAI,GAC9DE,IAAcF,EAAO,EAAK,GAC1BG,IAAWH,EAAOF,CAAK,GACvBM,IAAcJ,EAAsB,IAAI;AAE9C,SAAAD,EAAoB,UAAUF,GAC9BM,EAAS,UAAUL,GAEDO,EAAQ,MAAM;AAC9B,UAAMC,IAAQ,MAAM;AAGlB,MAFAJ,EAAY,UAAU,IAEjBE,EAAY,YACjBL,EAAoB,QAAQ,MAAM,QAAMK,EAAY,OAAO,GAC3DA,EAAY,UAAU,MACtB,WAAWE,GAAOH,EAAS,OAAO;AAAA,IAAA,GAG9BI,IAAS,MAAM;AACnB,MAAKN,EAAW,YAChB,aAAaA,EAAW,OAAO,GAC/BA,EAAW,UAAU,MACrBC,EAAY,UAAU;AAAA,IAAA,GAGlBM,IAAoB,YAAwBC,GAAc;AAE9D,MADAL,EAAY,UAAUK,GAClB,CAAAP,EAAY,YAEhBH,EAAoB,QAAQ,MAAM,MAAMU,CAAI,GAC5CP,EAAY,UAAU,IACtBD,EAAW,UAAU,WAAWK,GAAOH,EAAS,OAAO;AAAA,IAAA;AAGzD,WAAAK,EAAkB,SAASD,GAE3BA,EAAA,GACOC;AAAA,EAAA,GACN,CAACV,CAAK,CAAC;AAGZ;"}