import { useState as a, useRef as g, useEffect as d } from "react";
import { useRefState as p } from "../useRefState/useRefState.mjs";
import { isTarget as b } from "../../utils/helpers/isTarget.mjs";
import { getElement as v } from "../../utils/helpers/getElement.mjs";
const C = (...r) => {
  const t = b(r[0]) ? r[0] : void 0, s = t ? r[1] : r[0], n = t ? r[2] : r[1], [i, u] = a(n ?? ""), c = p(), o = g(null), m = (e) => {
    if (!o.current) return;
    const l = o.current;
    l.style && (l.style.setProperty(s, e), u(e));
  }, f = () => {
    if (!o.current) return;
    const e = o.current;
    e.style && (e.style.removeProperty(s), u(""));
  };
  return d(() => {
    if (!n) return;
    const e = (t ? v(t) : c.current) ?? window.document.documentElement;
    e.style && (e.style.setProperty(s, n), u(n));
  }, []), d(() => {
    const e = (t ? v(t) : c.current) ?? window.document.documentElement;
    o.current = e;
    const l = () => {
      const w = window.getComputedStyle(e).getPropertyValue(s)?.trim();
      u(w ?? n);
    }, y = new MutationObserver(l);
    return y.observe(e, { attributeFilter: ["style", "class"] }), () => {
      y.disconnect();
    };
  }, [t, c.state]), t ? { value: i, set: m, remove: f } : { ref: c, value: i, set: m, remove: f };
};
export {
  C as useCssVar
};
//# sourceMappingURL=useCssVar.mjs.map
