{"version":3,"file":"useNetwork.mjs","sources":["../../../../src/hooks/useNetwork/useNetwork.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport interface Connection extends EventTarget {\n  readonly downlink: number;\n  readonly downlinkMax: number;\n  readonly effectiveType: '2g' | '3g' | '4g' | 'slow-2g';\n  readonly rtt: number;\n  readonly saveData: boolean;\n  onChange: (event: Event) => void;\n  readonly type:\n    | 'bluetooth'\n    | 'cellular'\n    | 'ethernet'\n    | 'mixed'\n    | 'none'\n    | 'other'\n    | 'unknown'\n    | 'wifi'\n    | 'wimax';\n}\n\ndeclare global {\n  interface Navigator {\n    readonly connection: Connection;\n    readonly mozConnection: Connection;\n    readonly webkitConnection: Connection;\n  }\n}\n\n/** The type of network connection */\nexport type ConnectionType = Connection['type'];\n/** The effective type of connection */\nexport type ConnectionEffectiveType = Connection['effectiveType'];\n\n/** The use network return type */\nexport interface UseNetworkReturn {\n  /** The estimated downlink speed in megabits per seconds */\n  downlink?: Connection['downlink'];\n  /** The maximum downlink speed, if available */\n  downlinkMax?: Connection['downlinkMax'];\n  /** The effective type of connection (e.g., '2g', '3g', '4g') */\n  effectiveType?: Connection['effectiveType'];\n  /** Indicates if the device is currently online */\n  online: boolean;\n  /** The estimated round-trip time in milliseconds */\n  rtt?: Connection['rtt'];\n  /** Indicates if the user has enabled data saving mode */\n  saveData?: Connection['saveData'];\n  /** The type of network connection (e.g., 'wifi', 'cellular') */\n  type?: Connection['type'];\n}\n\nexport const getConnection = () =>\n  navigator?.connection || navigator?.mozConnection || navigator?.webkitConnection;\n\n/**\n * @name useNetwork\n * @description - Hook to track network status\n * @category Browser\n *\n * @browserapi navigator.connection https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection\n *\n * @returns {UseNetworkReturn} An object containing the network status\n *\n * @example\n * const { online, downlink, downlinkMax, effectiveType, rtt, saveData, type } = useNetwork();\n */\nexport const useNetwork = (): UseNetworkReturn => {\n  const [value, setValue] = useState(() => {\n    if (typeof navigator === 'undefined') {\n      return {\n        online: false,\n        type: undefined,\n        effectiveType: undefined,\n        saveData: false,\n        downlink: 0,\n        downlinkMax: 0,\n        rtt: 0\n      };\n    }\n    const online = navigator.onLine;\n    const connection = getConnection();\n\n    return {\n      online,\n      downlink: connection?.downlink,\n      downlinkMax: connection?.downlinkMax,\n      effectiveType: connection?.effectiveType,\n      rtt: connection?.rtt,\n      saveData: connection?.saveData,\n      type: connection?.type\n    };\n  });\n\n  useEffect(() => {\n    const callback = () => {\n      const online = navigator.onLine;\n      const connection = getConnection();\n\n      setValue({\n        online,\n        downlink: connection?.downlink,\n        downlinkMax: connection?.downlinkMax,\n        effectiveType: connection?.effectiveType,\n        rtt: connection?.rtt,\n        saveData: connection?.saveData,\n        type: connection?.type\n      });\n    };\n    window.addEventListener('online', callback, { passive: true });\n    window.addEventListener('offline', callback, { passive: true });\n\n    const connection = getConnection();\n\n    if (connection) {\n      connection.addEventListener('change', callback, { passive: true });\n    }\n\n    return () => {\n      window.removeEventListener('online', callback);\n      window.removeEventListener('offline', callback);\n\n      if (connection) {\n        connection.removeEventListener('change', callback);\n      }\n    };\n  });\n\n  return value;\n};\n"],"names":["getConnection","useNetwork","value","setValue","useState","online","connection","useEffect","callback"],"mappings":";AAoDO,MAAMA,IAAgB,MAC3B,WAAW,cAAc,WAAW,iBAAiB,WAAW,kBAcrDC,IAAa,MAAwB;AAChD,QAAM,CAACC,GAAOC,CAAQ,IAAIC,EAAS,MAAM;AACvC,QAAI,OAAO,YAAc;AACvB,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,eAAe;AAAA,QACf,UAAU;AAAA,QACV,UAAU;AAAA,QACV,aAAa;AAAA,QACb,KAAK;AAAA,MAAA;AAGT,UAAMC,IAAS,UAAU,QACnBC,IAAaN,EAAA;AAEnB,WAAO;AAAA,MACL,QAAAK;AAAA,MACA,UAAUC,GAAY;AAAA,MACtB,aAAaA,GAAY;AAAA,MACzB,eAAeA,GAAY;AAAA,MAC3B,KAAKA,GAAY;AAAA,MACjB,UAAUA,GAAY;AAAA,MACtB,MAAMA,GAAY;AAAA,IAAA;AAAA,EACpB,CACD;AAED,SAAAC,EAAU,MAAM;AACd,UAAMC,IAAW,MAAM;AACrB,YAAMH,IAAS,UAAU,QACnBC,IAAaN,EAAA;AAEnB,MAAAG,EAAS;AAAA,QACP,QAAAE;AAAA,QACA,UAAUC,GAAY;AAAA,QACtB,aAAaA,GAAY;AAAA,QACzB,eAAeA,GAAY;AAAA,QAC3B,KAAKA,GAAY;AAAA,QACjB,UAAUA,GAAY;AAAA,QACtB,MAAMA,GAAY;AAAA,MAAA,CACnB;AAAA,IAAA;AAEH,WAAO,iBAAiB,UAAUE,GAAU,EAAE,SAAS,IAAM,GAC7D,OAAO,iBAAiB,WAAWA,GAAU,EAAE,SAAS,IAAM;AAE9D,UAAMF,IAAaN,EAAA;AAEnB,WAAIM,KACFA,EAAW,iBAAiB,UAAUE,GAAU,EAAE,SAAS,IAAM,GAG5D,MAAM;AACX,aAAO,oBAAoB,UAAUA,CAAQ,GAC7C,OAAO,oBAAoB,WAAWA,CAAQ,GAE1CF,KACFA,EAAW,oBAAoB,UAAUE,CAAQ;AAAA,IACnD;AAAA,EACF,CACD,GAEMN;AACT;"}