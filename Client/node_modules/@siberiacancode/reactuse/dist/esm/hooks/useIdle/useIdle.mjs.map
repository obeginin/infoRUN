{"version":3,"file":"useIdle.mjs","sources":["../../../../src/hooks/useIdle/useIdle.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { throttle } from '@/utils/helpers';\n\n/** The use idle options type */\nexport interface UseIdleOptions {\n  /** The idle events */\n  events?: Array<keyof DocumentEventMap>;\n  /** The idle state */\n  initialValue?: boolean;\n}\n\nconst IDLE_EVENTS = [\n  'mousemove',\n  'mousedown',\n  'keydown',\n  'touchstart',\n  'wheel',\n  'resize'\n] satisfies Array<keyof DocumentEventMap>;\nconst ONE_MINUTE = 60e3;\n\n/** The use idle return type */\nexport interface UseIdleReturn {\n  /** The idle state */\n  idle: boolean;\n  /** The last active time */\n  lastActive: number;\n}\n\n/**\n * @name useIdle\n * @description - Hook that defines the logic when the user is idle\n * @category Sensors\n *\n * @param {number} [milliseconds=ONE_MINUTE] The idle time in milliseconds\n * @param {boolean} [options.initialState=false] The options for the hook\n * @param {Array<keyof WindowEventMap>} [options.events=IDLE_EVENTS]\n * @returns {UseIdleReturn} An object containing the idle state and the last active time\n *\n * @example\n * const { idle, lastActive } = useIdle();\n */\nexport const useIdle = (\n  milliseconds = ONE_MINUTE,\n  { initialValue = false, events = IDLE_EVENTS }: UseIdleOptions = {}\n): UseIdleReturn => {\n  const [idle, setIdle] = useState(initialValue);\n  const [lastActive, setLastActive] = useState(Date.now());\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n    const onTimeout = () => setIdle(true);\n\n    const onEvent = throttle(() => {\n      setIdle(false);\n      setLastActive(Date.now());\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(onTimeout, milliseconds);\n    }, 500);\n\n    const onVisibilitychange = () => {\n      if (!document.hidden) onEvent();\n    };\n\n    timeoutId = setTimeout(onTimeout, milliseconds);\n\n    events.forEach((event) => window.addEventListener(event, onEvent));\n    document.addEventListener('visibilitychange', onVisibilitychange);\n\n    return () => {\n      events.forEach((event) => window.addEventListener(event, onEvent));\n      document.removeEventListener('visibilitychange', onVisibilitychange);\n      clearTimeout(timeoutId);\n    };\n  }, [milliseconds, events]);\n\n  return { idle, lastActive };\n};\n"],"names":["IDLE_EVENTS","ONE_MINUTE","useIdle","milliseconds","initialValue","events","idle","setIdle","useState","lastActive","setLastActive","useEffect","timeoutId","onTimeout","onEvent","throttle","onVisibilitychange","event"],"mappings":";;AAYA,MAAMA,IAAc;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GACMC,IAAa,KAuBNC,IAAU,CACrBC,IAAeF,GACf,EAAE,cAAAG,IAAe,IAAO,QAAAC,IAASL,EAAA,IAAgC,OAC/C;AAClB,QAAM,CAACM,GAAMC,CAAO,IAAIC,EAASJ,CAAY,GACvC,CAACK,GAAYC,CAAa,IAAIF,EAAS,KAAK,KAAK;AAEvD,SAAAG,EAAU,MAAM;AACd,QAAIC;AACJ,UAAMC,IAAY,MAAMN,EAAQ,EAAI,GAE9BO,IAAUC,EAAS,MAAM;AAC7B,MAAAR,EAAQ,EAAK,GACbG,EAAc,KAAK,KAAK,GACxB,aAAaE,CAAS,GACtBA,IAAY,WAAWC,GAAWV,CAAY;AAAA,IAAA,GAC7C,GAAG,GAEAa,IAAqB,MAAM;AAC/B,MAAK,SAAS,UAAQF,EAAA;AAAA,IAAQ;AAGhC,WAAAF,IAAY,WAAWC,GAAWV,CAAY,GAE9CE,EAAO,QAAQ,CAACY,MAAU,OAAO,iBAAiBA,GAAOH,CAAO,CAAC,GACjE,SAAS,iBAAiB,oBAAoBE,CAAkB,GAEzD,MAAM;AACX,MAAAX,EAAO,QAAQ,CAACY,MAAU,OAAO,iBAAiBA,GAAOH,CAAO,CAAC,GACjE,SAAS,oBAAoB,oBAAoBE,CAAkB,GACnE,aAAaJ,CAAS;AAAA,IAAA;AAAA,EACxB,GACC,CAACT,GAAcE,CAAM,CAAC,GAElB,EAAE,MAAAC,GAAM,YAAAG,EAAA;AACjB;"}