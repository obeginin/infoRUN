{"version":3,"file":"useToggle.mjs","sources":["../../../../src/hooks/useToggle/useToggle.ts"],"sourcesContent":["import type { SetStateAction } from 'react';\n\nimport { useReducer } from 'react';\n\n/** The use toggle return type */\nexport type UseToggleReturn<Value> = readonly [Value, (value?: Value) => void];\n\n/**\n * @name useToggle\n * @description - Hook that create toggle\n * @category State\n *\n * @template Value The type of the value\n * @param {Value[]} [values=[false, true]] The values to toggle\n *\n * @example\n * const [on, toggle] = useToggle();\n *\n * @example\n * const [value, toggle] = useToggle(['light', 'dark'] as const);\n */\nexport const useToggle = <Value = boolean>(values: readonly Value[] = [false, true] as any) => {\n  const [[option], toggle] = useReducer((state: Value[], action: SetStateAction<Value>) => {\n    const value =\n      typeof action === 'function' ? (action as (prevState: Value) => Value)(state[0]) : action;\n    const index = Math.abs(state.indexOf(value));\n    return state.slice(index).concat(state.slice(0, index));\n  }, values as Value[]);\n\n  return [option, toggle as (value?: SetStateAction<Value>) => void] as const;\n};\n"],"names":["useToggle","values","option","toggle","useReducer","state","action","value","index"],"mappings":";AAqBO,MAAMA,IAAY,CAAkBC,IAA2B,CAAC,IAAO,EAAI,MAAa;AAC7F,QAAM,CAAC,CAACC,CAAM,GAAGC,CAAM,IAAIC,EAAW,CAACC,GAAgBC,MAAkC;AACvF,UAAMC,IACJ,OAAOD,KAAW,aAAcA,EAAuCD,EAAM,CAAC,CAAC,IAAIC,GAC/EE,IAAQ,KAAK,IAAIH,EAAM,QAAQE,CAAK,CAAC;AAC3C,WAAOF,EAAM,MAAMG,CAAK,EAAE,OAAOH,EAAM,MAAM,GAAGG,CAAK,CAAC;AAAA,EAAA,GACrDP,CAAiB;AAEpB,SAAO,CAACC,GAAQC,CAAiD;AACnE;"}