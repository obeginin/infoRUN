{"version":3,"file":"useDeviceOrientation.mjs","sources":["../../../../src/hooks/useDeviceOrientation/useDeviceOrientation.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\n/* The use device orientation value type */\nexport interface UseDeviceOrientationValue {\n  /** The current absolute value */\n  absolute: boolean;\n  /** A number representing the motion of the device around the z axis, express in degrees with values ranging from 0 to 360 */\n  alpha: number | null;\n  /** A number representing the motion of the device around the x axis, express in degrees with values ranging from -180 to 180 */\n  beta: number | null;\n  /** A number representing the motion of the device around the y axis, express in degrees with values ranging from -90 to 90 */\n  gamma: number | null;\n}\n\n/* The use device orientation return type */\nexport interface UseDeviceOrientationReturn {\n  /** Whether the device orientation is supported */\n  supported: boolean;\n  /** The current device orientation value */\n  value: UseDeviceOrientationValue;\n}\n\n/**\n * @name useDeviceOrientation\n * @description - Hook that provides the current device orientation\n * @category Sensors\n *\n * @browserapi DeviceOrientationEvent https://developer.mozilla.org/en-US/docs/Web/API/Window/DeviceOrientationEvent\n *\n * @returns {UseDeviceOrientationReturn} The current device orientation\n *\n * @example\n * const { supported, value } = useDeviceOrientation();\n */\nexport const useDeviceOrientation = (): UseDeviceOrientationReturn => {\n  const supported = typeof window !== 'undefined' && 'DeviceOrientationEvent' in window;\n\n  const [value, setValue] = useState<UseDeviceOrientationValue>({\n    alpha: null,\n    beta: null,\n    gamma: null,\n    absolute: false\n  });\n\n  useEffect(() => {\n    if (!supported) return;\n\n    const onDeviceOrientation = (event: DeviceOrientationEvent) =>\n      setValue({\n        alpha: event.alpha,\n        beta: event.beta,\n        gamma: event.gamma,\n        absolute: event.absolute\n      });\n\n    window.addEventListener('deviceorientation', onDeviceOrientation);\n    return () => {\n      window.removeEventListener('deviceorientation', onDeviceOrientation);\n    };\n  }, []);\n\n  return {\n    supported,\n    value\n  };\n};\n"],"names":["useDeviceOrientation","supported","value","setValue","useState","useEffect","onDeviceOrientation","event"],"mappings":";AAkCO,MAAMA,IAAuB,MAAkC;AACpE,QAAMC,IAAY,OAAO,SAAW,OAAe,4BAA4B,QAEzE,CAACC,GAAOC,CAAQ,IAAIC,EAAoC;AAAA,IAC5D,OAAO;AAAA,IACP,MAAM;AAAA,IACN,OAAO;AAAA,IACP,UAAU;AAAA,EAAA,CACX;AAED,SAAAC,EAAU,MAAM;AACd,QAAI,CAACJ,EAAW;AAEhB,UAAMK,IAAsB,CAACC,MAC3BJ,EAAS;AAAA,MACP,OAAOI,EAAM;AAAA,MACb,MAAMA,EAAM;AAAA,MACZ,OAAOA,EAAM;AAAA,MACb,UAAUA,EAAM;AAAA,IAAA,CACjB;AAEH,kBAAO,iBAAiB,qBAAqBD,CAAmB,GACzD,MAAM;AACX,aAAO,oBAAoB,qBAAqBA,CAAmB;AAAA,IAAA;AAAA,EACrE,GACC,EAAE,GAEE;AAAA,IACL,WAAAL;AAAA,IACA,OAAAC;AAAA,EAAA;AAEJ;"}