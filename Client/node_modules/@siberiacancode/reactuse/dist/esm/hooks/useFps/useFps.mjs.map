{"version":3,"file":"useFps.mjs","sources":["../../../../src/hooks/useFps/useFps.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\n/**\n * @name useFps\n * @description - Hook that measures frames per second\n * @category Browser\n *\n * @browserapi requestAnimationFrame https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n *\n * @returns {number} A number which determines frames per second\n *\n * @example\n * const fps = useFps();\n */\nexport const useFps = () => {\n  const [fps, setFps] = useState(0);\n\n  useEffect(() => {\n    let frameCount = 0;\n    let startTime = performance.now();\n    let rafId: number;\n\n    const onRequestAnimationFrame = () => {\n      frameCount += 1;\n      const currentTime = performance.now();\n      const elapsedTime = currentTime - startTime;\n\n      if (elapsedTime >= 1000) {\n        const calculatedFps = Math.round((frameCount * 1000) / elapsedTime);\n        setFps(calculatedFps);\n        frameCount = 0;\n        startTime = currentTime;\n      }\n\n      rafId = requestAnimationFrame(onRequestAnimationFrame);\n    };\n\n    rafId = requestAnimationFrame(onRequestAnimationFrame);\n\n    return () => {\n      cancelAnimationFrame(rafId);\n    };\n  }, []);\n\n  return fps;\n};\n"],"names":["useFps","fps","setFps","useState","useEffect","frameCount","startTime","rafId","onRequestAnimationFrame","currentTime","elapsedTime","calculatedFps"],"mappings":";AAcO,MAAMA,IAAS,MAAM;AAC1B,QAAM,CAACC,GAAKC,CAAM,IAAIC,EAAS,CAAC;AAEhC,SAAAC,EAAU,MAAM;AACd,QAAIC,IAAa,GACbC,IAAY,YAAY,IAAA,GACxBC;AAEJ,UAAMC,IAA0B,MAAM;AACpC,MAAAH,KAAc;AACd,YAAMI,IAAc,YAAY,IAAA,GAC1BC,IAAcD,IAAcH;AAElC,UAAII,KAAe,KAAM;AACvB,cAAMC,IAAgB,KAAK,MAAON,IAAa,MAAQK,CAAW;AAClE,QAAAR,EAAOS,CAAa,GACpBN,IAAa,GACbC,IAAYG;AAAA,MAAA;AAGd,MAAAF,IAAQ,sBAAsBC,CAAuB;AAAA,IAAA;AAGvD,WAAAD,IAAQ,sBAAsBC,CAAuB,GAE9C,MAAM;AACX,2BAAqBD,CAAK;AAAA,IAAA;AAAA,EAC5B,GACC,EAAE,GAEEN;AACT;"}