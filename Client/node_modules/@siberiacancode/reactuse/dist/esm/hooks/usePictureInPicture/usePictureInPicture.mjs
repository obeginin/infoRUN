import { useState as v, useRef as E, useEffect as P } from "react";
import { useRefState as g } from "../useRefState/useRefState.mjs";
import { isTarget as I } from "../../utils/helpers/isTarget.mjs";
import { getElement as x } from "../../utils/helpers/getElement.mjs";
const S = (...n) => {
  const t = I(n[0]) ? n[0] : void 0, r = (t ? n[1] : n[0]) ?? {}, [s, i] = v(!1), f = g(), c = E(null), u = E(r);
  u.current = r;
  const o = typeof document < "u" && "pictureInPictureEnabled" in document, a = async () => {
    o && c.current && (await c.current.requestPictureInPicture(), i(!0), r.onEnter?.());
  }, p = async () => {
    o && (await document.exitPictureInPicture(), i(!1), r.onExit?.());
  };
  P(() => {
    const e = t ? x(t) : f.current;
    if (!e) return;
    c.current = e;
    const m = () => {
      i(!0), u.current.onEnter?.();
    }, d = () => {
      i(!1), u.current.onExit?.();
    };
    return e.addEventListener("enterpictureinpicture", m), e.addEventListener("leavepictureinpicture", d), () => {
      e.removeEventListener("enterpictureinpicture", m), e.removeEventListener("leavepictureinpicture", d);
    };
  }, [t]);
  const l = {
    open: s,
    supported: o,
    enter: a,
    exit: p,
    toggle: async () => {
      s ? await p() : await a();
    }
  };
  return t ? l : { ...l, ref: f };
};
export {
  S as usePictureInPicture
};
//# sourceMappingURL=usePictureInPicture.mjs.map
