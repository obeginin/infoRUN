import { useState as b, useRef as m, useEffect as g } from "react";
import { useRefState as l } from "../useRefState/useRefState.mjs";
import { isTarget as R } from "../../utils/helpers/isTarget.mjs";
import { getElement as v } from "../../utils/helpers/getElement.mjs";
const E = (...n) => {
  const e = R(n[0]) ? n[0] : void 0, t = e ? n[1] : n[0], s = t?.enabled ?? !0, [i, a] = b([]), r = l(), c = m(t?.onChange);
  return c.current = t?.onChange, g(() => {
    if (!s || !e && !r.state) return;
    const f = e ? v(e) : r.current;
    if (!f) return;
    const o = new ResizeObserver((u) => {
      a(u), c.current?.(u, o);
    });
    return o.observe(f, t), () => {
      o.disconnect();
    };
  }, [e, r.state, t?.box, s]), e ? { entries: i } : {
    ref: r,
    entries: i
  };
};
export {
  E as useResizeObserver
};
//# sourceMappingURL=useResizeObserver.mjs.map
