{"version":3,"file":"useCounter.mjs","sources":["../../../../src/hooks/useCounter/useCounter.ts"],"sourcesContent":["import type { Dispatch, SetStateAction } from 'react';\n\nimport { useState } from 'react';\n\n/** The use counter options */\nexport interface UseCounterOptions {\n  /** The max of count value */\n  max?: number;\n  /** The min of count value */\n  min?: number;\n}\n\n/** The use counter return type */\nexport interface UseCounterReturn {\n  /** Function to set a specific value to the counter */\n  set: Dispatch<SetStateAction<number>>;\n  /** The current count value */\n  value: number;\n  /** Function to decrement the counter */\n  dec: (value?: number) => void;\n  /** Function to increment the counter */\n  inc: (value?: number) => void;\n  /** Function to reset the counter to its initial value. */\n  reset: () => void;\n}\n\nexport interface UseCounter {\n  (initialValue?: number, options?: UseCounterOptions): UseCounterReturn;\n\n  (options: UseCounterOptions & { initialValue?: number }, initialValue?: never): UseCounterReturn;\n}\n\n/**\n * @name useCounter\n * @description - Hook that manages a counter\n * @category State\n *\n * @overload\n * @param {number} [initialValue=0] The initial number value\n * @param {number} [options.min=Number.NEGATIVE_INFINITY] The min of count value\n * @param {number} [options.max=Number.POSITIVE_INFINITY] The max of count value\n * @returns {UseCounterReturn} An object containing the current count and functions to interact with the counter\n\n * @overload\n * @param {number} [params.initialValue=0] The initial number value\n * @param {number} [params.min=Number.NEGATIVE_INFINITY] The min of count value\n * @param {number} [params.max=Number.POSITIVE_INFINITY] The max of count value\n * @returns {UseCounterReturn} An object containing the current count and functions to interact with the counter\n *\n * @example\n * const { count, dec, inc, reset, set } = useCounter(5);\n *\n * @example\n * const { count, dec, inc, reset, set } = useCounter({ initialValue: 5, min: 0, max: 10 });\n */\nexport const useCounter = ((...params: any[]) => {\n  const initialValue =\n    typeof params[0] === 'number'\n      ? params[0]\n      : (params[0] as UseCounterOptions & { initialValue?: number })?.initialValue;\n  const { max = Number.POSITIVE_INFINITY, min = Number.NEGATIVE_INFINITY } =\n    typeof params[0] === 'number'\n      ? ((params[1] ?? {}) as UseCounterOptions)\n      : ((params[0] ?? {}) as UseCounterOptions & { initialValue?: number });\n\n  const [value, setValue] = useState(initialValue ?? 0);\n\n  const inc = (value: number = 1) => {\n    setValue((prevValue) => {\n      if (typeof max === 'number' && prevValue === max) return prevValue;\n      return Math.max(Math.min(max, prevValue + value), min);\n    });\n  };\n\n  const dec = (value: number = 1) => {\n    setValue((prevValue) => {\n      if (typeof min === 'number' && prevValue === min) return prevValue;\n      return Math.min(Math.max(min, prevValue - value), max);\n    });\n  };\n\n  const reset = () => {\n    const value = initialValue ?? 0;\n    if (typeof max === 'number' && value > max) return setValue(max);\n    if (typeof min === 'number' && value < min) return setValue(min);\n    setValue(value);\n  };\n\n  const set = (value: SetStateAction<number>) => {\n    setValue((prevValue) => {\n      const updatedCount = Math.max(\n        min,\n        Math.min(max, typeof value === 'number' ? value : value(prevValue))\n      );\n\n      return updatedCount;\n    });\n  };\n\n  return { value, set, inc, dec, reset };\n}) as UseCounter;\n"],"names":["useCounter","params","initialValue","max","min","value","setValue","useState","prevValue"],"mappings":";AAuDO,MAAMA,IAAc,IAAIC,MAAkB;AAC/C,QAAMC,IACJ,OAAOD,EAAO,CAAC,KAAM,WACjBA,EAAO,CAAC,IACPA,EAAO,CAAC,GAAqD,cAC9D,EAAE,KAAAE,IAAM,OAAO,mBAAmB,KAAAC,IAAM,OAAO,kBAAA,IACnD,OAAOH,EAAO,CAAC,KAAM,WACfA,EAAO,CAAC,KAAK,CAAA,IACbA,EAAO,CAAC,KAAK,CAAA,GAEf,CAACI,GAAOC,CAAQ,IAAIC,EAASL,KAAgB,CAAC;AAkCpD,SAAO,EAAE,OAAAG,GAAO,KAXJ,CAACA,MAAkC;AAC7C,IAAAC,EAAS,CAACE,MACa,KAAK;AAAA,MACxBJ;AAAA,MACA,KAAK,IAAID,GAAK,OAAOE,KAAU,WAAWA,IAAQA,EAAMG,CAAS,CAAC;AAAA,IAAA,CAIrE;AAAA,EAAA,GAGkB,KAhCT,CAACH,IAAgB,MAAM;AACjC,IAAAC,EAAS,CAACE,MACJ,OAAOL,KAAQ,YAAYK,MAAcL,IAAYK,IAClD,KAAK,IAAI,KAAK,IAAIL,GAAKK,IAAYH,CAAK,GAAGD,CAAG,CACtD;AAAA,EAAA,GA4BuB,KAzBd,CAACC,IAAgB,MAAM;AACjC,IAAAC,EAAS,CAACE,MACJ,OAAOJ,KAAQ,YAAYI,MAAcJ,IAAYI,IAClD,KAAK,IAAI,KAAK,IAAIJ,GAAKI,IAAYH,CAAK,GAAGF,CAAG,CACtD;AAAA,EAAA,GAqB4B,OAlBjB,MAAM;AAClB,UAAME,IAAQH,KAAgB;AAC9B,QAAI,OAAOC,KAAQ,YAAYE,IAAQF,EAAK,QAAOG,EAASH,CAAG;AAC/D,QAAI,OAAOC,KAAQ,YAAYC,IAAQD,EAAK,QAAOE,EAASF,CAAG;AAC/D,IAAAE,EAASD,CAAK;AAAA,EAAA,EAce;AACjC;"}