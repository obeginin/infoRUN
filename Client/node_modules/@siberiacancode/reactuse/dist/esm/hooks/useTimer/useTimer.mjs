import { useState as l, useRef as m, useEffect as g } from "react";
import { useDidUpdate as y } from "../useDidUpdate/useDidUpdate.mjs";
const E = (s) => {
  const t = Math.ceil(s), u = Math.floor(t / (60 * 60 * 24)), c = Math.floor(t % (60 * 60 * 24) / (60 * 60)), e = Math.floor(t % (60 * 60) / 60);
  return {
    seconds: Math.floor(t % 60),
    minutes: e,
    hours: c,
    days: u
  };
}, j = (...s) => {
  const t = Math.max(s[0] ?? 0, 0), u = typeof s[1] == "object" ? s[1] : { onExpire: s[1] }, [c, e] = l(t > 0 && (u?.immediately ?? !0)), [i, n] = l(t), d = m(void 0), f = m(u);
  f.current = u ?? {}, y(() => {
    if (t <= 0) {
      e(!1), n(0);
      return;
    }
    e(!0), n(t);
  }, [t]), g(() => {
    if (!c) return;
    f.current?.onStart?.();
    const o = () => {
      n((r) => {
        f.current?.onTick?.(r);
        const a = r - 1;
        return a === 0 && (e(!1), f.current?.onExpire?.()), a;
      });
    };
    return d.current = setInterval(o, 1e3), () => {
      clearInterval(d.current);
    };
  }, [c]);
  const p = () => e(!1), h = () => {
    i <= 0 || e(!0);
  }, v = () => {
    i <= 0 || e(!c);
  }, M = (o, r = !0) => {
    n(o), r && e(!0);
  }, S = () => {
    t <= 0 || (e(!0), n(t));
  }, x = () => {
    e(!1), n(0);
  }, I = (o) => n((r) => r + o), T = (o) => {
    n((r) => {
      const a = r - o;
      return a <= 0 ? (e(!1), 0) : a;
    });
  };
  return {
    ...E(i),
    count: i,
    pause: p,
    active: c,
    resume: h,
    toggle: v,
    start: S,
    restart: M,
    clear: x,
    increase: I,
    decrease: T
  };
};
export {
  E as getTimeFromSeconds,
  j as useTimer
};
//# sourceMappingURL=useTimer.mjs.map
