import { useState as v, useRef as d, useEffect as l } from "react";
const y = (i) => {
  const t = typeof navigator < "u" && "wakeLock" in navigator, [o, r] = v(!1), e = d(void 0), u = i?.immediately ?? !1, a = i?.type ?? "screen", s = async (n) => {
    t && (e.current = await navigator.wakeLock.request(n ?? i?.type), e.current.addEventListener("release", () => {
      r(!1), e.current = void 0;
    }), r(!0));
  }, c = async () => {
    !t || !e.current || (await e.current.release(), e.current = void 0, r(!1));
  };
  return l(() => {
    if (!t || !u || document.visibilityState !== "visible" || a !== "screen")
      return;
    const n = async () => {
      await c(), await s(a);
    };
    return document.addEventListener("visibilitychange", n), () => {
      document.removeEventListener("visibilitychange", n);
    };
  }, [a]), { supported: t, active: o, request: s, release: c };
};
export {
  y as useWakeLock
};
//# sourceMappingURL=useWakeLock.mjs.map
