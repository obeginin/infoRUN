{"version":3,"file":"useOffsetPagination.mjs","sources":["../../../../src/hooks/useOffsetPagination/useOffsetPagination.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/** The use offset pagination return type */\nexport interface UseOffsetPaginationOptions {\n  /** The initial page number */\n  initialPage?: number;\n  /** The number of items per page */\n  pageSize?: number;\n  /** The total number of items */\n  total?: number;\n  /** The callback function to be invoked when page changes */\n  onPageChange?: ({ page, pageSize }: { page: number; pageSize: number }) => void;\n  /** The callback function to be invoked when page count changes */\n  onPageCountChange?: ({ page, pageSize }: { page: number; pageSize: number }) => void;\n  /** The callback function to be invoked when page size changes */\n  onPageSizeChange?: ({ page, pageSize }: { page: number; pageSize: number }) => void;\n}\n\n/** The use offset pagination return type */\nexport interface UseOffsetPaginationReturn {\n  /** The number of items per page */\n  currentPageSize: number;\n  /** Whether the current page is the first page */\n  isFirstPage: boolean;\n  /** Whether the current page is the last page */\n  isLastPage: boolean;\n  /** The current page number */\n  page: number;\n  /** The total number of pages */\n  pageCount: number;\n  /** The callback function to go to the next page */\n  next: () => void;\n  /** The callback function to go to the previous page */\n  prev: () => void;\n  /** The callback function to set the current page */\n  set: (page: number) => void;\n}\n\n/**\n * @name useOffsetPagination\n * @description - Hook that defines the logic when pagination\n * @category State\n *\n * @param {UseOffsetPaginationOptions} options - The options for the hook\n * @param {number} [options.total] - The total number of items\n * @param {number} [options.pageSize] - The number of items per page\n * @param {number} [options.initialPage] - The current page\n * @param {({ page, pageSize }: { page: number; pageSize: number }) => void} [options.onPageChange] - The callback function to be invoked when page changes\n * @param {({ page, pageSize }: { page: number; pageSize: number }) => void} [options.onPageCountChange] - The callback function to be invoked when page count changes\n * @param {({ page, pageSize }: { page: number; pageSize: number }) => void} [options.onPageSizeChange] - The callback function to be invoked when page size changes\n * @returns {UseOffsetPaginationReturn} - The state of the hook\n *\n * @example\n * const { currentPage, currentPageSize, pageCount, isFirstPage, isLastPage, prev, next } = useOffsetPagination({\n *  total: 100,\n *  pageSize: 10,\n *  page: 1,\n *  onPageChange: (page) => {},\n *  onPageCountChange: (pageCount) => {},\n *  onPageSizeChange: (pageSize) => {}\n * });\n */\nexport const useOffsetPagination = ({\n  total = Number.POSITIVE_INFINITY,\n  pageSize = 10,\n  initialPage = 1,\n  onPageChange = () => {},\n  onPageCountChange = () => {},\n  onPageSizeChange = () => {}\n}: UseOffsetPaginationOptions = {}): UseOffsetPaginationReturn => {\n  const [page, setPage] = useState(initialPage);\n\n  const onPageChangeRef = useRef(onPageChange);\n  const onPageCountChangeRef = useRef(onPageCountChange);\n  const onPageSizeChangeRef = useRef(onPageSizeChange);\n\n  onPageChangeRef.current = onPageChange;\n  onPageCountChangeRef.current = onPageCountChange;\n  onPageSizeChangeRef.current = onPageSizeChange;\n\n  const pageCount = Math.max(1, Math.ceil(total / pageSize));\n\n  const isFirstPage = page === 1;\n  const isLastPage = page === pageCount;\n\n  const next = () => {\n    if (isLastPage) return onPageChange({ page: pageCount, pageSize });\n\n    setPage((prevPage) => {\n      const page = prevPage + 1;\n      onPageChange({ page, pageSize });\n      return page;\n    });\n  };\n\n  const prev = () => {\n    if (isFirstPage) return onPageChange({ page: 1, pageSize });\n\n    setPage((prevPage) => {\n      const page = prevPage - 1;\n      onPageChange({ page, pageSize });\n      return page;\n    });\n  };\n\n  const set = (page: number) => {\n    setPage(page);\n    onPageChange({ page, pageSize });\n  };\n\n  useEffect(() => {\n    onPageCountChangeRef.current({ page, pageSize });\n  }, [pageCount]);\n\n  useEffect(() => {\n    onPageSizeChangeRef.current({ page, pageSize });\n  }, [pageSize]);\n\n  return {\n    page,\n    set,\n    currentPageSize: pageSize,\n    isFirstPage,\n    isLastPage,\n    pageCount,\n    next,\n    prev\n  };\n};\n"],"names":["useOffsetPagination","total","pageSize","initialPage","onPageChange","onPageCountChange","onPageSizeChange","page","setPage","useState","onPageChangeRef","useRef","onPageCountChangeRef","onPageSizeChangeRef","pageCount","isFirstPage","isLastPage","next","prevPage","prev","set","useEffect"],"mappings":";AA8DO,MAAMA,IAAsB,CAAC;AAAA,EAClC,OAAAC,IAAQ,OAAO;AAAA,EACf,UAAAC,IAAW;AAAA,EACX,aAAAC,IAAc;AAAA,EACd,cAAAC,IAAe,MAAM;AAAA,EAAA;AAAA,EACrB,mBAAAC,IAAoB,MAAM;AAAA,EAAA;AAAA,EAC1B,kBAAAC,IAAmB,MAAM;AAAA,EAAA;AAC3B,IAAgC,OAAkC;AAChE,QAAM,CAACC,GAAMC,CAAO,IAAIC,EAASN,CAAW,GAEtCO,IAAkBC,EAAOP,CAAY,GACrCQ,IAAuBD,EAAON,CAAiB,GAC/CQ,IAAsBF,EAAOL,CAAgB;AAEnD,EAAAI,EAAgB,UAAUN,GAC1BQ,EAAqB,UAAUP,GAC/BQ,EAAoB,UAAUP;AAE9B,QAAMQ,IAAY,KAAK,IAAI,GAAG,KAAK,KAAKb,IAAQC,CAAQ,CAAC,GAEnDa,IAAcR,MAAS,GACvBS,IAAaT,MAASO,GAEtBG,IAAO,MAAM;AACjB,QAAID,EAAY,QAAOZ,EAAa,EAAE,MAAMU,GAAW,UAAAZ,GAAU;AAEjE,IAAAM,EAAQ,CAACU,MAAa;AACpB,YAAMX,IAAOW,IAAW;AACxB,aAAAd,EAAa,EAAE,MAAAG,GAAM,UAAAL,EAAA,CAAU,GACxBK;AAAAA,IAAA,CACR;AAAA,EAAA,GAGGY,IAAO,MAAM;AACjB,QAAIJ,EAAa,QAAOX,EAAa,EAAE,MAAM,GAAG,UAAAF,GAAU;AAE1D,IAAAM,EAAQ,CAACU,MAAa;AACpB,YAAMX,IAAOW,IAAW;AACxB,aAAAd,EAAa,EAAE,MAAAG,GAAM,UAAAL,EAAA,CAAU,GACxBK;AAAAA,IAAA,CACR;AAAA,EAAA,GAGGa,IAAM,CAACb,MAAiB;AAC5B,IAAAC,EAAQD,CAAI,GACZH,EAAa,EAAE,MAAAG,GAAM,UAAAL,EAAA,CAAU;AAAA,EAAA;AAGjC,SAAAmB,EAAU,MAAM;AACd,IAAAT,EAAqB,QAAQ,EAAE,MAAAL,GAAM,UAAAL,EAAA,CAAU;AAAA,EAAA,GAC9C,CAACY,CAAS,CAAC,GAEdO,EAAU,MAAM;AACd,IAAAR,EAAoB,QAAQ,EAAE,MAAAN,GAAM,UAAAL,EAAA,CAAU;AAAA,EAAA,GAC7C,CAACA,CAAQ,CAAC,GAEN;AAAA,IACL,MAAAK;AAAA,IACA,KAAAa;AAAA,IACA,iBAAiBlB;AAAA,IACjB,aAAAa;AAAA,IACA,YAAAC;AAAA,IACA,WAAAF;AAAA,IACA,MAAAG;AAAA,IACA,MAAAE;AAAA,EAAA;AAEJ;"}