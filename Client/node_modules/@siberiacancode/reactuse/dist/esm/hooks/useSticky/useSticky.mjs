import { useState as m, useEffect as v } from "react";
import { useRefState as L } from "../useRefState/useRefState.mjs";
import { isTarget as p } from "../../utils/helpers/isTarget.mjs";
import { getElement as d } from "../../utils/helpers/getElement.mjs";
const T = (...n) => {
  const o = p(n[0]) ? n[0] : void 0, r = o ? n[1] : n[0], s = r?.axis ?? "vertical", i = L(), [f, u] = m(!1);
  return v(() => {
    if (!o && !i.state) return;
    const c = o ? d(o) : i.current;
    if (!c) return;
    const t = r?.root ? d(r.root) : document, a = c.getBoundingClientRect().top + t.scrollTop - t.getBoundingClientRect().top, g = c.getBoundingClientRect().left + t.scrollLeft - t.getBoundingClientRect().left, e = () => {
      if (s === "vertical") {
        const l = t.scrollTop;
        u(l >= a);
      }
      if (s === "horizontal") {
        const l = t.scrollLeft;
        u(l >= g);
      }
    };
    return t.addEventListener("scroll", e), window.addEventListener("resize", e), window.addEventListener("orientationchange", e), e(), () => {
      t.removeEventListener("scroll", e), window.removeEventListener("resize", e), window.removeEventListener("orientationchange", e);
    };
  }, [o, i.state, s, r?.root]), o ? f : {
    stuck: f,
    ref: i
  };
};
export {
  T as useSticky
};
//# sourceMappingURL=useSticky.mjs.map
