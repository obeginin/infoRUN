import { useState as m, useEffect as U } from "react";
import { getUrlSearchParams as E, URL_SEARCH_PARAMS_EVENT as P, createQueryString as v, dispatchUrlSearchParamsEvent as z } from "../useUrlSearchParam/useUrlSearchParam.mjs";
const V = (t) => {
  const i = typeof t == "object" && t && ("serializer" in t || "deserializer" in t || "initialValue" in t || "mode" in t || "write" in t) ? t : void 0, c = i ? i?.initialValue : t, { mode: n = "history", write: u = "replace" } = i, f = (e) => i?.serializer ? i.serializer(e) : typeof e == "string" ? e : JSON.stringify(e), p = (e) => {
    if (i?.deserializer) return i.deserializer(e);
    if (e !== "undefined")
      try {
        return JSON.parse(e);
      } catch {
        return e;
      }
  }, h = (e, r, s = "replace") => {
    const o = new URLSearchParams();
    Object.entries(r).forEach(([y, d]) => {
      Array.isArray(d) ? d.forEach((g) => o.set(y, f(g))) : o.set(y, f(d));
    });
    const S = v(o, e);
    return s === "replace" && window.history.replaceState({}, "", S), s === "push" && window.history.pushState({}, "", S), o;
  }, a = (e) => typeof e == "string" ? a(new URLSearchParams(e)) : e instanceof URLSearchParams ? Array.from(e.entries()).reduce(
    (r, [s, o]) => (r[s] = p(o), r),
    {}
  ) : e, [l, w] = m(() => {
    if (typeof window > "u") return c ?? {};
    const e = E(n), r = {
      ...c && a(c),
      ...a(e)
    };
    return h(n, r, u), r;
  }), L = (e, r) => {
    const s = h(
      n,
      { ...l, ...e },
      r?.write ?? u
    );
    w(a(s)), z();
  };
  return U(() => {
    const e = () => {
      const r = E(n);
      w(a(r));
    };
    return window.addEventListener(P, e), window.addEventListener("popstate", e), n !== "history" && window.addEventListener("hashchange", e), () => {
      window.removeEventListener(P, e), window.removeEventListener("popstate", e), n !== "history" && window.removeEventListener("hashchange", e);
    };
  }, [n]), {
    value: l,
    set: L
  };
};
export {
  v as createQueryString,
  z as dispatchUrlSearchParamsEvent,
  E as getUrlSearchParams,
  V as useUrlSearchParams
};
//# sourceMappingURL=useUrlSearchParams.mjs.map
