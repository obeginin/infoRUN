{"version":3,"file":"useUrlSearchParams.mjs","sources":["../../../../src/hooks/useUrlSearchParams/useUrlSearchParams.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport {\n  createQueryString,\n  dispatchUrlSearchParamsEvent,\n  getUrlSearchParams,\n  URL_SEARCH_PARAMS_EVENT\n} from '../useUrlSearchParam/useUrlSearchParam';\n\n/** The url params type */\nexport type UrlParams = Record<string, any>;\n\n/** The url search params mod */\nexport type UrlSearchParamsMode = 'hash-params' | 'hash' | 'history';\n\n/** The use url search params set options type */\nexport interface UseUrlSearchParamsSetOptions {\n  /** The mode to use for writing to the URL */\n  write?: 'push' | 'replace';\n}\n\n/* The use search params initial value type */\nexport type UseUrlSearchParamsInitialValue<Value> = (() => Value) | Value;\n\n/** The use url search params options type */\nexport interface UseUrlSearchParamsOptions<Value> {\n  /* The initial value of the url search params */\n  initialValue?: UseUrlSearchParamsInitialValue<string | URLSearchParams | Value>;\n  /** The mode to use for writing to the URL */\n  mode?: UrlSearchParamsMode;\n  /** The mode to use for writing to the URL  */\n  write?: 'push' | 'replace';\n  /* The deserializer function to be invoked */\n  deserializer?: (value: string) => Value[keyof Value];\n  /* The serializer function to be invoked */\n  serializer?: (value: Value[keyof Value]) => string;\n}\n\n/** The use url search params return type */\nexport interface UseUrlSearchParamsReturn<Value> {\n  /** The value of the url search params */\n  value: Value;\n  /** The set function */\n  set: (value: Partial<Value>, options?: UseUrlSearchParamsSetOptions) => void;\n}\n\nexport interface UseUrlSearchParams {\n  <Value>(\n    key: string,\n    options: UseUrlSearchParamsOptions<Value> & {\n      initialValue: UseUrlSearchParamsInitialValue<Value>;\n    }\n  ): UseUrlSearchParamsReturn<Value>;\n\n  <Value>(options?: UseUrlSearchParamsOptions<Value>): UseUrlSearchParamsReturn<Value | undefined>;\n\n  <Value>(initialValue: UseUrlSearchParamsInitialValue<Value>): UseUrlSearchParamsReturn<Value>;\n\n  <Value>(key: string): UseUrlSearchParamsReturn<Value | undefined>;\n}\n\n/**\n * @name useUrlSearchParams\n * @description - Hook that provides reactive URLSearchParams\n * @category State\n *\n * @overload\n * @template Value The type of the url param values\n * @param {UseUrlSearchParamsOptions<Value> & { initialValue: UseUrlSearchParamsInitialValue<Value> }} options The options object with required initialValue\n * @param {UseUrlSearchParamsInitialValue<Value>} [options.initialValue] The initial value for the url params\n * @param {UrlSearchParamsMode} [options.mode='history'] The mode to use for the URL ('history' | 'hash-params' | 'hash')\n * @param {'push' | 'replace'} [options.write='replace'] The mode to use for writing to the URL\n * @param {(value: Value[keyof Value]) => string} [options.serializer] Custom serializer function to convert value to string\n * @param {(value: string) => Value[keyof Value]} [options.deserializer] Custom deserializer function to convert string to value\n * @returns {UseUrlSearchParamsReturn<Value>} The object with value and function for change value\n *\n * @example\n * const { value, set } = useUrlSearchParams({ initialValue: { page: 1 } });\n *\n * @overload\n * @template Value The type of the url param values\n * @param {UseUrlSearchParamsInitialValue<Value>} [initialValue] The initial value for the url params\n * @returns {UseUrlSearchParamsReturn<Value>} The object with value and function for change value\n *\n * @example\n * const { value, set } = useUrlSearchParams({ page: 1 });\n */\nexport const useUrlSearchParams = (<Value extends UrlParams>(\n  params: any\n): UseUrlSearchParamsReturn<Value> => {\n  const options = (\n    typeof params === 'object' &&\n    params &&\n    ('serializer' in params ||\n      'deserializer' in params ||\n      'initialValue' in params ||\n      'mode' in params ||\n      'write' in params)\n      ? params\n      : undefined\n  ) as UseUrlSearchParamsOptions<Value>;\n  const initialValue = (\n    options ? options?.initialValue : params\n  ) as UseUrlSearchParamsInitialValue<Value>;\n\n  const { mode = 'history', write: writeMode = 'replace' } = options;\n\n  const serializer = (value: Value[keyof Value]) => {\n    if (options?.serializer) return options.serializer(value);\n    if (typeof value === 'string') return value;\n    return JSON.stringify(value);\n  };\n\n  const deserializer = (value: string) => {\n    if (options?.deserializer) return options.deserializer(value);\n    if (value === 'undefined') return undefined as unknown as Value[keyof Value];\n\n    try {\n      return JSON.parse(value) as Value;\n    } catch {\n      return value as Value[keyof Value];\n    }\n  };\n\n  const setUrlSearchParams = <Value extends UrlParams>(\n    mode: UrlSearchParamsMode,\n    value: Partial<Value>,\n    write: 'push' | 'replace' = 'replace'\n  ) => {\n    const urlSearchParams = new URLSearchParams();\n\n    Object.entries(value).forEach(([key, param]) => {\n      if (Array.isArray(param)) {\n        param.forEach((value) => urlSearchParams.set(key, serializer(value)));\n      } else {\n        urlSearchParams.set(key, serializer(param));\n      }\n    });\n\n    const query = createQueryString(urlSearchParams, mode);\n    if (write === 'replace') window.history.replaceState({}, '', query);\n    if (write === 'push') window.history.pushState({}, '', query);\n\n    return urlSearchParams;\n  };\n\n  const getParsedUrlSearchParams = (searchParams: string | UrlParams | URLSearchParams) => {\n    if (typeof searchParams === 'string') {\n      return getParsedUrlSearchParams(new URLSearchParams(searchParams));\n    }\n\n    if (searchParams instanceof URLSearchParams) {\n      return Array.from(searchParams.entries()).reduce(\n        (acc, [key, value]) => {\n          acc[key] = deserializer(value);\n          return acc;\n        },\n        {} as Record<string, any>\n      );\n    }\n\n    return searchParams;\n  };\n\n  const [value, setValue] = useState<Value>(() => {\n    if (typeof window === 'undefined') return (initialValue ?? {}) as Value;\n\n    const urlSearchParams = getUrlSearchParams(mode);\n    const value = {\n      ...(initialValue && getParsedUrlSearchParams(initialValue)),\n      ...getParsedUrlSearchParams(urlSearchParams)\n    } as Value;\n\n    setUrlSearchParams(mode, value, writeMode);\n\n    return value;\n  });\n\n  const set = (params: Partial<Value>, options?: UseUrlSearchParamsSetOptions) => {\n    const searchParams = setUrlSearchParams(\n      mode,\n      { ...value, ...params },\n      options?.write ?? writeMode\n    );\n    setValue(getParsedUrlSearchParams(searchParams) as Value);\n    dispatchUrlSearchParamsEvent();\n  };\n\n  useEffect(() => {\n    const onParamsChange = () => {\n      const searchParams = getUrlSearchParams(mode);\n      setValue(getParsedUrlSearchParams(searchParams) as Value);\n    };\n\n    window.addEventListener(URL_SEARCH_PARAMS_EVENT, onParamsChange);\n    window.addEventListener('popstate', onParamsChange);\n    if (mode !== 'history') window.addEventListener('hashchange', onParamsChange);\n\n    return () => {\n      window.removeEventListener(URL_SEARCH_PARAMS_EVENT, onParamsChange);\n      window.removeEventListener('popstate', onParamsChange);\n      if (mode !== 'history') window.removeEventListener('hashchange', onParamsChange);\n    };\n  }, [mode]);\n\n  return {\n    value,\n    set\n  };\n}) as UseUrlSearchParams;\n\nexport { createQueryString, dispatchUrlSearchParamsEvent, getUrlSearchParams };\n"],"names":["useUrlSearchParams","params","options","initialValue","mode","writeMode","serializer","value","deserializer","setUrlSearchParams","write","urlSearchParams","key","param","query","createQueryString","getParsedUrlSearchParams","searchParams","acc","setValue","useState","getUrlSearchParams","set","dispatchUrlSearchParamsEvent","useEffect","onParamsChange","URL_SEARCH_PARAMS_EVENT"],"mappings":"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"}