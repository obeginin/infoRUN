import { useState as d, useRef as h, useEffect as v } from "react";
import { useRefState as a } from "../useRefState/useRefState.mjs";
import { isTarget as m } from "../../utils/helpers/isTarget.mjs";
import { getElement as b } from "../../utils/helpers/getElement.mjs";
const y = (...e) => {
  const n = m(e[0]) ? e[0] : void 0, t = n ? typeof e[1] == "object" ? e[1] : { onChange: e[1] } : typeof e[0] == "object" ? e[0] : { onChange: e[0] }, c = t?.onChange, s = t?.enabled ?? !0, [o, g] = d(), r = a(), i = h(c);
  return i.current = c, v(() => {
    if (!s || !n && !r.state) return;
    const f = n ? b(n) : r.current;
    if (!f) return;
    const u = new IntersectionObserver(
      ([l]) => {
        g(l), i.current?.(l);
      },
      {
        ...t,
        root: t?.root ? b(t.root) : document
      }
    );
    return u.observe(f), () => {
      u.disconnect();
    };
  }, [n, r.state, t?.rootMargin, t?.threshold, t?.root, s]), n ? { entry: o, inView: !!o?.isIntersecting } : {
    ref: r,
    entry: o,
    inView: !!o?.isIntersecting
  };
};
export {
  y as useIntersectionObserver
};
//# sourceMappingURL=useIntersectionObserver.mjs.map
