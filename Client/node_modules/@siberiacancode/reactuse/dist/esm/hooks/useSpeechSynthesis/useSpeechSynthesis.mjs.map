{"version":3,"file":"useSpeechSynthesis.mjs","sources":["../../../../src/hooks/useSpeechSynthesis/useSpeechSynthesis.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/** The use speech synthesis status type */\nexport type UseSpeechSynthesisStatus = 'end' | 'init' | 'pause' | 'play';\n\n/** The use speech synthesis options type */\nexport interface UseSpeechSynthesisOptions {\n  /** Language for SpeechSynthesis */\n  lang?: string;\n  /** Gets and sets the pitch at which the utterance will be spoken at. */\n  pitch?: number;\n  /** Gets and sets the speed at which the utterance will be spoken at. */\n  rate?: number;\n  /** The text to be spoken */\n  text?: string;\n  /** Gets and sets the voice that will be used to speak the utterance. */\n  voice?: SpeechSynthesisVoice | null;\n  /** Gets and sets the volume that the utterance will be spoken at. */\n  volume?: number;\n}\n\n/** The use speech synthesis return type */\nexport interface UseSpeechSynthesisReturn {\n  /** Any error that occurred during speech synthesis. */\n  error: SpeechSynthesisErrorEvent | undefined;\n  /** Indicates if speech is currently playing. */\n  playing: boolean;\n  /** The current status of speech synthesis. */\n  status: UseSpeechSynthesisStatus;\n  /** Indicates if the SpeechSynthesis API is supported in the current environment. */\n  supported: boolean;\n  /** The SpeechSynthesisUtterance instance. */\n  utterance: SpeechSynthesisUtterance | null;\n  /** Function to pause speech synthesis. */\n  pause: () => void;\n  /** Function to resume speech synthesis. */\n  resume: () => void;\n  /** Function to start speech synthesis. */\n  speak: () => void;\n  /** Function to stop speech synthesis. */\n  stop: () => void;\n  /** Function to toggle between play and pause. */\n  toggle: (value?: boolean) => void;\n}\n\n/**\n * @name useSpeechSynthesis\n * @description - Hook that provides speech synthesis functionality\n * @category Browser\n *\n * @browserapi SpeechSynthesis https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis\n *\n * @params {string} [options.text] - The text to be spoken\n * @params {string} [options.lang] - The language to be spoken\n * @params {number} [options.pitch] - The pitch to be spoken\n * @params {number} [options.rate] - The rate to be spoken\n * @params {SpeechSynthesisVoice} [options.voice] - The voice to be spoken\n * @params {number} [options.volume] - The volume to be spoken\n * @returns {UseSpeechSynthesisReturn} An object containing the speech synthesis state and control methods\n *\n * @example\n * const { supported, playing, status, utterance, error, stop, toggle, speak, resume, pause } = useSpeechSynthesis();\n */\nexport const useSpeechSynthesis = (\n  options: UseSpeechSynthesisOptions = {}\n): UseSpeechSynthesisReturn => {\n  const supported = typeof window !== 'undefined' && 'speechSynthesis' in window;\n\n  const { text = '', lang = 'en-US', pitch = 1, rate = 1, voice = null, volume = 1 } = options;\n\n  const [playing, setPlaying] = useState(false);\n  const [status, setStatus] = useState<UseSpeechSynthesisStatus>('init');\n  const [error, setError] = useState<SpeechSynthesisErrorEvent>();\n  const speechSynthesisUtteranceRef = useRef<SpeechSynthesisUtterance | null>(null);\n\n  const bindSpeechSynthesisUtterance = (speechSynthesisUtterance: SpeechSynthesisUtterance) => {\n    speechSynthesisUtterance.lang = lang;\n    speechSynthesisUtterance.pitch = pitch;\n    speechSynthesisUtterance.rate = rate;\n    speechSynthesisUtterance.volume = volume;\n    speechSynthesisUtterance.voice = voice;\n\n    speechSynthesisUtterance.onstart = () => {\n      setPlaying(true);\n      setStatus('play');\n    };\n\n    speechSynthesisUtterance.onpause = () => {\n      setPlaying(false);\n      setStatus('pause');\n    };\n\n    speechSynthesisUtterance.onresume = () => {\n      setPlaying(true);\n      setStatus('play');\n    };\n\n    speechSynthesisUtterance.onend = () => {\n      setPlaying(false);\n      setStatus('end');\n    };\n\n    speechSynthesisUtterance.onerror = (event) => {\n      setPlaying(false);\n      setError(event);\n    };\n  };\n\n  useEffect(() => {\n    if (!supported) return;\n\n    const speechSynthesisUtterance = new SpeechSynthesisUtterance(text);\n    bindSpeechSynthesisUtterance(speechSynthesisUtterance);\n    speechSynthesisUtteranceRef.current = speechSynthesisUtterance;\n\n    return () => {\n      window.speechSynthesis?.cancel();\n    };\n  }, [text, lang, pitch, rate, voice, volume]);\n\n  const speak = (text?: string) => {\n    if (!supported) return;\n\n    if (text) {\n      speechSynthesisUtteranceRef.current = new SpeechSynthesisUtterance(text);\n      bindSpeechSynthesisUtterance(speechSynthesisUtteranceRef.current);\n    }\n\n    window.speechSynthesis?.cancel();\n    if (speechSynthesisUtteranceRef.current)\n      window.speechSynthesis?.speak(speechSynthesisUtteranceRef.current);\n  };\n\n  const stop = () => {\n    if (!supported) return;\n\n    window.speechSynthesis?.cancel();\n    setPlaying(false);\n  };\n\n  const toggle = (value = !playing) => {\n    if (!supported) return;\n\n    if (value) {\n      window.speechSynthesis?.resume();\n    } else {\n      window.speechSynthesis?.pause();\n    }\n    setPlaying(value);\n  };\n\n  const resume = () => {\n    setPlaying(true);\n    window.speechSynthesis?.resume();\n  };\n\n  const pause = () => {\n    setPlaying(false);\n    window.speechSynthesis?.pause();\n  };\n\n  return {\n    supported,\n    playing,\n    status,\n    utterance: speechSynthesisUtteranceRef.current,\n    error,\n\n    stop,\n    toggle,\n    speak,\n    resume,\n    pause\n  };\n};\n"],"names":["useSpeechSynthesis","options","supported","text","lang","pitch","rate","voice","volume","playing","setPlaying","useState","status","setStatus","error","setError","speechSynthesisUtteranceRef","useRef","bindSpeechSynthesisUtterance","speechSynthesisUtterance","event","useEffect","speak","stop","toggle","value","resume","pause"],"mappings":";AA+DO,MAAMA,IAAqB,CAChCC,IAAqC,OACR;AAC7B,QAAMC,IAAY,OAAO,SAAW,OAAe,qBAAqB,QAElE,EAAE,MAAAC,IAAO,IAAI,MAAAC,IAAO,SAAS,OAAAC,IAAQ,GAAG,MAAAC,IAAO,GAAG,OAAAC,IAAQ,MAAM,QAAAC,IAAS,MAAMP,GAE/E,CAACQ,GAASC,CAAU,IAAIC,EAAS,EAAK,GACtC,CAACC,GAAQC,CAAS,IAAIF,EAAmC,MAAM,GAC/D,CAACG,GAAOC,CAAQ,IAAIJ,EAAA,GACpBK,IAA8BC,EAAwC,IAAI,GAE1EC,IAA+B,CAACC,MAAuD;AAC3F,IAAAA,EAAyB,OAAOf,GAChCe,EAAyB,QAAQd,GACjCc,EAAyB,OAAOb,GAChCa,EAAyB,SAASX,GAClCW,EAAyB,QAAQZ,GAEjCY,EAAyB,UAAU,MAAM;AACvC,MAAAT,EAAW,EAAI,GACfG,EAAU,MAAM;AAAA,IAAA,GAGlBM,EAAyB,UAAU,MAAM;AACvC,MAAAT,EAAW,EAAK,GAChBG,EAAU,OAAO;AAAA,IAAA,GAGnBM,EAAyB,WAAW,MAAM;AACxC,MAAAT,EAAW,EAAI,GACfG,EAAU,MAAM;AAAA,IAAA,GAGlBM,EAAyB,QAAQ,MAAM;AACrC,MAAAT,EAAW,EAAK,GAChBG,EAAU,KAAK;AAAA,IAAA,GAGjBM,EAAyB,UAAU,CAACC,MAAU;AAC5C,MAAAV,EAAW,EAAK,GAChBK,EAASK,CAAK;AAAA,IAAA;AAAA,EAChB;AAGF,EAAAC,EAAU,MAAM;AACd,QAAI,CAACnB,EAAW;AAEhB,UAAMiB,IAA2B,IAAI,yBAAyBhB,CAAI;AAClE,WAAAe,EAA6BC,CAAwB,GACrDH,EAA4B,UAAUG,GAE/B,MAAM;AACX,aAAO,iBAAiB,OAAA;AAAA,IAAO;AAAA,EACjC,GACC,CAAChB,GAAMC,GAAMC,GAAOC,GAAMC,GAAOC,CAAM,CAAC;AAE3C,QAAMc,IAAQ,CAACnB,MAAkB;AAC/B,IAAKD,MAEDC,MACFa,EAA4B,UAAU,IAAI,yBAAyBb,CAAI,GACvEe,EAA6BF,EAA4B,OAAO,IAGlE,OAAO,iBAAiB,OAAA,GACpBA,EAA4B,WAC9B,OAAO,iBAAiB,MAAMA,EAA4B,OAAO;AAAA,EAAA,GAG/DO,IAAO,MAAM;AACjB,IAAKrB,MAEL,OAAO,iBAAiB,OAAA,GACxBQ,EAAW,EAAK;AAAA,EAAA,GAGZc,IAAS,CAACC,IAAQ,CAAChB,MAAY;AACnC,IAAKP,MAEDuB,IACF,OAAO,iBAAiB,OAAA,IAExB,OAAO,iBAAiB,MAAA,GAE1Bf,EAAWe,CAAK;AAAA,EAAA,GAGZC,IAAS,MAAM;AACnB,IAAAhB,EAAW,EAAI,GACf,OAAO,iBAAiB,OAAA;AAAA,EAAO,GAG3BiB,IAAQ,MAAM;AAClB,IAAAjB,EAAW,EAAK,GAChB,OAAO,iBAAiB,MAAA;AAAA,EAAM;AAGhC,SAAO;AAAA,IACL,WAAAR;AAAA,IACA,SAAAO;AAAA,IACA,QAAAG;AAAA,IACA,WAAWI,EAA4B;AAAA,IACvC,OAAAF;AAAA,IAEA,MAAAS;AAAA,IACA,QAAAC;AAAA,IACA,OAAAF;AAAA,IACA,QAAAI;AAAA,IACA,OAAAC;AAAA,EAAA;AAEJ;"}