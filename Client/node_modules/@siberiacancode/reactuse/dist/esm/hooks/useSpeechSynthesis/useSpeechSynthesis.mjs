import { useState as o, useRef as b, useEffect as x } from "react";
const j = (d = {}) => {
  const t = typeof window < "u" && "speechSynthesis" in window, { text: u = "", lang: i = "en-US", pitch: c = 1, rate: a = 1, voice: p = null, volume: l = 1 } = d, [w, n] = o(!1), [h, r] = o("init"), [S, y] = o(), s = b(null), f = (e) => {
    e.lang = i, e.pitch = c, e.rate = a, e.volume = l, e.voice = p, e.onstart = () => {
      n(!0), r("play");
    }, e.onpause = () => {
      n(!1), r("pause");
    }, e.onresume = () => {
      n(!0), r("play");
    }, e.onend = () => {
      n(!1), r("end");
    }, e.onerror = (R) => {
      n(!1), y(R);
    };
  };
  x(() => {
    if (!t) return;
    const e = new SpeechSynthesisUtterance(u);
    return f(e), s.current = e, () => {
      window.speechSynthesis?.cancel();
    };
  }, [u, i, c, a, p, l]);
  const m = (e) => {
    t && (e && (s.current = new SpeechSynthesisUtterance(e), f(s.current)), window.speechSynthesis?.cancel(), s.current && window.speechSynthesis?.speak(s.current));
  }, g = () => {
    t && (window.speechSynthesis?.cancel(), n(!1));
  }, v = (e = !w) => {
    t && (e ? window.speechSynthesis?.resume() : window.speechSynthesis?.pause(), n(e));
  }, k = () => {
    n(!0), window.speechSynthesis?.resume();
  }, E = () => {
    n(!1), window.speechSynthesis?.pause();
  };
  return {
    supported: t,
    playing: w,
    status: h,
    utterance: s.current,
    error: S,
    stop: g,
    toggle: v,
    speak: m,
    resume: k,
    pause: E
  };
};
export {
  j as useSpeechSynthesis
};
//# sourceMappingURL=useSpeechSynthesis.mjs.map
