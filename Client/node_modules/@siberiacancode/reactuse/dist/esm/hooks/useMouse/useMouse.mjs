import { useState as P, useEffect as g } from "react";
import { useRefState as p } from "../useRefState/useRefState.mjs";
import { isTarget as E } from "../../utils/helpers/isTarget.mjs";
import { getElement as x } from "../../utils/helpers/getElement.mjs";
const S = (...l) => {
  const o = E(l[0]) ? l[0] : void 0, [m, n] = P({
    x: 0,
    y: 0,
    elementX: 0,
    elementY: 0,
    elementPositionX: 0,
    elementPositionY: 0,
    clientX: 0,
    clientY: 0
  }), i = p();
  return g(() => {
    const c = (e) => {
      const X = o ? x(o) : i.current, t = {
        x: e.pageX,
        y: e.pageY,
        clientX: e.clientX,
        clientY: e.clientY
      };
      if (X) {
        const { left: s, top: u } = X.getBoundingClientRect(), Y = s + window.scrollX, d = u + window.scrollY, a = e.pageX - Y, f = e.pageY - d;
        t.elementX = a, t.elementY = f, t.elementPositionX = Y, t.elementPositionY = d, n((w) => ({
          ...w,
          ...t
        }));
      } else
        t.elementX = e.pageX, t.elementY = e.pageY, t.elementPositionX = 0, t.elementPositionY = 0, n((s) => ({
          ...s,
          ...t
        }));
    }, r = () => {
      n((e) => ({
        ...e,
        x: e.x + window.scrollX - e.elementPositionX,
        y: e.y + window.scrollY - e.elementPositionY,
        elementPositionX: window.scrollX,
        elementPositionY: window.scrollY
      }));
    };
    return document.addEventListener("scroll", r, { passive: !0 }), document.addEventListener("mousemove", c), () => {
      document.removeEventListener("scroll", r), document.removeEventListener("mousemove", c);
    };
  }, [i.state, o]), o ? m : {
    ref: i,
    ...m
  };
};
export {
  S as useMouse
};
//# sourceMappingURL=useMouse.mjs.map
