import { useRef as m, useEffect as L } from "react";
import { useEvent as k } from "../useEvent/useEvent.mjs";
import { useRefState as w } from "../useRefState/useRefState.mjs";
import { isTarget as p } from "../../utils/helpers/isTarget.mjs";
import { getElement as E } from "../../utils/helpers/getElement.mjs";
const h = (t, o) => t.toLowerCase().split(/[+_,\-]/g).map((r) => r.trim()).every(
  (r) => o.find(
    (s) => r === s.code.toLocaleLowerCase() || r === s.key.toLocaleLowerCase() || r === s.alias.toLocaleLowerCase()
  )
), H = (...t) => {
  const o = p(t[0]) ? t[0] : void 0, r = o ? t[1] : t[0], s = o ? t[2] : t[1], d = o ? t[3] : t[2], i = w(window), n = m([]), u = d?.enabled ?? !0, f = k((e) => {
    if (!u || n.current.some(({ code: c }) => c === e.code)) return;
    const a = d?.alias?.[e.key] ?? e.code, y = [...n.current, { key: e.key, code: e.code, alias: a }];
    n.current = y, r.split(",").map((c) => c.trim()).some((c) => h(c, y)) && (e.preventDefault(), s(e));
  }), l = k((e) => {
    u && (n.current = n.current.filter(({ code: a }) => a !== e.code));
  });
  if (L(() => {
    if (n.current = [], !o && !i.state && !u) return;
    const e = o ? E(o) : i.current;
    if (e)
      return e.addEventListener("keydown", f), e.addEventListener("keyup", l), () => {
        e.removeEventListener("keydown", f), e.removeEventListener("keyup", l);
      };
  }, [o, i.state, u, r, f, l]), !o)
    return i;
};
export {
  h as isHotkeyMatch,
  H as useHotkeys
};
//# sourceMappingURL=useHotkeys.mjs.map
