{"version":3,"file":"useTextSelection.mjs","sources":["../../../../src/hooks/useTextSelection/useTextSelection.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { useRerender } from '../useRerender/useRerender';\n\nexport const getRangesSelection = (selection: Selection) => {\n  const rangeCount = selection.rangeCount ?? 0;\n  return Array.from({ length: rangeCount }, (_, i) => selection.getRangeAt(i));\n};\n\n/** The use text selection return type */\nexport interface UseTextSelectionReturn {\n  /** The current selection ranges */\n  ranges: Range[];\n  /** The current selection rects */\n  rects: DOMRect[];\n  /** The current selection */\n  selection: Selection | null;\n  /** The current selection text */\n  text: string;\n}\n\n/**\n * @name useTextSelection\n * @description - Hook that manages the text selection\n * @category Sensors\n *\n * @browserapi document.getSelection https://developer.mozilla.org/en-US/docs/Web/API/Document/getSelection\n *\n * @returns {UseTextSelectionReturn} An object containing the current text selection\n *\n * @example\n * const selection = useTextSelection();\n */\nexport const useTextSelection = (): UseTextSelectionReturn => {\n  const rerender = useRerender();\n  const [selection, setSelection] = useState<Selection | null>(\n    typeof document !== 'undefined' ? document.getSelection() : null\n  );\n\n  useEffect(() => {\n    const onSelectionChange = () => {\n      setSelection(document.getSelection());\n      rerender();\n    };\n\n    document.addEventListener('selectionchange', onSelectionChange);\n    return () => document.removeEventListener('selectionchange', onSelectionChange);\n  }, []);\n\n  const text = selection?.toString() ?? '';\n  const ranges = selection ? getRangesSelection(selection) : [];\n  const rects = ranges.map((range) => range.getBoundingClientRect());\n\n  return {\n    text,\n    ranges,\n    rects,\n    selection\n  };\n};\n"],"names":["getRangesSelection","selection","rangeCount","_","i","useTextSelection","rerender","useRerender","setSelection","useState","useEffect","onSelectionChange","text","ranges","rects","range"],"mappings":";;AAIO,MAAMA,IAAqB,CAACC,MAAyB;AAC1D,QAAMC,IAAaD,EAAU,cAAc;AAC3C,SAAO,MAAM,KAAK,EAAE,QAAQC,EAAA,GAAc,CAACC,GAAGC,MAAMH,EAAU,WAAWG,CAAC,CAAC;AAC7E,GA0BaC,IAAmB,MAA8B;AAC5D,QAAMC,IAAWC,EAAA,GACX,CAACN,GAAWO,CAAY,IAAIC;AAAA,IAChC,OAAO,WAAa,MAAc,SAAS,iBAAiB;AAAA,EAAA;AAG9D,EAAAC,EAAU,MAAM;AACd,UAAMC,IAAoB,MAAM;AAC9B,MAAAH,EAAa,SAAS,cAAc,GACpCF,EAAA;AAAA,IAAS;AAGX,oBAAS,iBAAiB,mBAAmBK,CAAiB,GACvD,MAAM,SAAS,oBAAoB,mBAAmBA,CAAiB;AAAA,EAAA,GAC7E,EAAE;AAEL,QAAMC,IAAOX,GAAW,SAAA,KAAc,IAChCY,IAASZ,IAAYD,EAAmBC,CAAS,IAAI,CAAA,GACrDa,IAAQD,EAAO,IAAI,CAACE,MAAUA,EAAM,uBAAuB;AAEjE,SAAO;AAAA,IACL,MAAAH;AAAA,IACA,QAAAC;AAAA,IACA,OAAAC;AAAA,IACA,WAAAb;AAAA,EAAA;AAEJ;"}