{"version":3,"file":"useRafState.mjs","sources":["../../../../src/hooks/useRafState/useRafState.ts"],"sourcesContent":["import { useRef, useState } from 'react';\n\nimport { useUnmount } from '../useUnmount/useUnmount';\n\n/* The use raf value params type */\nexport type UseRafStateReturn<Value> = [Value, (value: Value) => void];\n\n/**\n * @name useRafState\n * @description - Hook that returns the value and a function to set the value\n * @category State\n *\n * @template Value The type of the value\n * @param {Value} initialValue The initial value\n * @returns {UseRafStateReturn<Value>} An array containing the value and a function to set the value\n *\n * @example\n * const [value, setValue] = useRafState(initialValue);\n */\nexport const useRafState = <Value>(initialValue: (() => Value) | Value) => {\n  const rafIdRef = useRef(0);\n  const [value, setValue] = useState(initialValue);\n\n  const set = (value: Value) => {\n    cancelAnimationFrame(rafIdRef.current);\n    rafIdRef.current = requestAnimationFrame(() => setValue(value));\n  };\n\n  useUnmount(() => cancelAnimationFrame(rafIdRef.current));\n\n  return [value, set] as const;\n};\n"],"names":["useRafState","initialValue","rafIdRef","useRef","value","setValue","useState","set","useUnmount"],"mappings":";;AAmBO,MAAMA,IAAc,CAAQC,MAAwC;AACzE,QAAMC,IAAWC,EAAO,CAAC,GACnB,CAACC,GAAOC,CAAQ,IAAIC,EAASL,CAAY,GAEzCM,IAAM,CAACH,MAAiB;AAC5B,yBAAqBF,EAAS,OAAO,GACrCA,EAAS,UAAU,sBAAsB,MAAMG,EAASD,CAAK,CAAC;AAAA,EAAA;AAGhE,SAAAI,EAAW,MAAM,qBAAqBN,EAAS,OAAO,CAAC,GAEhD,CAACE,GAAOG,CAAG;AACpB;"}