import { useState as o, useRef as h, useEffect as L } from "react";
const w = (i, r = {}) => {
  const [l, c] = o(!1), [m, d] = o(r.volume ?? 1), [v, p] = o(r.playbackRate ?? 1), t = h(null);
  L(() => {
    const e = new Audio(i);
    e.volume = m, e.playbackRate = v, t.current = e, r.immediately && e.play();
    const n = () => c(!0), u = () => c(!1), a = () => c(!1), y = () => {
    }, f = () => d(e.volume), E = () => p(e.playbackRate);
    return e.addEventListener("play", n), e.addEventListener("pause", u), e.addEventListener("ended", a), e.addEventListener("timeupdate", y), e.addEventListener("volumechange", f), e.addEventListener("ratechange", E), () => {
      e.removeEventListener("play", n), e.removeEventListener("pause", u), e.removeEventListener("ended", a), e.removeEventListener("timeupdate", y), e.removeEventListener("volumechange", f), e.removeEventListener("ratechange", E), e.pause(), e.remove();
    };
  }, [i]);
  const s = () => {
    t.current && (t.current.pause(), t.current.currentTime = 0);
  };
  return {
    play: async (e) => {
      if (!t.current) return;
      if (r.interrupt && s(), !e || !r.sprite?.[e]) {
        await t.current.play();
        return;
      }
      const [n, u] = r.sprite[e];
      t.current.currentTime = n, await t.current.play();
      const a = () => {
        t.current && (t.current.currentTime >= u && s(), l && requestAnimationFrame(a));
      };
      requestAnimationFrame(a);
    },
    pause: () => t.current?.pause(),
    stop: s,
    playing: l,
    setVolume: (e) => {
      if (!t.current) return;
      const n = Math.max(0, Math.min(1, e));
      t.current.volume = n, d(n);
    },
    volume: m,
    changePlaybackRate: (e) => {
      if (!t.current) return;
      const n = Math.max(0.5, Math.min(2, e));
      t.current.playbackRate = n, p(n);
    },
    playbackRate: v
  };
};
export {
  w as useAudio
};
//# sourceMappingURL=useAudio.mjs.map
