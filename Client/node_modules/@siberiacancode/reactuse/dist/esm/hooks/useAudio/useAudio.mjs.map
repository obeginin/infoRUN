{"version":3,"file":"useAudio.mjs","sources":["../../../../src/hooks/useAudio/useAudio.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/** Type sprite map */\nexport interface SpriteMap {\n  /** [start time in seconds, end time in seconds] */\n  [key: string]: [number, number];\n}\n\n/** Type use audio options */\nexport interface UseAudioOptions {\n  /** Whether audio playback is initially enabled */\n  immediately?: boolean;\n  /** Whether to stop current playback when starting a new one */\n  interrupt?: boolean;\n  /** Initial playback speed (0.5 to 2) */\n  playbackRate?: number;\n  /** Map of named audio segments for sprite-based playback */\n  sprite?: SpriteMap;\n  /** Initial volume level (0 to 1) */\n  volume?: number;\n}\n\n/** Type use audio return type */\nexport interface UseAudioReturn {\n  /** Current playback speed (0.5 to 2) */\n  playbackRate: number;\n  /** Whether audio is currently playing */\n  playing: boolean;\n  /** Current volume level (0 to 1) */\n  volume: number;\n  /** Set playback speed (0.5 to 2) */\n  changePlaybackRate: (value: number) => void;\n  /** Pause audio playback at current position */\n  pause: () => void;\n  /** Start audio playback from the beginning or specified sprite segment */\n  play: (sprite?: string) => Promise<void>;\n  /** Set audio volume level (0 to 1) */\n  setVolume: (value: number) => void;\n  /** Stop audio playback and reset position to start */\n  stop: () => void;\n}\n\n/**\n * @name useAudio\n * @description - Hook that manages audio playback with sprite support\n * @category Browser\n *\n * @browserapi Audio https://developer.mozilla.org/en-US/docs/Web/API/Audio\n *\n * @template Value The type of the value\n * @param {string} url The URL of the audio file to play\n * @param {UseAudioOptions} [options] Audio configuration options\n * @param {number} [options.volume=1] Initial volume level (0 to 1)\n * @param {number} [options.playbackRate=1] Initial playback speed (0.5 to 2)\n * @param {boolean} [options.interrupt=false] Whether to stop current playback when starting a new one\n * @param {boolean} [options.soundEnabled=true] Whether audio playback is initially enabled\n * @param {SpriteMap} [options.sprite] Map of named audio segments for sprite-based playback\n * @returns {UseAudioReturn} An object containing audio controls and state\n *\n * @example\n * const audio = useAudio(\"/path/to/sound.mp3\");\n */\nexport const useAudio = (src: string, options: UseAudioOptions = {}): UseAudioReturn => {\n  const [playing, setPlaying] = useState(false);\n  const [volume, setCurrentVolume] = useState(options.volume ?? 1);\n  const [playbackRate, setPlaybackRate] = useState(options.playbackRate ?? 1);\n\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  useEffect(() => {\n    const audio = new Audio(src);\n\n    audio.volume = volume;\n    audio.playbackRate = playbackRate;\n    audioRef.current = audio;\n\n    if (options.immediately) audio.play();\n\n    const onPlay = () => setPlaying(true);\n    const onPause = () => setPlaying(false);\n    const onEnded = () => setPlaying(false);\n    const onTimeUpdate = () => {};\n    const onVolumeChange = () => setCurrentVolume(audio.volume);\n    const onRateChange = () => setPlaybackRate(audio.playbackRate);\n\n    audio.addEventListener('play', onPlay);\n    audio.addEventListener('pause', onPause);\n    audio.addEventListener('ended', onEnded);\n    audio.addEventListener('timeupdate', onTimeUpdate);\n    audio.addEventListener('volumechange', onVolumeChange);\n    audio.addEventListener('ratechange', onRateChange);\n\n    return () => {\n      audio.removeEventListener('play', onPlay);\n      audio.removeEventListener('pause', onPause);\n      audio.removeEventListener('ended', onEnded);\n      audio.removeEventListener('timeupdate', onTimeUpdate);\n      audio.removeEventListener('volumechange', onVolumeChange);\n      audio.removeEventListener('ratechange', onRateChange);\n\n      audio.pause();\n      audio.remove();\n    };\n  }, [src]);\n\n  const stop = () => {\n    if (!audioRef.current) return;\n    audioRef.current.pause();\n    audioRef.current.currentTime = 0;\n  };\n\n  const play = async (spriteName?: string) => {\n    if (!audioRef.current) return;\n    if (options.interrupt) stop();\n\n    if (!spriteName || !options.sprite?.[spriteName]) {\n      await audioRef.current.play();\n      return;\n    }\n\n    const [start, end] = options.sprite[spriteName];\n    audioRef.current.currentTime = start;\n    await audioRef.current.play();\n\n    const checkTime = () => {\n      if (!audioRef.current) return;\n      if (audioRef.current.currentTime >= end) {\n        stop();\n      }\n\n      if (!playing) return;\n\n      requestAnimationFrame(checkTime);\n    };\n\n    requestAnimationFrame(checkTime);\n  };\n\n  const pause = () => audioRef.current?.pause();\n\n  const setVolume = (value: number) => {\n    if (!audioRef.current) return;\n    const newVolume = Math.max(0, Math.min(1, value));\n    audioRef.current.volume = newVolume;\n    setCurrentVolume(newVolume);\n  };\n\n  const changePlaybackRate = (value: number) => {\n    if (!audioRef.current) return;\n    const newRate = Math.max(0.5, Math.min(2, value));\n    audioRef.current.playbackRate = newRate;\n    setPlaybackRate(newRate);\n  };\n\n  return {\n    play,\n    pause,\n    stop,\n    playing,\n    setVolume,\n    volume,\n    changePlaybackRate,\n    playbackRate\n  };\n};\n"],"names":["useAudio","src","options","playing","setPlaying","useState","volume","setCurrentVolume","playbackRate","setPlaybackRate","audioRef","useRef","useEffect","audio","onPlay","onPause","onEnded","onTimeUpdate","onVolumeChange","onRateChange","stop","spriteName","start","end","checkTime","value","newVolume","newRate"],"mappings":";AA8DO,MAAMA,IAAW,CAACC,GAAaC,IAA2B,OAAuB;AACtF,QAAM,CAACC,GAASC,CAAU,IAAIC,EAAS,EAAK,GACtC,CAACC,GAAQC,CAAgB,IAAIF,EAASH,EAAQ,UAAU,CAAC,GACzD,CAACM,GAAcC,CAAe,IAAIJ,EAASH,EAAQ,gBAAgB,CAAC,GAEpEQ,IAAWC,EAAgC,IAAI;AAErD,EAAAC,EAAU,MAAM;AACd,UAAMC,IAAQ,IAAI,MAAMZ,CAAG;AAE3B,IAAAY,EAAM,SAASP,GACfO,EAAM,eAAeL,GACrBE,EAAS,UAAUG,GAEfX,EAAQ,eAAaW,EAAM,KAAA;AAE/B,UAAMC,IAAS,MAAMV,EAAW,EAAI,GAC9BW,IAAU,MAAMX,EAAW,EAAK,GAChCY,IAAU,MAAMZ,EAAW,EAAK,GAChCa,IAAe,MAAM;AAAA,IAAA,GACrBC,IAAiB,MAAMX,EAAiBM,EAAM,MAAM,GACpDM,IAAe,MAAMV,EAAgBI,EAAM,YAAY;AAE7D,WAAAA,EAAM,iBAAiB,QAAQC,CAAM,GACrCD,EAAM,iBAAiB,SAASE,CAAO,GACvCF,EAAM,iBAAiB,SAASG,CAAO,GACvCH,EAAM,iBAAiB,cAAcI,CAAY,GACjDJ,EAAM,iBAAiB,gBAAgBK,CAAc,GACrDL,EAAM,iBAAiB,cAAcM,CAAY,GAE1C,MAAM;AACX,MAAAN,EAAM,oBAAoB,QAAQC,CAAM,GACxCD,EAAM,oBAAoB,SAASE,CAAO,GAC1CF,EAAM,oBAAoB,SAASG,CAAO,GAC1CH,EAAM,oBAAoB,cAAcI,CAAY,GACpDJ,EAAM,oBAAoB,gBAAgBK,CAAc,GACxDL,EAAM,oBAAoB,cAAcM,CAAY,GAEpDN,EAAM,MAAA,GACNA,EAAM,OAAA;AAAA,IAAO;AAAA,EACf,GACC,CAACZ,CAAG,CAAC;AAER,QAAMmB,IAAO,MAAM;AACjB,IAAKV,EAAS,YACdA,EAAS,QAAQ,MAAA,GACjBA,EAAS,QAAQ,cAAc;AAAA,EAAA;AA8CjC,SAAO;AAAA,IACL,MA5CW,OAAOW,MAAwB;AAC1C,UAAI,CAACX,EAAS,QAAS;AAGvB,UAFIR,EAAQ,aAAWkB,EAAA,GAEnB,CAACC,KAAc,CAACnB,EAAQ,SAASmB,CAAU,GAAG;AAChD,cAAMX,EAAS,QAAQ,KAAA;AACvB;AAAA,MAAA;AAGF,YAAM,CAACY,GAAOC,CAAG,IAAIrB,EAAQ,OAAOmB,CAAU;AAC9C,MAAAX,EAAS,QAAQ,cAAcY,GAC/B,MAAMZ,EAAS,QAAQ,KAAA;AAEvB,YAAMc,IAAY,MAAM;AACtB,QAAKd,EAAS,YACVA,EAAS,QAAQ,eAAea,KAClCH,EAAA,GAGGjB,KAEL,sBAAsBqB,CAAS;AAAA,MAAA;AAGjC,4BAAsBA,CAAS;AAAA,IAAA;AAAA,IAqB/B,OAlBY,MAAMd,EAAS,SAAS,MAAA;AAAA,IAmBpC,MAAAU;AAAA,IACA,SAAAjB;AAAA,IACA,WAnBgB,CAACsB,MAAkB;AACnC,UAAI,CAACf,EAAS,QAAS;AACvB,YAAMgB,IAAY,KAAK,IAAI,GAAG,KAAK,IAAI,GAAGD,CAAK,CAAC;AAChD,MAAAf,EAAS,QAAQ,SAASgB,GAC1BnB,EAAiBmB,CAAS;AAAA,IAAA;AAAA,IAgB1B,QAAApB;AAAA,IACA,oBAdyB,CAACmB,MAAkB;AAC5C,UAAI,CAACf,EAAS,QAAS;AACvB,YAAMiB,IAAU,KAAK,IAAI,KAAK,KAAK,IAAI,GAAGF,CAAK,CAAC;AAChD,MAAAf,EAAS,QAAQ,eAAeiB,GAChClB,EAAgBkB,CAAO;AAAA,IAAA;AAAA,IAWvB,cAAAnB;AAAA,EAAA;AAEJ;"}