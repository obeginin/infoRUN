import { useState as b, useRef as E, useEffect as R } from "react";
import { useRefState as g } from "../useRefState/useRefState.mjs";
import { isTarget as p } from "../../utils/helpers/isTarget.mjs";
import { getElement as F } from "../../utils/helpers/getElement.mjs";
const h = (...r) => {
  const t = p(r[0]) ? r[0] : void 0, s = (t ? r[1] : r[0]) ?? {}, f = s.initialValue ?? !1, [l, a] = b(f), n = g(), u = E(s);
  u.current = s;
  const c = E(null), i = () => c.current?.focus(), m = () => c.current?.blur();
  return R(() => {
    if (!t && !n.state) return;
    const e = t ? F(t) : n.current;
    if (!e) return;
    c.current = e;
    const d = (o) => {
      u.current?.onFocus?.(o), (!i || o.target.matches?.(":focus-visible")) && a(!0);
    }, v = (o) => {
      u.current?.onBlur?.(o), a(!1);
    };
    return f && e.focus(), e.addEventListener("focus", d), e.addEventListener("blur", v), () => {
      e.removeEventListener("focus", d), e.removeEventListener("blur", v);
    };
  }, [t, n.state]), t ? { focus: i, blur: m, focused: l } : {
    ref: n,
    focus: i,
    blur: m,
    focused: l
  };
};
export {
  h as useFocus
};
//# sourceMappingURL=useFocus.mjs.map
