import { useRef as V, useState as T, useEffect as F } from "react";
import { useRefState as R } from "../useRefState/useRefState.mjs";
import { isTarget as O } from "../../utils/helpers/isTarget.mjs";
import { getElement as b } from "../../utils/helpers/getElement.mjs";
const Z = (...n) => {
  const s = O(n[0]) ? n[0] : void 0, o = s ? typeof n[1] == "object" ? n[1] : { onDrop: n[1] } : typeof n[0] == "object" ? n[0] : { onDrop: n[0] }, f = R(), u = V(0), [v, y] = T(null), [g, p] = T(!1), i = o.dataTypes, D = (e) => {
    if (!e.dataTransfer) return null;
    const t = Array.from(e.dataTransfer.files);
    return o.multiple ? t : t.length ? [t[0]] : null;
  }, L = (e) => i ? typeof i == "function" ? i(e) : i.length ? e.length ? e.every((t) => (console.log("type", t), console.log("dataTypes", i), i.some((a) => t.includes(a)))) : !1 : !0 : !0, h = (e) => {
    const t = Array.from(e).map((l) => l.type), a = L(t), c = o.multiple || e.length <= 1;
    return a && c;
  };
  return F(() => {
    if (!s && !f.state) return;
    const e = s ? b(s) : f.current;
    if (!e) return;
    const t = (r, d) => {
      if (!r.dataTransfer) return;
      if (!h(r.dataTransfer.items)) {
        r.dataTransfer.dropEffect = "none";
        return;
      }
      r.preventDefault(), r.dataTransfer.dropEffect = "copy";
      const m = D(r);
      if (d === "drop") {
        u.current = 0, p(!1), y(m), o.onDrop?.(m, r);
        return;
      }
      if (d === "enter") {
        u.current += 1, p(!0), o.onEnter?.(r);
        return;
      }
      if (d === "leave") {
        if (u.current -= 1, u.current !== 0) return;
        p(!1), o.onLeave?.(r);
        return;
      }
      d === "over" && o.onOver?.(r);
    }, a = (r) => t(r, "drop"), c = (r) => t(r, "over"), l = (r) => t(r, "enter"), E = (r) => t(r, "leave");
    return e.addEventListener("dragenter", l), e.addEventListener("dragover", c), e.addEventListener("dragleave", E), e.addEventListener("drop", a), () => {
      e.removeEventListener("dragenter", l), e.removeEventListener("dragover", c), e.removeEventListener("dragleave", E), e.removeEventListener("drop", a);
    };
  }, [s, f.current]), s ? { overed: g, files: v } : { ref: f, overed: g, files: v };
};
export {
  Z as useDropZone
};
//# sourceMappingURL=useDropZone.mjs.map
