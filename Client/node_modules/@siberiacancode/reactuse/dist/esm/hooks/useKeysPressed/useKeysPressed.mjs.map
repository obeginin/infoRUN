{"version":3,"file":"useKeysPressed.mjs","sources":["../../../../src/hooks/useKeysPressed/useKeysPressed.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport type { HookTarget } from '@/utils/helpers';\n\nimport { getElement, isTarget } from '@/utils/helpers';\n\nimport type { StateRef } from '../useRefState/useRefState';\n\nimport { useRefState } from '../useRefState/useRefState';\n\n/** The use keys pressed options type */\nexport interface UseKeysPressedOptions {\n  /** Enable or disable the event listeners */\n  enabled?: boolean;\n}\n\nexport interface UseKeysPressed {\n  (\n    target: HookTarget | Window,\n    options?: UseKeysPressedOptions\n  ): Array<{\n    key: string;\n    code: string;\n  }>;\n\n  <Target extends Element>(\n    options?: UseKeysPressedOptions\n  ): {\n    value: Array<{ key: string; code: string }>;\n    ref: StateRef<Target>;\n  };\n}\n\n/**\n * Hook that tracks which keyboard keys are currently pressed\n *\n * @name useKeysPressed\n * @description Tracks all currently pressed keyboard keys and their codes\n * @category Sensors\n *\n * @overload\n * @param {HookTarget | Window} target DOM element or ref to attach keyboard listeners to\n * @param {UseKeysPressedOptions} [options.enabled=true] Enable or disable the event listeners\n * @returns {Array<{ key: string; code: string }>} Array of currently pressed keys with their key and code values\n *\n * @example\n * const pressedKeys = useKeysPressed(ref);\n *\n * @overload\n * @template Target - Type of the target DOM element\n * @param {UseKeysPressedOptions} [options] - Optional configuration options\n * @returns {{ keys: Array<{ key: string; code: string }>; ref: StateRef<Target> }} Object containing pressed keys array and ref to attach to a DOM element\n *\n * @example\n * const { value, ref } = useKeysPressed();\n */\nexport const useKeysPressed = ((...params: any[]) => {\n  const target = (isTarget(params[0]) ? params[0] : undefined) as HookTarget | undefined;\n  const options = (target ? params[1] : params[0]) as UseKeysPressedOptions | undefined;\n\n  const enabled = options?.enabled ?? true;\n  const [value, setValue] = useState<{ key: string; code: string }[]>([]);\n  const internalRef = useRefState(window);\n\n  useEffect(() => {\n    if (!enabled) return;\n    setValue([]);\n\n    const element = (target ? getElement(target) : internalRef.current) as Element;\n    if (!element) return;\n\n    const onKeyDown = (event: Event) => {\n      const keyboardEvent = event as KeyboardEvent;\n      setValue((prevValue) => {\n        if (prevValue.some(({ code }) => code === keyboardEvent.code)) return prevValue;\n        return [...prevValue, { key: keyboardEvent.key, code: keyboardEvent.code }];\n      });\n    };\n\n    const onKeyUp = (event: Event) => {\n      const keyboardEvent = event as KeyboardEvent;\n      setValue((prevValue) => prevValue.filter(({ code }) => code !== keyboardEvent.code));\n    };\n\n    element.addEventListener('keydown', onKeyDown);\n    element.addEventListener('keyup', onKeyUp);\n\n    return () => {\n      element.removeEventListener('keydown', onKeyDown);\n      element.removeEventListener('keyup', onKeyUp);\n    };\n  }, [enabled, internalRef.state, target]);\n\n  if (target) return value;\n  return { value, ref: internalRef };\n}) as UseKeysPressed;\n"],"names":["useKeysPressed","params","target","isTarget","enabled","value","setValue","useState","internalRef","useRefState","useEffect","element","getElement","onKeyDown","event","keyboardEvent","prevValue","code","onKeyUp"],"mappings":";;;;AAwDO,MAAMA,IAAkB,IAAIC,MAAkB;AACnD,QAAMC,IAAUC,EAASF,EAAO,CAAC,CAAC,IAAIA,EAAO,CAAC,IAAI,QAG5CG,KAFWF,IAASD,EAAO,CAAC,IAAIA,EAAO,CAAC,IAErB,WAAW,IAC9B,CAACI,GAAOC,CAAQ,IAAIC,EAA0C,CAAA,CAAE,GAChEC,IAAcC,EAAY,MAAM;AA+BtC,SA7BAC,EAAU,MAAM;AACd,QAAI,CAACN,EAAS;AACd,IAAAE,EAAS,CAAA,CAAE;AAEX,UAAMK,IAAWT,IAASU,EAAWV,CAAM,IAAIM,EAAY;AAC3D,QAAI,CAACG,EAAS;AAEd,UAAME,IAAY,CAACC,MAAiB;AAClC,YAAMC,IAAgBD;AACtB,MAAAR,EAAS,CAACU,MACJA,EAAU,KAAK,CAAC,EAAE,MAAAC,EAAA,MAAWA,MAASF,EAAc,IAAI,IAAUC,IAC/D,CAAC,GAAGA,GAAW,EAAE,KAAKD,EAAc,KAAK,MAAMA,EAAc,MAAM,CAC3E;AAAA,IAAA,GAGGG,IAAU,CAACJ,MAAiB;AAChC,YAAMC,IAAgBD;AACtB,MAAAR,EAAS,CAACU,MAAcA,EAAU,OAAO,CAAC,EAAE,MAAAC,EAAA,MAAWA,MAASF,EAAc,IAAI,CAAC;AAAA,IAAA;AAGrF,WAAAJ,EAAQ,iBAAiB,WAAWE,CAAS,GAC7CF,EAAQ,iBAAiB,SAASO,CAAO,GAElC,MAAM;AACX,MAAAP,EAAQ,oBAAoB,WAAWE,CAAS,GAChDF,EAAQ,oBAAoB,SAASO,CAAO;AAAA,IAAA;AAAA,EAC9C,GACC,CAACd,GAASI,EAAY,OAAON,CAAM,CAAC,GAEnCA,IAAeG,IACZ,EAAE,OAAAA,GAAO,KAAKG,EAAA;AACvB;"}