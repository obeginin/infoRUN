import { useState as k, useEffect as v } from "react";
import { useRefState as E } from "../useRefState/useRefState.mjs";
import { isTarget as a } from "../../utils/helpers/isTarget.mjs";
import { getElement as l } from "../../utils/helpers/getElement.mjs";
const K = (...r) => {
  const e = a(r[0]) ? r[0] : void 0, u = (e ? r[1] : r[0])?.enabled ?? !0, [f, s] = k([]), i = E(window);
  return v(() => {
    if (!u) return;
    s([]);
    const t = e ? l(e) : i.current;
    if (!t) return;
    const y = (c) => {
      const n = c;
      s((o) => o.some(({ code: d }) => d === n.code) ? o : [...o, { key: n.key, code: n.code }]);
    }, m = (c) => {
      const n = c;
      s((o) => o.filter(({ code: d }) => d !== n.code));
    };
    return t.addEventListener("keydown", y), t.addEventListener("keyup", m), () => {
      t.removeEventListener("keydown", y), t.removeEventListener("keyup", m);
    };
  }, [u, i.state, e]), e ? f : { value: f, ref: i };
};
export {
  K as useKeysPressed
};
//# sourceMappingURL=useKeysPressed.mjs.map
