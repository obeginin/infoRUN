{"version":3,"file":"useDocumentTitle.mjs","sources":["../../../../src/hooks/useDocumentTitle/useDocumentTitle.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/** The use document title options type */\nexport interface UseDocumentTitleOptions {\n  /** Restore the previous title on unmount */\n  restoreOnUnmount?: boolean;\n}\n\n/** The use document title return type */\nexport interface UseDocumentTitleReturn {\n  /** The current title */\n  value: string;\n  /** Function to update the title */\n  set: (title: string) => void;\n}\n\n/**\n * @name useDocumentTitle\n * @description - Hook that manages the document title and allows updating it\n * @category Browser\n *\n * @browserapi document.title https://developer.mozilla.org/en-US/docs/Web/API/Document/title\n *\n * @param {string} [initialValue] The initial title. If not provided, the current document title will be used\n * @param {boolean} [options.restoreOnUnmount] Restore the previous title on unmount\n * @returns {UseDocumentTitleReturn} An array containing the current title and a function to update the title\n *\n * @example\n * const { value, set } = useDocumentTitle();\n */\nexport function useDocumentTitle(\n  initialValue?: string,\n  options?: UseDocumentTitleOptions\n): UseDocumentTitleReturn {\n  const prevValueRef = useRef(document.title);\n  const [value, setValue] = useState(initialValue ?? document.title);\n\n  const set = (value: string) => {\n    const updatedValue = value.trim();\n    if (updatedValue.length > 0) document.title = updatedValue;\n  };\n\n  useEffect(() => {\n    if (typeof value !== 'string') return;\n    set(value);\n  }, [value]);\n\n  useEffect(() => {\n    const observer = new MutationObserver(() => {\n      setValue((prevValue) => {\n        if (document && document.title !== prevValue) {\n          return document.title;\n        }\n        return prevValue;\n      });\n    });\n\n    observer.observe(document.head.querySelector('title')!, {\n      childList: true\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (options?.restoreOnUnmount) {\n      return () => {\n        document.title = prevValueRef.current;\n      };\n    }\n  }, []);\n\n  return { value, set };\n}\n"],"names":["useDocumentTitle","initialValue","options","prevValueRef","useRef","value","setValue","useState","set","updatedValue","useEffect","observer","prevValue"],"mappings":";AA8BO,SAASA,EACdC,GACAC,GACwB;AACxB,QAAMC,IAAeC,EAAO,SAAS,KAAK,GACpC,CAACC,GAAOC,CAAQ,IAAIC,EAASN,KAAgB,SAAS,KAAK,GAE3DO,IAAM,CAACH,MAAkB;AAC7B,UAAMI,IAAeJ,EAAM,KAAA;AAC3B,IAAII,EAAa,SAAS,MAAG,SAAS,QAAQA;AAAA,EAAA;AAGhD,SAAAC,EAAU,MAAM;AACd,IAAI,OAAOL,KAAU,YACrBG,EAAIH,CAAK;AAAA,EAAA,GACR,CAACA,CAAK,CAAC,GAEVK,EAAU,MAAM;AACd,UAAMC,IAAW,IAAI,iBAAiB,MAAM;AAC1C,MAAAL,EAAS,CAACM,MACJ,YAAY,SAAS,UAAUA,IAC1B,SAAS,QAEXA,CACR;AAAA,IAAA,CACF;AAED,WAAAD,EAAS,QAAQ,SAAS,KAAK,cAAc,OAAO,GAAI;AAAA,MACtD,WAAW;AAAA,IAAA,CACZ,GAEM,MAAM;AACX,MAAAA,EAAS,WAAA;AAAA,IAAW;AAAA,EACtB,GACC,EAAE,GAELD,EAAU,MAAM;AACd,QAAIR,GAAS;AACX,aAAO,MAAM;AACX,iBAAS,QAAQC,EAAa;AAAA,MAAA;AAAA,EAElC,GACC,EAAE,GAEE,EAAE,OAAAE,GAAO,KAAAG,EAAA;AAClB;"}