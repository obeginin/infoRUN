{"version":3,"file":"createContext.mjs","sources":["../../../../src/helpers/createContext/createContext.tsx"],"sourcesContent":["import type { JSX, ReactNode } from 'react';\n\nimport { createContext as createReactContext, useContext, useMemo, useState } from 'react';\n\n/** The create context options type */\nexport interface CreateContextOptions {\n  /** Display name for the context (useful for debugging) */\n  name?: string;\n  /** Whether to throw an error if context is used outside of Provider */\n  strict?: boolean;\n}\n\n/** The context value type */\nexport interface ContextValue<Value> {\n  /** The context value */\n  value: Value | undefined;\n  /** The context set function */\n  set: (value: Value) => void;\n}\n\n/** The provider props type */\nexport interface ProviderProps<Value> {\n  /** The children */\n  children?: ReactNode;\n  /** The initial value */\n  initialValue?: Value;\n}\n\n/** The create context return type */\nexport interface CreateContextReturn<Value> {\n  /** The context instance */\n  instance: React.Context<ContextValue<Value>>;\n  /** The provider component */\n  Provider: (props: ProviderProps<Value>) => JSX.Element;\n  /** The selector hook */\n  useSelect: {\n    <Selected>(selector: (value: Value) => Selected): Selected;\n    (): ContextValue<Value>;\n  };\n}\n\n/**\n * @name createContext\n * @description - Creates a typed context with additional utilities\n * @category Helpers\n *\n * @template Value - The type of value that will be stored in the context\n * @param {Value | undefined} [defaultValue] - Default value for the context\n * @param {CreateContextOptions<Value>} [options] - Additional options for context creation\n * @returns {CreateContextReturn<Value>} Object containing context utilities and components\n *\n * @example\n * const { useSelect, instance, Provider } = createContext<number>(0);\n */\nexport const createContext = <Value,>(\n  defaultValue: Value | undefined = undefined,\n  options: CreateContextOptions = {}\n): CreateContextReturn<Value> => {\n  const Context = createReactContext<{\n    value: Value | undefined;\n    set: (value: Value) => void;\n  }>({\n    value: defaultValue,\n    set: () => {}\n  });\n\n  Context.displayName = options.name;\n\n  function useSelect(): ContextValue<Value>;\n  function useSelect<Selected>(selector: (value: Value) => Selected): Selected;\n  function useSelect<Selected>(selector?: (value: Value) => Selected) {\n    const context = useContext(Context);\n\n    if (!context && options.strict) {\n      throw new Error(`Context hook ${options.name} must be used inside a Provider`);\n    }\n\n    if (!selector) {\n      return context;\n    }\n\n    return selector(context.value as Value);\n  }\n\n  const Provider = ({ children, initialValue }: ProviderProps<Value>) => {\n    const [profile, setProfile] = useState<Value | undefined>(initialValue ?? defaultValue);\n\n    const value = useMemo(\n      () => ({\n        value: profile,\n        set: setProfile\n      }),\n      [profile]\n    );\n\n    return <Context value={value}>{children}</Context>;\n  };\n\n  return {\n    useSelect,\n    instance: Context,\n    Provider\n  } as const;\n};\n"],"names":["createContext","defaultValue","options","Context","createReactContext","useSelect","selector","context","useContext","children","initialValue","profile","setProfile","useState","value","useMemo","jsx"],"mappings":";;AAsDO,MAAMA,IAAgB,CAC3BC,IAAkC,QAClCC,IAAgC,CAAA,MACD;AAC/B,QAAMC,IAAUC,EAGb;AAAA,IACD,OAAOH;AAAA,IACP,KAAK,MAAM;AAAA,IAAA;AAAA,EAAC,CACb;AAED,EAAAE,EAAQ,cAAcD,EAAQ;AAI9B,WAASG,EAAoBC,GAAuC;AAClE,UAAMC,IAAUC,EAAWL,CAAO;AAElC,QAAI,CAACI,KAAWL,EAAQ;AACtB,YAAM,IAAI,MAAM,gBAAgBA,EAAQ,IAAI,iCAAiC;AAG/E,WAAKI,IAIEA,EAASC,EAAQ,KAAc,IAH7BA;AAAA,EAG6B;AAiBxC,SAAO;AAAA,IACL,WAAAF;AAAA,IACA,UAAUF;AAAA,IACV,UAjBe,CAAC,EAAE,UAAAM,GAAU,cAAAC,QAAyC;AACrE,YAAM,CAACC,GAASC,CAAU,IAAIC,EAA4BH,KAAgBT,CAAY,GAEhFa,IAAQC;AAAA,QACZ,OAAO;AAAA,UACL,OAAOJ;AAAA,UACP,KAAKC;AAAA,QAAA;AAAA,QAEP,CAACD,CAAO;AAAA,MAAA;AAGV,aAAO,gBAAAK,EAACb,GAAA,EAAQ,OAAAW,GAAe,UAAAL,EAAA,CAAS;AAAA,IAAA;AAAA,EAMxC;AAEJ;"}