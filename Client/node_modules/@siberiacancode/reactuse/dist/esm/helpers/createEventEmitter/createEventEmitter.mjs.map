{"version":3,"file":"createEventEmitter.mjs","sources":["../../../../src/helpers/createEventEmitter/createEventEmitter.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/**\n * @name createEventEmitter\n * @description - Creates a type-safe event emitter\n * @category Helpers\n *\n * @template Events - The type of events and their data\n * @returns {EventEmitterApi<Events>} - Object containing event emitter methods and hook\n *\n * @example\n * const { push, subscribe, unsubscribe, useSubscribe } = createEventEmitter<{ foo: number }>();\n */\nexport const createEventEmitter = <Events extends Record<string, any> = Record<string, any>>() => {\n  type ListenerMap = Map<string, Set<(data: any) => void>>;\n  const listeners: ListenerMap = new Map();\n\n  const push = <Event extends keyof Events>(event: Event, data: Events[Event]) => {\n    const eventListeners = listeners.get(event as string);\n    eventListeners?.forEach((listener) => listener(data));\n  };\n\n  const unsubscribe = <Key extends keyof Events>(\n    event: Key,\n    listener: (data: Events[Key]) => void\n  ) => {\n    const eventKey = event as string;\n    const eventListeners = listeners.get(eventKey);\n    if (!eventListeners) return;\n    eventListeners.delete(listener);\n    if (!eventListeners.size) listeners.delete(eventKey);\n  };\n\n  const subscribe = <Key extends keyof Events>(\n    event: Key,\n    listener: (data: Events[Key]) => void\n  ) => {\n    const eventKey = event as string;\n    if (!listeners.has(eventKey)) listeners.set(eventKey, new Set());\n    const eventListeners = listeners.get(event as string)!;\n    eventListeners.add(listener);\n\n    return () => {\n      unsubscribe(event, listener);\n    };\n  };\n\n  const useSubscribe = <Event extends keyof Events>(\n    event: Event,\n    listener?: (data: Events[Event]) => void\n  ) => {\n    const [data, setData] = useState<Events[Event] | undefined>(undefined);\n    const listenerRef = useRef(listener);\n    listenerRef.current = listener;\n\n    useEffect(() => {\n      const onSubscribe = (data: Events[Event]) => {\n        setData(data);\n        listenerRef.current?.(data);\n      };\n\n      const unsubscribe = subscribe(event, onSubscribe);\n      return () => {\n        unsubscribe();\n      };\n    }, [event]);\n\n    return data;\n  };\n\n  return {\n    push,\n    subscribe,\n    unsubscribe,\n    useSubscribe\n  };\n};\n"],"names":["createEventEmitter","listeners","push","event","data","listener","unsubscribe","eventKey","eventListeners","subscribe","setData","useState","listenerRef","useRef","useEffect"],"mappings":";AAaO,MAAMA,IAAqB,MAAgE;AAEhG,QAAMC,wBAA6B,IAAA,GAE7BC,IAAO,CAA6BC,GAAcC,MAAwB;AAE9E,IADuBH,EAAU,IAAIE,CAAe,GACpC,QAAQ,CAACE,MAAaA,EAASD,CAAI,CAAC;AAAA,EAAA,GAGhDE,IAAc,CAClBH,GACAE,MACG;AACH,UAAME,IAAWJ,GACXK,IAAiBP,EAAU,IAAIM,CAAQ;AAC7C,IAAKC,MACLA,EAAe,OAAOH,CAAQ,GACzBG,EAAe,QAAMP,EAAU,OAAOM,CAAQ;AAAA,EAAA,GAG/CE,IAAY,CAChBN,GACAE,MACG;AACH,UAAME,IAAWJ;AACjB,WAAKF,EAAU,IAAIM,CAAQ,OAAa,IAAIA,GAAU,oBAAI,KAAK,GACxCN,EAAU,IAAIE,CAAe,EACrC,IAAIE,CAAQ,GAEpB,MAAM;AACX,MAAAC,EAAYH,GAAOE,CAAQ;AAAA,IAAA;AAAA,EAC7B;AA0BF,SAAO;AAAA,IACL,MAAAH;AAAA,IACA,WAAAO;AAAA,IACA,aAAAH;AAAA,IACA,cA3BmB,CACnBH,GACAE,MACG;AACH,YAAM,CAACD,GAAMM,CAAO,IAAIC,EAAoC,MAAS,GAC/DC,IAAcC,EAAOR,CAAQ;AACnC,aAAAO,EAAY,UAAUP,GAEtBS,EAAU,MAAM;AAMd,cAAMR,IAAcG,EAAUN,GALV,CAACC,MAAwB;AAC3C,UAAAM,EAAQN,CAAI,GACZQ,EAAY,UAAUR,CAAI;AAAA,QAAA,CAGoB;AAChD,eAAO,MAAM;AACXE,UAAAA,EAAAA;AAAAA,QAAY;AAAA,MACd,GACC,CAACH,CAAK,CAAC,GAEHC;AAAA,IAAA;AAAA,EAOP;AAEJ;"}