{"version":3,"file":"useMemory.cjs","sources":["../../../../src/hooks/useMemory/useMemory.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\ndeclare global {\n  interface Performance {\n    memory: {\n      readonly jsHeapSizeLimit: number;\n      readonly totalJSHeapSize: number;\n      readonly usedJSHeapSize: number;\n    };\n  }\n}\n\n/** The use memory return type */\nexport interface UseMemoryReturn {\n  /** The memory supported status */\n  supported: boolean;\n  /** The current memory usage */\n  value: Performance['memory'];\n}\n\n/**\n * @name useMemory\n * @description - Hook that gives you current memory usage\n * @category Browser\n *\n * @browserapi performance.memory https://developer.mozilla.org/en-US/docs/Web/API/Performance/memory\n *\n * @returns {UseMemoryReturn} An object containing the current memory usage\n *\n * @example\n * const { supported, value } = useMemory();\n */\nexport const useMemory = (): UseMemoryReturn => {\n  const supported = performance && 'memory' in performance && !!performance.memory;\n  const [value, setValue] = useState<Performance['memory']>(\n    performance?.memory ?? {\n      jsHeapSizeLimit: 0,\n      totalJSHeapSize: 0,\n      usedJSHeapSize: 0\n    }\n  );\n\n  useEffect(() => {\n    if (!supported) return;\n    const intervalId = setInterval(() => setValue(performance.memory), 1000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  return { supported, value };\n};\n"],"names":["useMemory","supported","value","setValue","useState","useEffect","intervalId"],"mappings":"yGAgCaA,EAAY,IAAuB,CAC9C,MAAMC,EAAY,aAAe,WAAY,aAAe,CAAC,CAAC,YAAY,OACpE,CAACC,EAAOC,CAAQ,EAAIC,EAAAA,SACxB,aAAa,QAAU,CACrB,gBAAiB,EACjB,gBAAiB,EACjB,eAAgB,CAAA,CAClB,EAGFC,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAI,CAACJ,EAAW,OAChB,MAAMK,EAAa,YAAY,IAAMH,EAAS,YAAY,MAAM,EAAG,GAAI,EACvE,MAAO,IAAM,cAAcG,CAAU,CAAA,EACpC,EAAE,EAEE,CAAE,UAAAL,EAAW,MAAAC,CAAA,CACtB"}