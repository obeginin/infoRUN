{"version":3,"file":"useNetwork.cjs","sources":["../../../../src/hooks/useNetwork/useNetwork.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport interface Connection extends EventTarget {\n  readonly downlink: number;\n  readonly downlinkMax: number;\n  readonly effectiveType: '2g' | '3g' | '4g' | 'slow-2g';\n  readonly rtt: number;\n  readonly saveData: boolean;\n  onChange: (event: Event) => void;\n  readonly type:\n    | 'bluetooth'\n    | 'cellular'\n    | 'ethernet'\n    | 'mixed'\n    | 'none'\n    | 'other'\n    | 'unknown'\n    | 'wifi'\n    | 'wimax';\n}\n\ndeclare global {\n  interface Navigator {\n    readonly connection: Connection;\n    readonly mozConnection: Connection;\n    readonly webkitConnection: Connection;\n  }\n}\n\n/** The type of network connection */\nexport type ConnectionType = Connection['type'];\n/** The effective type of connection */\nexport type ConnectionEffectiveType = Connection['effectiveType'];\n\n/** The use network return type */\nexport interface UseNetworkReturn {\n  /** The estimated downlink speed in megabits per seconds */\n  downlink?: Connection['downlink'];\n  /** The maximum downlink speed, if available */\n  downlinkMax?: Connection['downlinkMax'];\n  /** The effective type of connection (e.g., '2g', '3g', '4g') */\n  effectiveType?: Connection['effectiveType'];\n  /** Indicates if the device is currently online */\n  online: boolean;\n  /** The estimated round-trip time in milliseconds */\n  rtt?: Connection['rtt'];\n  /** Indicates if the user has enabled data saving mode */\n  saveData?: Connection['saveData'];\n  /** The type of network connection (e.g., 'wifi', 'cellular') */\n  type?: Connection['type'];\n}\n\nexport const getConnection = () =>\n  navigator?.connection || navigator?.mozConnection || navigator?.webkitConnection;\n\n/**\n * @name useNetwork\n * @description - Hook to track network status\n * @category Browser\n *\n * @browserapi navigator.connection https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection\n *\n * @returns {UseNetworkReturn} An object containing the network status\n *\n * @example\n * const { online, downlink, downlinkMax, effectiveType, rtt, saveData, type } = useNetwork();\n */\nexport const useNetwork = (): UseNetworkReturn => {\n  const [value, setValue] = useState(() => {\n    if (typeof navigator === 'undefined') {\n      return {\n        online: false,\n        type: undefined,\n        effectiveType: undefined,\n        saveData: false,\n        downlink: 0,\n        downlinkMax: 0,\n        rtt: 0\n      };\n    }\n    const online = navigator.onLine;\n    const connection = getConnection();\n\n    return {\n      online,\n      downlink: connection?.downlink,\n      downlinkMax: connection?.downlinkMax,\n      effectiveType: connection?.effectiveType,\n      rtt: connection?.rtt,\n      saveData: connection?.saveData,\n      type: connection?.type\n    };\n  });\n\n  useEffect(() => {\n    const callback = () => {\n      const online = navigator.onLine;\n      const connection = getConnection();\n\n      setValue({\n        online,\n        downlink: connection?.downlink,\n        downlinkMax: connection?.downlinkMax,\n        effectiveType: connection?.effectiveType,\n        rtt: connection?.rtt,\n        saveData: connection?.saveData,\n        type: connection?.type\n      });\n    };\n    window.addEventListener('online', callback, { passive: true });\n    window.addEventListener('offline', callback, { passive: true });\n\n    const connection = getConnection();\n\n    if (connection) {\n      connection.addEventListener('change', callback, { passive: true });\n    }\n\n    return () => {\n      window.removeEventListener('online', callback);\n      window.removeEventListener('offline', callback);\n\n      if (connection) {\n        connection.removeEventListener('change', callback);\n      }\n    };\n  });\n\n  return value;\n};\n"],"names":["getConnection","useNetwork","value","setValue","useState","online","connection","useEffect","callback"],"mappings":"yGAoDaA,EAAgB,IAC3B,WAAW,YAAc,WAAW,eAAiB,WAAW,iBAcrDC,EAAa,IAAwB,CAChD,KAAM,CAACC,EAAOC,CAAQ,EAAIC,EAAAA,SAAS,IAAM,CACvC,GAAI,OAAO,UAAc,IACvB,MAAO,CACL,OAAQ,GACR,KAAM,OACN,cAAe,OACf,SAAU,GACV,SAAU,EACV,YAAa,EACb,IAAK,CAAA,EAGT,MAAMC,EAAS,UAAU,OACnBC,EAAaN,EAAA,EAEnB,MAAO,CACL,OAAAK,EACA,SAAUC,GAAY,SACtB,YAAaA,GAAY,YACzB,cAAeA,GAAY,cAC3B,IAAKA,GAAY,IACjB,SAAUA,GAAY,SACtB,KAAMA,GAAY,IAAA,CACpB,CACD,EAEDC,OAAAA,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAW,IAAM,CACrB,MAAMH,EAAS,UAAU,OACnBC,EAAaN,EAAA,EAEnBG,EAAS,CACP,OAAAE,EACA,SAAUC,GAAY,SACtB,YAAaA,GAAY,YACzB,cAAeA,GAAY,cAC3B,IAAKA,GAAY,IACjB,SAAUA,GAAY,SACtB,KAAMA,GAAY,IAAA,CACnB,CAAA,EAEH,OAAO,iBAAiB,SAAUE,EAAU,CAAE,QAAS,GAAM,EAC7D,OAAO,iBAAiB,UAAWA,EAAU,CAAE,QAAS,GAAM,EAE9D,MAAMF,EAAaN,EAAA,EAEnB,OAAIM,GACFA,EAAW,iBAAiB,SAAUE,EAAU,CAAE,QAAS,GAAM,EAG5D,IAAM,CACX,OAAO,oBAAoB,SAAUA,CAAQ,EAC7C,OAAO,oBAAoB,UAAWA,CAAQ,EAE1CF,GACFA,EAAW,oBAAoB,SAAUE,CAAQ,CACnD,CACF,CACD,EAEMN,CACT"}