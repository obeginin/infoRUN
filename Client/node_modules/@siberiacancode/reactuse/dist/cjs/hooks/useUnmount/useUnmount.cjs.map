{"version":3,"file":"useUnmount.cjs","sources":["../../../../src/hooks/useUnmount/useUnmount.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\n/**\n * @name useUnmount\n * @description - Hook that defines the logic when unmounting a component\n * @category Lifecycle\n *\n * @param {() => void} callback The callback function to be invoked on component unmount\n * @returns {void}\n *\n * @example\n * useUnmount(() => console.log('This effect runs on component unmount'));\n */\n\nexport const useUnmount = (callback: () => void) => {\n  const internalCallbackRef = useRef(callback);\n  internalCallbackRef.current = callback;\n\n  useEffect(\n    () => () => {\n      internalCallbackRef.current();\n    },\n    []\n  );\n};\n"],"names":["useUnmount","callback","internalCallbackRef","useRef","useEffect"],"mappings":"yGAcaA,EAAcC,GAAyB,CAClD,MAAMC,EAAsBC,EAAAA,OAAOF,CAAQ,EAC3CC,EAAoB,QAAUD,EAE9BG,EAAAA,UACE,IAAM,IAAM,CACVF,EAAoB,QAAA,CAAQ,EAE9B,CAAA,CAAC,CAEL"}