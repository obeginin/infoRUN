{"version":3,"file":"useUrlSearchParam.cjs","sources":["../../../../src/hooks/useUrlSearchParam/useUrlSearchParam.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\n/** The url search params mode type */\nexport type UrlSearchParamMode = 'hash-params' | 'hash' | 'history';\n\n/** The use url search param options type */\nexport interface UseUrlSearchParamOptions<Value> {\n  /** The initial value of the search param */\n  initialValue?: Value;\n  /** The mode to use for writing to the URL */\n  mode?: UrlSearchParamMode;\n  /** The mode to use for writing to the URL */\n  write?: 'push' | 'replace';\n  /** The deserializer function to be invoked */\n  deserializer?: (value: string) => Value;\n  /** The serializer function to be invoked */\n  serializer?: (value: Value) => string;\n}\n\n/** The use url search params set options type */\nexport interface UseUrlSearchParamsActionOptions {\n  /** The mode to use for writing to the URL */\n  write?: 'push' | 'replace';\n}\n\n/** The use url search param return type */\nexport interface UseUrlSearchParamReturn<Value> {\n  /** Current search param value */\n  value: Value | undefined;\n  /** Function to remove the search param */\n  remove: (options?: UseUrlSearchParamsActionOptions) => void;\n  /** Function to update search param */\n  set: (value: Value, options?: UseUrlSearchParamsActionOptions) => void;\n}\n\nexport const URL_SEARCH_PARAMS_EVENT = 'reactuse-url-search-params-event';\n\nexport const getUrlSearchParams = (mode: UrlSearchParamMode = 'history') => {\n  const { search, hash } = window.location;\n\n  let path = '';\n\n  if (mode === 'history') path = search;\n  if (mode === 'hash-params') path = hash.replace(/^#/, '');\n  if (mode === 'hash') {\n    const index = hash.indexOf('?');\n    path = ~index ? hash.slice(index) : '';\n  }\n\n  return new URLSearchParams(path);\n};\n\nexport const createQueryString = (searchParams: URLSearchParams, mode: UrlSearchParamMode) => {\n  const searchParamsString = searchParams.toString();\n  const { search, hash } = window.location;\n\n  if (mode === 'history') return `${searchParamsString ? `?${searchParamsString}` : ''}${hash}`;\n  if (mode === 'hash-params')\n    return `${search}${searchParamsString ? `#${searchParamsString}` : ''}`;\n  if (mode === 'hash') {\n    const index = hash.indexOf('?');\n    const base = index > -1 ? hash.slice(0, index) : hash;\n    return `${search}${base}${searchParamsString ? `?${searchParamsString}` : ''}`;\n  }\n\n  throw new Error('Invalid mode');\n};\n\nexport const dispatchUrlSearchParamsEvent = () =>\n  window.dispatchEvent(new Event(URL_SEARCH_PARAMS_EVENT));\n\nexport interface UseUrlSearchParam {\n  <Value>(\n    key: string,\n    options: UseUrlSearchParamOptions<Value> & { initialValue: Value }\n  ): UseUrlSearchParamReturn<Value>;\n\n  <Value>(\n    key: string,\n    options?: UseUrlSearchParamOptions<Value>\n  ): UseUrlSearchParamReturn<Value | undefined>;\n\n  <Value>(key: string, initialValue: Value): UseUrlSearchParamReturn<Value>;\n\n  <Value>(key: string): UseUrlSearchParamReturn<Value | undefined>;\n}\n\n/**\n * @name useUrlSearchParam\n * @description - Hook that provides reactive URLSearchParams for a single key\n * @category State\n *\n * @overload\n * @template Value The type of the url param values\n * @param {string} key The key of the url param\n * @param {UseUrlSearchParamOptions<Value> & { initialValue: Value }} options The options object with required initialValue\n * @param {Value} options.initialValue The initial value for the url param\n * @param {UrlSearchParamsMode} [options.mode='history'] The mode to use for the URL ('history' | 'hash-params' | 'hash')\n * @param {'push' | 'replace'} [options.write='replace'] The mode to use for writing to the URL\n * @param {(value: Value) => string} [options.serializer] Custom serializer function to convert value to string\n * @param {(value: string) => Value} [options.deserializer] Custom deserializer function to convert string to value\n * @returns {UseUrlSearchParamReturn<Value>} The object with value and function for change value\n *\n * @example\n * const { value, set } = useUrlSearchParam('page', { initialValue: 1 });\n *\n * @overload\n * @template Value The type of the url param values\n * @param {string} key The key of the url param\n * @param {Value} [initialValue] The initial value for the url param\n * @returns {UseUrlSearchParamReturn<Value>} The object with value and function for change value\n *\n * @example\n * const { value, set } = useUrlSearchParam('page', 1);\n */\nexport const useUrlSearchParam = (<Value>(key: string, params?: any) => {\n  const options = (\n    typeof params === 'object' &&\n    params &&\n    ('serializer' in params ||\n      'deserializer' in params ||\n      'initialValue' in params ||\n      'mode' in params ||\n      'write' in params)\n      ? params\n      : undefined\n  ) as UseUrlSearchParamOptions<Value>;\n\n  const initialValue = (options ? options?.initialValue : params) as Value;\n  const { mode = 'history', write: writeMode = 'replace' } = options ?? {};\n\n  if (typeof window === 'undefined') {\n    return {\n      value: initialValue,\n      remove: () => {},\n      set: () => {}\n    } as UseUrlSearchParamReturn<Value>;\n  }\n\n  const serializer = (value: Value) => {\n    if (options?.serializer) return options.serializer(value);\n    if (typeof value === 'string') return value;\n\n    return JSON.stringify(value);\n  };\n\n  const deserializer = (value: string) => {\n    if (options?.deserializer) return options.deserializer(value);\n    if (value === 'undefined' || value === 'null') return undefined as unknown as Value;\n\n    try {\n      return JSON.parse(value) as Value;\n    } catch {\n      return value as Value;\n    }\n  };\n\n  const setUrlSearchParam = (\n    key: string,\n    value: Value | undefined,\n    mode: UrlSearchParamMode,\n    write: 'push' | 'replace' = 'replace'\n  ) => {\n    const searchParams = getUrlSearchParams(mode);\n    const serializedValue =\n      value !== undefined ? (serializer ? serializer(value) : String(value)) : '';\n\n    if (value === undefined) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, serializedValue);\n    }\n\n    const query = createQueryString(searchParams, mode);\n    if (write === 'replace') window.history.replaceState({}, '', query);\n    if (write === 'push') window.history.pushState({}, '', query);\n\n    dispatchUrlSearchParamsEvent();\n  };\n\n  const [value, setValue] = useState<Value | undefined>(() => {\n    const searchParams = getUrlSearchParams(mode);\n    const currentValue = searchParams.get(key);\n\n    if (currentValue === null && initialValue !== undefined) {\n      setUrlSearchParam(key, initialValue, mode, writeMode);\n      return initialValue;\n    }\n\n    return currentValue ? deserializer(currentValue) : undefined;\n  });\n\n  const set = (value: Value, options?: UseUrlSearchParamsActionOptions) => {\n    setUrlSearchParam(key, value, mode, options?.write ?? writeMode);\n    setValue(value);\n  };\n\n  const remove = (options?: UseUrlSearchParamsActionOptions) => {\n    setUrlSearchParam(key, undefined, mode, options?.write ?? writeMode);\n    setValue(undefined);\n  };\n\n  useEffect(() => {\n    const onParamsChange = () => {\n      const searchParams = getUrlSearchParams(mode);\n      const newValue = searchParams.get(key);\n      setValue(newValue ? deserializer(newValue) : undefined);\n    };\n\n    window.addEventListener(URL_SEARCH_PARAMS_EVENT, onParamsChange);\n    window.addEventListener('popstate', onParamsChange);\n    if (mode !== 'history') {\n      window.addEventListener('hashchange', onParamsChange);\n    }\n\n    return () => {\n      window.removeEventListener(URL_SEARCH_PARAMS_EVENT, onParamsChange);\n      window.removeEventListener('popstate', onParamsChange);\n      if (mode !== 'history') {\n        window.removeEventListener('hashchange', onParamsChange);\n      }\n    };\n  }, [key, mode]);\n\n  return {\n    value,\n    remove,\n    set\n  };\n}) as UseUrlSearchParam;\n"],"names":["URL_SEARCH_PARAMS_EVENT","getUrlSearchParams","mode","search","hash","path","index","createQueryString","searchParams","searchParamsString","base","dispatchUrlSearchParamsEvent","useUrlSearchParam","key","params","options","initialValue","writeMode","serializer","value","deserializer","setUrlSearchParam","write","serializedValue","query","setValue","useState","currentValue","set","remove","useEffect","onParamsChange","newValue"],"mappings":"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"}