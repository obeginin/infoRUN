{"version":3,"file":"useStateHistory.cjs","sources":["../../../../src/hooks/useStateHistory/useStateHistory.ts"],"sourcesContent":["import { useReducer } from 'react';\n\n/** The use state history hook return type */\ninterface UseStateHistoryReturn<Value> {\n  /** True if a redo operation can be performed */\n  canRedo: boolean;\n  /** True if an undo operation can be performed */\n  canUndo: boolean;\n  /** All history values */\n  history: Value[];\n  /** Current index in history */\n  index: number;\n  /** Current value */\n  value: Value;\n  /** Go back specified number of steps in history (default: 1) */\n  back: (steps?: number) => void;\n  /** Go forward specified number of steps in history (default: 1) */\n  forward: (steps?: number) => void;\n  /** Redo the last change */\n  redo: () => void;\n  /** Reset history to initial state */\n  reset: () => void;\n  /** Set a new value */\n  set: (value: Value) => void;\n  /** Undo the last change */\n  undo: () => void;\n}\n\nexport type StateHistoryAction<Value> =\n  | { type: 'BACK'; payload: { steps: number } }\n  | { type: 'FORWARD'; payload: { steps: number } }\n  | { type: 'REDO' }\n  | { type: 'RESET'; payload: { initialValue: Value; capacity: number } }\n  | { type: 'SET'; payload: { value: Value; capacity: number } }\n  | { type: 'UNDO' };\n\nexport interface StateHistory<Value> {\n  currentIndex: number;\n  history: Value[];\n  redoStack: Value[][];\n  undoStack: Value[][];\n}\n\nexport const stateHistoryReducer = <Value>(\n  state: StateHistory<Value>,\n  action: StateHistoryAction<Value>\n): StateHistory<Value> => {\n  switch (action.type) {\n    case 'SET': {\n      const { value, capacity } = action.payload;\n\n      const newHistory = [...state.history.slice(0, state.currentIndex + 1), value];\n      if (newHistory.length > capacity) {\n        newHistory.shift();\n      }\n\n      const newUndoStack = [state.history, ...state.undoStack];\n      if (newUndoStack.length > capacity) {\n        newUndoStack.pop();\n      }\n\n      return {\n        history: newHistory,\n        currentIndex: newHistory.length - 1,\n        undoStack: newUndoStack,\n        redoStack: []\n      };\n    }\n\n    case 'UNDO': {\n      if (state.undoStack.length === 0) return state;\n\n      return {\n        history: state.undoStack[0],\n        currentIndex: state.undoStack[0].length - 1,\n        undoStack: state.undoStack.slice(1),\n        redoStack: [state.history, ...state.redoStack]\n      };\n    }\n\n    case 'REDO': {\n      if (state.redoStack.length === 0) return state;\n\n      return {\n        history: state.redoStack[0],\n        currentIndex: state.redoStack[0].length - 1,\n        undoStack: [state.history, ...state.undoStack],\n        redoStack: state.redoStack.slice(1)\n      };\n    }\n\n    case 'BACK': {\n      const { steps } = action.payload;\n      return {\n        ...state,\n        currentIndex: Math.max(0, state.currentIndex - steps)\n      };\n    }\n\n    case 'FORWARD': {\n      const { steps } = action.payload;\n      return {\n        ...state,\n        currentIndex: Math.min(state.currentIndex + steps, state.history.length - 1)\n      };\n    }\n\n    case 'RESET': {\n      const { initialValue, capacity } = action.payload;\n      if (state.history.length === 1) return state;\n\n      const newUndoStack = [state.history, ...state.undoStack];\n      if (newUndoStack.length > capacity) {\n        newUndoStack.pop();\n      }\n\n      return {\n        history: [initialValue],\n        currentIndex: 0,\n        undoStack: newUndoStack,\n        redoStack: []\n      };\n    }\n\n    default:\n      throw new Error('Unsupported action type');\n  }\n};\n\n/**\n * @name useStateHistory\n * @description - Hook that manages state with history functionality\n * @category State\n *\n * @param {Value} initialValue - The initial value to start the history with\n * @param {number} [capacity=10] - Maximum number of history entries and undo actions to keep\n * @returns {UseStateHistoryReturn<Value>} Object containing current value, history array and control methods\n *\n * @example\n * const { value, history, index, set, back, forward, reset, undo, redo, canUndo, canRedo } = useStateHistory(0);\n */\nexport const useStateHistory = <Value>(\n  initialValue: Value,\n  capacity = 10\n): UseStateHistoryReturn<Value> => {\n  const [state, dispatch] = useReducer(stateHistoryReducer<Value>, {\n    history: [initialValue],\n    currentIndex: 0,\n    undoStack: [],\n    redoStack: []\n  });\n\n  const value = state.history[state.currentIndex];\n  const canUndo = state.undoStack.length > 0;\n  const canRedo = state.redoStack.length > 0;\n\n  const set = (value: Value) =>\n    dispatch({\n      type: 'SET',\n      payload: { value, capacity }\n    });\n\n  const undo = () => dispatch({ type: 'UNDO' });\n\n  const redo = () => dispatch({ type: 'REDO' });\n\n  const back = (steps = 1) => dispatch({ type: 'BACK', payload: { steps } });\n\n  const forward = (steps = 1) => dispatch({ type: 'FORWARD', payload: { steps } });\n\n  const reset = () => dispatch({ type: 'RESET', payload: { initialValue, capacity } });\n\n  return {\n    history: state.history,\n    value,\n    set,\n    index: state.currentIndex,\n    back,\n    forward,\n    reset,\n    undo,\n    redo,\n    canUndo,\n    canRedo\n  };\n};\n"],"names":["stateHistoryReducer","state","action","value","capacity","newHistory","newUndoStack","steps","initialValue","useStateHistory","dispatch","useReducer","canUndo","canRedo","set","undo","redo","back","forward","reset"],"mappings":"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"}