{"version":3,"file":"useStopwatch.cjs","sources":["../../../../src/hooks/useStopwatch/useStopwatch.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst getStopwatchTime = (time: number) => {\n  if (!time)\n    return {\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      count: 0\n    };\n\n  const days = Math.floor(time / 86400);\n  const hours = Math.floor((time % 86400) / 3600);\n  const minutes = Math.floor((time % 3600) / 60);\n  const seconds = Math.floor(time % 60);\n\n  return { days, hours, minutes, seconds, count: time };\n};\n\n/** The use stopwatch return type */\nexport interface UseStopwatchReturn {\n  /** The total count of the stopwatch */\n  count: number;\n  /** The day count of the stopwatch */\n  days: number;\n  /** The hour count of the stopwatch */\n  hours: number;\n  /** The minute count of the stopwatch */\n  minutes: number;\n  /** The over state of the stopwatch */\n  over: boolean;\n  /** The paused state of the stopwatch */\n  paused: boolean;\n  /** The second count of the stopwatch */\n  seconds: number;\n  /** The function to pause the stopwatch */\n  pause: () => void;\n  /** The function to reset the stopwatch */\n  reset: () => void;\n  /** The function to start the stopwatch */\n  start: () => void;\n  /** The function to toggle the stopwatch */\n  toggle: () => void;\n}\n\n/** The use stopwatch options */\nexport interface UseStopwatchOptions {\n  /** The immediately state of the timer */\n  immediately?: boolean;\n}\n\ninterface UseStopwatch {\n  (initialTime?: number, options?: UseStopwatchOptions): UseStopwatchReturn;\n  (options?: UseStopwatchOptions & { initialTime?: number }): UseStopwatchReturn;\n}\n/**\n * @name useStopwatch\n * @description - Hook that creates a stopwatch functionality\n * @category Time\n *\n * @overload\n * @param {number} [initialTime=0] The initial time of the timer\n * @param {boolean} [options.enabled=true] The enabled state of the timer\n * @returns {UseStopwatchReturn} An object containing the current time and functions to interact with the timer\n *\n * @example\n * const { seconds, minutes, start, pause, reset } = useStopwatch(1000, { enabled: false });\n *\n * @overload\n * @param {number} [options.initialTime=0] -The initial time of the timer\n * @param {boolean} [options.enabled=true] The enabled state of the timer\n * @returns {UseStopwatchReturn} An object containing the current time and functions to interact with the timer\n *\n * @example\n * const { seconds, minutes, start, pause, reset } = useStopwatch({ initialTime: 1000, enabled: false });\n */\nexport const useStopwatch = ((...params: any[]) => {\n  const initialTime =\n    (typeof params[0] === 'number'\n      ? (params[0] as number | undefined)\n      : (params[0] as UseStopwatchOptions & { initialTime?: number })?.initialTime) ?? 0;\n\n  const options =\n    typeof params[0] === 'number'\n      ? (params[1] as UseStopwatchOptions | undefined)\n      : (params[0] as (UseStopwatchOptions & { initialTime?: number }) | undefined);\n\n  const immediately = options?.immediately ?? false;\n\n  const [time, setTime] = useState(getStopwatchTime(initialTime));\n  const [paused, setPaused] = useState(!immediately && !initialTime);\n\n  useEffect(() => {\n    if (paused) return;\n    const onInterval = () => {\n      setTime((prevTime) => {\n        const updatedCount = prevTime.count + 1;\n\n        if (updatedCount % 60 === 0) {\n          return {\n            ...prevTime,\n            minutes: prevTime.minutes + 1,\n            seconds: 0,\n            count: updatedCount\n          };\n        }\n\n        if (updatedCount % (60 * 60) === 0) {\n          return {\n            ...prevTime,\n            hours: prevTime.hours + 1,\n            minutes: 0,\n            seconds: 0,\n            count: updatedCount\n          };\n        }\n\n        if (updatedCount % (60 * 60 * 24) === 0) {\n          return {\n            ...prevTime,\n            days: prevTime.days + 1,\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n            count: updatedCount\n          };\n        }\n\n        return {\n          ...prevTime,\n          seconds: prevTime.seconds + 1,\n          count: updatedCount\n        };\n      });\n    };\n\n    const interval = setInterval(() => onInterval(), 1000);\n    return () => clearInterval(interval);\n  }, [paused]);\n\n  return {\n    ...time,\n    paused,\n    pause: () => setPaused(true),\n    start: () => setPaused(false),\n    reset: () => setTime(getStopwatchTime(initialTime)),\n    toggle: () => setPaused((prevPause) => !prevPause)\n  };\n}) as UseStopwatch;\n"],"names":["getStopwatchTime","time","days","hours","minutes","seconds","useStopwatch","params","initialTime","immediately","setTime","useState","paused","setPaused","useEffect","onInterval","prevTime","updatedCount","interval","prevPause"],"mappings":"yGAEMA,EAAoBC,GAAiB,CACzC,GAAI,CAACA,EACH,MAAO,CACL,KAAM,EACN,MAAO,EACP,QAAS,EACT,QAAS,EACT,MAAO,CAAA,EAGX,MAAMC,EAAO,KAAK,MAAMD,EAAO,KAAK,EAC9BE,EAAQ,KAAK,MAAOF,EAAO,MAAS,IAAI,EACxCG,EAAU,KAAK,MAAOH,EAAO,KAAQ,EAAE,EACvCI,EAAU,KAAK,MAAMJ,EAAO,EAAE,EAEpC,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,EAAS,MAAOJ,CAAA,CACjD,EA2DaK,EAAgB,IAAIC,IAAkB,CACjD,MAAMC,GACH,OAAOD,EAAO,CAAC,GAAM,SACjBA,EAAO,CAAC,EACRA,EAAO,CAAC,GAAsD,cAAgB,EAO/EE,GAJJ,OAAOF,EAAO,CAAC,GAAM,SAChBA,EAAO,CAAC,EACRA,EAAO,CAAC,IAEc,aAAe,GAEtC,CAACN,EAAMS,CAAO,EAAIC,EAAAA,SAASX,EAAiBQ,CAAW,CAAC,EACxD,CAACI,EAAQC,CAAS,EAAIF,EAAAA,SAAS,CAACF,GAAe,CAACD,CAAW,EAEjEM,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAIF,EAAQ,OACZ,MAAMG,EAAa,IAAM,CACvBL,EAASM,GAAa,CACpB,MAAMC,EAAeD,EAAS,MAAQ,EAEtC,OAAIC,EAAe,KAAO,EACjB,CACL,GAAGD,EACH,QAASA,EAAS,QAAU,EAC5B,QAAS,EACT,MAAOC,CAAA,EAIPA,GAAgB,GAAK,MAAQ,EACxB,CACL,GAAGD,EACH,MAAOA,EAAS,MAAQ,EACxB,QAAS,EACT,QAAS,EACT,MAAOC,CAAA,EAIPA,GAAgB,GAAK,GAAK,MAAQ,EAC7B,CACL,GAAGD,EACH,KAAMA,EAAS,KAAO,EACtB,MAAO,EACP,QAAS,EACT,QAAS,EACT,MAAOC,CAAA,EAIJ,CACL,GAAGD,EACH,QAASA,EAAS,QAAU,EAC5B,MAAOC,CAAA,CACT,CACD,CAAA,EAGGC,EAAW,YAAY,IAAMH,EAAA,EAAc,GAAI,EACrD,MAAO,IAAM,cAAcG,CAAQ,CAAA,EAClC,CAACN,CAAM,CAAC,EAEJ,CACL,GAAGX,EACH,OAAAW,EACA,MAAO,IAAMC,EAAU,EAAI,EAC3B,MAAO,IAAMA,EAAU,EAAK,EAC5B,MAAO,IAAMH,EAAQV,EAAiBQ,CAAW,CAAC,EAClD,OAAQ,IAAMK,EAAWM,GAAc,CAACA,CAAS,CAAA,CAErD"}