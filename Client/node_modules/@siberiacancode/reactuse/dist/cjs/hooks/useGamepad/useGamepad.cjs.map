{"version":3,"file":"useGamepad.cjs","sources":["../../../../src/hooks/useGamepad/useGamepad.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { useRaf } from '../useRaf/useRaf';\n\ndeclare global {\n  interface Gamepad {\n    hapticActuators?: GamepadHapticActuator[];\n  }\n}\n\n/** The use gamepad return type  */\nexport interface UseGamepadStateReturn {\n  /** The gamepad active status */\n  active: boolean;\n  /** The gamepad state */\n  gamepads: Gamepad[];\n  /** The gamepad supported status */\n  supported: boolean;\n}\n\n/**\n * @name useGamepad\n * @description - Hook for getting information about gamepad\n * @category Browser\n *\n * @browserapi navigator.getGamepads https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getGamepads\n *\n * @returns {UseGamepadStateReturn} An object containing the gamepad information\n *\n * @example\n * const { supported, gamepads, active } = useGamepad();\n */\nexport const useGamepad = () => {\n  const supported = typeof navigator !== 'undefined' && 'getGamepads' in navigator;\n  const [gamepads, setGamepads] = useState<Record<number, Gamepad>>({});\n\n  const createGamepad = (gamepad: Gamepad) => {\n    const hapticActuators = [];\n    const vibrationActuator = 'vibrationActuator' in gamepad ? gamepad.vibrationActuator : null;\n\n    if (vibrationActuator) hapticActuators.push(vibrationActuator);\n    if (gamepad.hapticActuators) hapticActuators.push(...gamepad.hapticActuators);\n\n    return {\n      ...gamepad,\n      hapticActuators\n    } as Gamepad;\n  };\n\n  const updateGamepadState = () => {\n    for (const gamepad of navigator.getGamepads() ?? []) {\n      if (gamepad && gamepads[gamepad.index]) gamepads[gamepad.index] = createGamepad(gamepad);\n    }\n  };\n\n  const { active } = useRaf(updateGamepadState, {\n    enabled: !!Object.keys(gamepads).length\n  });\n\n  useEffect(() => {\n    if (!supported) return;\n    const gamepads = navigator.getGamepads();\n    setGamepads(\n      gamepads.reduce(\n        (acc, gamepad) => ({\n          ...acc,\n          ...(gamepad && { [gamepad.index]: createGamepad(gamepad) })\n        }),\n        {}\n      )\n    );\n  }, []);\n\n  useEffect(() => {\n    const onConnected = (event: Event) => {\n      const { gamepad } = event as GamepadEvent;\n      setGamepads({ ...gamepads, [gamepad.index]: createGamepad(gamepad) });\n    };\n\n    const onDisconnected = (event: Event) => {\n      const { gamepad } = event as GamepadEvent;\n      const updatedGamepads = { ...gamepads };\n      delete updatedGamepads[gamepad.index];\n      setGamepads(updatedGamepads);\n    };\n\n    document.addEventListener('gamepadconnected', onConnected);\n    document.addEventListener('gamepaddisconnected', onDisconnected);\n\n    return () => {\n      document.removeEventListener('gamepadconnected', onConnected);\n      document.removeEventListener('gamepaddisconnected', onDisconnected);\n    };\n  }, []);\n\n  return {\n    active,\n    supported,\n    gamepads: Object.values(gamepads)\n  };\n};\n\nexport const mapGamepadToXbox360Controller = (gamepad: Gamepad) => ({\n  buttons: {\n    a: gamepad.buttons[0],\n    b: gamepad.buttons[1],\n    x: gamepad.buttons[2],\n    y: gamepad.buttons[3]\n  },\n  bumper: {\n    left: gamepad.buttons[4],\n    right: gamepad.buttons[5]\n  },\n  triggers: {\n    left: gamepad.buttons[6],\n    right: gamepad.buttons[7]\n  },\n  stick: {\n    left: {\n      horizontal: gamepad.axes[0],\n      vertical: gamepad.axes[1],\n      button: gamepad.buttons[10]\n    },\n    right: {\n      horizontal: gamepad.axes[2],\n      vertical: gamepad.axes[3],\n      button: gamepad.buttons[11]\n    }\n  },\n  dpad: {\n    up: gamepad.buttons[12],\n    down: gamepad.buttons[13],\n    left: gamepad.buttons[14],\n    right: gamepad.buttons[15]\n  },\n  back: gamepad.buttons[8],\n  start: gamepad.buttons[9]\n});\n"],"names":["useGamepad","supported","gamepads","setGamepads","useState","createGamepad","gamepad","hapticActuators","vibrationActuator","updateGamepadState","active","useRaf","useEffect","acc","onConnected","event","onDisconnected","updatedGamepads","mapGamepadToXbox360Controller"],"mappings":"2IAgCaA,EAAa,IAAM,CAC9B,MAAMC,EAAY,OAAO,UAAc,KAAe,gBAAiB,UACjE,CAACC,EAAUC,CAAW,EAAIC,EAAAA,SAAkC,CAAA,CAAE,EAE9DC,EAAiBC,GAAqB,CAC1C,MAAMC,EAAkB,CAAA,EAClBC,EAAoB,sBAAuBF,EAAUA,EAAQ,kBAAoB,KAEvF,OAAIE,GAAmBD,EAAgB,KAAKC,CAAiB,EACzDF,EAAQ,iBAAiBC,EAAgB,KAAK,GAAGD,EAAQ,eAAe,EAErE,CACL,GAAGA,EACH,gBAAAC,CAAA,CACF,EAGIE,EAAqB,IAAM,CAC/B,UAAWH,KAAW,UAAU,YAAA,GAAiB,CAAA,EAC3CA,GAAWJ,EAASI,EAAQ,KAAK,MAAYA,EAAQ,KAAK,EAAID,EAAcC,CAAO,EACzF,EAGI,CAAE,OAAAI,CAAA,EAAWC,EAAAA,OAAOF,EAAoB,CAC5C,QAAS,CAAC,CAAC,OAAO,KAAKP,CAAQ,EAAE,MAAA,CAClC,EAEDU,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAI,CAACX,EAAW,OAChB,MAAMC,EAAW,UAAU,YAAA,EAC3BC,EACED,EAAS,OACP,CAACW,EAAKP,KAAa,CACjB,GAAGO,EACH,GAAIP,GAAW,CAAE,CAACA,EAAQ,KAAK,EAAGD,EAAcC,CAAO,CAAA,CAAE,GAE3D,CAAA,CAAC,CACH,CACF,EACC,EAAE,EAELM,EAAAA,UAAU,IAAM,CACd,MAAME,EAAeC,GAAiB,CACpC,KAAM,CAAE,QAAAT,GAAYS,EACpBZ,EAAY,CAAE,GAAGD,EAAU,CAACI,EAAQ,KAAK,EAAGD,EAAcC,CAAO,EAAG,CAAA,EAGhEU,EAAkBD,GAAiB,CACvC,KAAM,CAAE,QAAAT,GAAYS,EACdE,EAAkB,CAAE,GAAGf,CAAA,EAC7B,OAAOe,EAAgBX,EAAQ,KAAK,EACpCH,EAAYc,CAAe,CAAA,EAG7B,gBAAS,iBAAiB,mBAAoBH,CAAW,EACzD,SAAS,iBAAiB,sBAAuBE,CAAc,EAExD,IAAM,CACX,SAAS,oBAAoB,mBAAoBF,CAAW,EAC5D,SAAS,oBAAoB,sBAAuBE,CAAc,CAAA,CACpE,EACC,EAAE,EAEE,CACL,OAAAN,EACA,UAAAT,EACA,SAAU,OAAO,OAAOC,CAAQ,CAAA,CAEpC,EAEagB,EAAiCZ,IAAsB,CAClE,QAAS,CACP,EAAGA,EAAQ,QAAQ,CAAC,EACpB,EAAGA,EAAQ,QAAQ,CAAC,EACpB,EAAGA,EAAQ,QAAQ,CAAC,EACpB,EAAGA,EAAQ,QAAQ,CAAC,CAAA,EAEtB,OAAQ,CACN,KAAMA,EAAQ,QAAQ,CAAC,EACvB,MAAOA,EAAQ,QAAQ,CAAC,CAAA,EAE1B,SAAU,CACR,KAAMA,EAAQ,QAAQ,CAAC,EACvB,MAAOA,EAAQ,QAAQ,CAAC,CAAA,EAE1B,MAAO,CACL,KAAM,CACJ,WAAYA,EAAQ,KAAK,CAAC,EAC1B,SAAUA,EAAQ,KAAK,CAAC,EACxB,OAAQA,EAAQ,QAAQ,EAAE,CAAA,EAE5B,MAAO,CACL,WAAYA,EAAQ,KAAK,CAAC,EAC1B,SAAUA,EAAQ,KAAK,CAAC,EACxB,OAAQA,EAAQ,QAAQ,EAAE,CAAA,CAC5B,EAEF,KAAM,CACJ,GAAIA,EAAQ,QAAQ,EAAE,EACtB,KAAMA,EAAQ,QAAQ,EAAE,EACxB,KAAMA,EAAQ,QAAQ,EAAE,EACxB,MAAOA,EAAQ,QAAQ,EAAE,CAAA,EAE3B,KAAMA,EAAQ,QAAQ,CAAC,EACvB,MAAOA,EAAQ,QAAQ,CAAC,CAC1B"}