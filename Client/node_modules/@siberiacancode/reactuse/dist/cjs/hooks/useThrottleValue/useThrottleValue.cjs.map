{"version":3,"file":"useThrottleValue.cjs","sources":["../../../../src/hooks/useThrottleValue/useThrottleValue.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nimport { useThrottleCallback } from '../useThrottleCallback/useThrottleCallback';\n\n/**\n * @name useThrottleValue\n * @description - Hook that creates a throttled value\n * @category Utilities\n *\n * @template Value The type of the value\n * @param {Value} value The value to be throttled\n * @param {number} delay The delay in milliseconds\n * @returns {Value} The throttled value\n *\n * @example\n * const throttledValue = useThrottleValue(value, 500);\n */\nexport const useThrottleValue = <Value>(value: Value, delay: number) => {\n  const previousValueRef = useRef(value);\n  const [throttledValue, setThrottleValue] = useState(value);\n\n  const throttledSetState = useThrottleCallback(setThrottleValue, delay);\n\n  useEffect(() => {\n    if (previousValueRef.current === value) return;\n    throttledSetState(value);\n    previousValueRef.current = value;\n  }, [value]);\n\n  return throttledValue;\n};\n"],"names":["useThrottleValue","value","delay","previousValueRef","useRef","throttledValue","setThrottleValue","useState","throttledSetState","useThrottleCallback","useEffect"],"mappings":"qKAiBaA,EAAmB,CAAQC,EAAcC,IAAkB,CACtE,MAAMC,EAAmBC,EAAAA,OAAOH,CAAK,EAC/B,CAACI,EAAgBC,CAAgB,EAAIC,EAAAA,SAASN,CAAK,EAEnDO,EAAoBC,EAAAA,oBAAoBH,EAAkBJ,CAAK,EAErEQ,OAAAA,EAAAA,UAAU,IAAM,CACVP,EAAiB,UAAYF,IACjCO,EAAkBP,CAAK,EACvBE,EAAiB,QAAUF,EAAA,EAC1B,CAACA,CAAK,CAAC,EAEHI,CACT"}