{"version":3,"file":"useDeviceOrientation.cjs","sources":["../../../../src/hooks/useDeviceOrientation/useDeviceOrientation.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\n/* The use device orientation value type */\nexport interface UseDeviceOrientationValue {\n  /** The current absolute value */\n  absolute: boolean;\n  /** A number representing the motion of the device around the z axis, express in degrees with values ranging from 0 to 360 */\n  alpha: number | null;\n  /** A number representing the motion of the device around the x axis, express in degrees with values ranging from -180 to 180 */\n  beta: number | null;\n  /** A number representing the motion of the device around the y axis, express in degrees with values ranging from -90 to 90 */\n  gamma: number | null;\n}\n\n/* The use device orientation return type */\nexport interface UseDeviceOrientationReturn {\n  /** Whether the device orientation is supported */\n  supported: boolean;\n  /** The current device orientation value */\n  value: UseDeviceOrientationValue;\n}\n\n/**\n * @name useDeviceOrientation\n * @description - Hook that provides the current device orientation\n * @category Sensors\n *\n * @browserapi DeviceOrientationEvent https://developer.mozilla.org/en-US/docs/Web/API/Window/DeviceOrientationEvent\n *\n * @returns {UseDeviceOrientationReturn} The current device orientation\n *\n * @example\n * const { supported, value } = useDeviceOrientation();\n */\nexport const useDeviceOrientation = (): UseDeviceOrientationReturn => {\n  const supported = typeof window !== 'undefined' && 'DeviceOrientationEvent' in window;\n\n  const [value, setValue] = useState<UseDeviceOrientationValue>({\n    alpha: null,\n    beta: null,\n    gamma: null,\n    absolute: false\n  });\n\n  useEffect(() => {\n    if (!supported) return;\n\n    const onDeviceOrientation = (event: DeviceOrientationEvent) =>\n      setValue({\n        alpha: event.alpha,\n        beta: event.beta,\n        gamma: event.gamma,\n        absolute: event.absolute\n      });\n\n    window.addEventListener('deviceorientation', onDeviceOrientation);\n    return () => {\n      window.removeEventListener('deviceorientation', onDeviceOrientation);\n    };\n  }, []);\n\n  return {\n    supported,\n    value\n  };\n};\n"],"names":["useDeviceOrientation","supported","value","setValue","useState","useEffect","onDeviceOrientation","event"],"mappings":"yGAkCaA,EAAuB,IAAkC,CACpE,MAAMC,EAAY,OAAO,OAAW,KAAe,2BAA4B,OAEzE,CAACC,EAAOC,CAAQ,EAAIC,WAAoC,CAC5D,MAAO,KACP,KAAM,KACN,MAAO,KACP,SAAU,EAAA,CACX,EAEDC,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAI,CAACJ,EAAW,OAEhB,MAAMK,EAAuBC,GAC3BJ,EAAS,CACP,MAAOI,EAAM,MACb,KAAMA,EAAM,KACZ,MAAOA,EAAM,MACb,SAAUA,EAAM,QAAA,CACjB,EAEH,cAAO,iBAAiB,oBAAqBD,CAAmB,EACzD,IAAM,CACX,OAAO,oBAAoB,oBAAqBA,CAAmB,CAAA,CACrE,EACC,EAAE,EAEE,CACL,UAAAL,EACA,MAAAC,CAAA,CAEJ"}