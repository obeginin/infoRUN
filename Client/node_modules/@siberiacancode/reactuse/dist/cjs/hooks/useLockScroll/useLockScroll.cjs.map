{"version":3,"file":"useLockScroll.cjs","sources":["../../../../src/hooks/useLockScroll/useLockScroll.ts"],"sourcesContent":["import { useRef, useState } from 'react';\n\nimport type { HookTarget } from '@/utils/helpers';\n\nimport { getElement, isTarget } from '@/utils/helpers';\n\nimport type { StateRef } from '../useRefState/useRefState';\n\nimport { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect/useIsomorphicLayoutEffect';\nimport { useRefState } from '../useRefState/useRefState';\n\n/** The use lock scroll options type */\nexport interface UseLockScrollOptions {\n  /** Enable or disable scroll locking. Default: true */\n  enabled?: boolean;\n}\n\n/** The use lock scroll return type */\nexport interface UseLockScrollReturn<Target extends Element> {\n  /** The ref to attach to the element */\n  ref: StateRef<Target>;\n  /** The value of the lock state */\n  value: boolean;\n  /** Lock the scroll */\n  lock: () => void;\n  /** Toggle the scroll lock */\n  toggle: () => void;\n  /** Unlock the scroll */\n  unlock: () => void;\n}\n\nexport interface UseLockScroll {\n  (target: HookTarget, options?: UseLockScrollOptions): UseLockScrollReturn<Element>;\n\n  <Target extends Element>(\n    options?: UseLockScrollOptions,\n    target?: never\n  ): UseLockScrollReturn<Target> & { ref: StateRef<Target> };\n}\n\n/**\n * @name useLockScroll\n * @description - Hook that locks scroll on an element or document body\n * @category Elements\n *\n *\n * @overload\n * @param {HookTarget} [target=document.body] The target element to lock scroll on\n * @param {UseLockScrollOptions} [options] The options for scroll locking\n * @returns {void}\n *\n * @example\n * const { lock, unlock, value, toggle } = useLockScroll(ref);\n *\n * @overload\n * @template Target The target element\n * @param {UseLockScrollOptions} [options] The options for scroll locking\n * @returns {StateRef<Target>} Ref to attach to element, or locks body scroll by default\n *\n * @example\n * const { ref, lock, unlock, value, toggle } = useLockScroll();\n */\nexport const useLockScroll = ((...params: any[]): any => {\n  const target = (isTarget(params[0]) ? params[0] : undefined) as HookTarget | undefined;\n  const options = (target ? params[1] : params[0]) as UseLockScrollOptions | undefined;\n\n  const enabled = options?.enabled ?? true;\n  const [locked, setLocked] = useState(enabled);\n\n  const internalRef = useRefState<Element>();\n\n  const elementRef = useRef<Element>(null);\n\n  useIsomorphicLayoutEffect(() => {\n    const element =\n      ((target ? getElement(target) : internalRef.current) as Element) ?? document.body;\n\n    if (!(element instanceof HTMLElement)) return;\n\n    elementRef.current = element;\n\n    if (!enabled) return;\n\n    const originalStyle = window.getComputedStyle(element).overflow;\n    (elementRef.current as any).__originalOverflow = originalStyle;\n    element.style.overflow = 'hidden';\n\n    return () => {\n      element.style.overflow = originalStyle;\n      elementRef.current = null;\n    };\n  }, [target, internalRef.state, enabled]);\n\n  const lock = () => {\n    if (!elementRef.current) return;\n    const element = elementRef.current as HTMLElement;\n    (elementRef.current as any).__originalOverflow = window.getComputedStyle(element).overflow;\n    element.style.overflow = 'hidden';\n    setLocked(true);\n  };\n\n  const unlock = () => {\n    console.log('unlock', (elementRef.current as any).__originalOverflow);\n    if (!elementRef.current) return;\n    const element = elementRef.current as HTMLElement;\n    element.style.overflow = (elementRef.current as any).__originalOverflow;\n    setLocked(false);\n  };\n\n  const toggle = () => {\n    console.log('toggle', locked, locked ? 'unlock' : 'lock');\n    if (locked) return unlock();\n    lock();\n  };\n\n  if (target)\n    return {\n      value: locked,\n      lock,\n      unlock,\n      toggle\n    };\n  return {\n    ref: internalRef,\n    value: locked,\n    lock,\n    unlock,\n    toggle\n  };\n}) as UseLockScroll;\n"],"names":["useLockScroll","params","target","isTarget","enabled","locked","setLocked","useState","internalRef","useRefState","elementRef","useRef","useIsomorphicLayoutEffect","element","getElement","originalStyle","lock","unlock","toggle"],"mappings":"2TA8DaA,EAAiB,IAAIC,IAAuB,CACvD,MAAMC,EAAUC,EAAAA,SAASF,EAAO,CAAC,CAAC,EAAIA,EAAO,CAAC,EAAI,OAG5CG,GAFWF,EAASD,EAAO,CAAC,EAAIA,EAAO,CAAC,IAErB,SAAW,GAC9B,CAACI,EAAQC,CAAS,EAAIC,EAAAA,SAASH,CAAO,EAEtCI,EAAcC,EAAAA,YAAA,EAEdC,EAAaC,EAAAA,OAAgB,IAAI,EAEvCC,EAAAA,0BAA0B,IAAM,CAC9B,MAAMC,GACFX,EAASY,EAAAA,WAAWZ,CAAM,EAAIM,EAAY,UAAwB,SAAS,KAM/E,GAJI,EAAEK,aAAmB,eAEzBH,EAAW,QAAUG,EAEjB,CAACT,GAAS,OAEd,MAAMW,EAAgB,OAAO,iBAAiBF,CAAO,EAAE,SACtD,OAAAH,EAAW,QAAgB,mBAAqBK,EACjDF,EAAQ,MAAM,SAAW,SAElB,IAAM,CACXA,EAAQ,MAAM,SAAWE,EACzBL,EAAW,QAAU,IAAA,CACvB,EACC,CAACR,EAAQM,EAAY,MAAOJ,CAAO,CAAC,EAEvC,MAAMY,EAAO,IAAM,CACjB,GAAI,CAACN,EAAW,QAAS,OACzB,MAAMG,EAAUH,EAAW,QAC1BA,EAAW,QAAgB,mBAAqB,OAAO,iBAAiBG,CAAO,EAAE,SAClFA,EAAQ,MAAM,SAAW,SACzBP,EAAU,EAAI,CAAA,EAGVW,EAAS,IAAM,CAEnB,GADA,QAAQ,IAAI,SAAWP,EAAW,QAAgB,kBAAkB,EAChE,CAACA,EAAW,QAAS,OACzB,MAAMG,EAAUH,EAAW,QAC3BG,EAAQ,MAAM,SAAYH,EAAW,QAAgB,mBACrDJ,EAAU,EAAK,CAAA,EAGXY,EAAS,IAAM,CAEnB,GADA,QAAQ,IAAI,SAAUb,EAAQA,EAAS,SAAW,MAAM,EACpDA,SAAeY,EAAA,EACnBD,EAAA,CAAK,EAGP,OAAId,EACK,CACL,MAAOG,EACP,KAAAW,EACA,OAAAC,EACA,OAAAC,CAAA,EAEG,CACL,IAAKV,EACL,MAAOH,EACP,KAAAW,EACA,OAAAC,EACA,OAAAC,CAAA,CAEJ"}