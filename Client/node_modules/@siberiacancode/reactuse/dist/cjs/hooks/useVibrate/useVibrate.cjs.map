{"version":3,"file":"useVibrate.cjs","sources":["../../../../src/hooks/useVibrate/useVibrate.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/** The use vibrate pattern type */\nexport type UseVibratePattern = number | number[];\n\n/** The use vibrate return type */\nexport interface UseVibrateReturn {\n  /** The support indicator */\n  supported: boolean;\n  /** The vibrating indicator */\n  vibrating: boolean;\n  /** The pause function */\n  pause: () => void;\n  /** The resume function */\n  resume: () => void;\n  /** The start function */\n  start: (interval: number) => void;\n  /** The vibrate function */\n  trigger: (pattern?: UseVibratePattern) => void;\n}\n\n/**\n * @name useVibrate\n * @description - Hook that provides vibrate api\n * @category Browser\n *\n * @browserapi navigator.vibrate https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vibrate\n *\n * @overload\n * @param {UseVibratePattern} options.pattern The pattern for vibration\n * @param {number} [options.interval=0] Time in milliseconds between vibrations\n * @returns {UseVibrateReturn} An object containing support indicator, start vibration and stop vibration functions\n *\n * @example\n * const { supported, active, vibrate, stop, pause, resume } = useVibrate(1000);\n */\nexport const useVibrate = (pattern: UseVibratePattern, interval: number = 0) => {\n  const supported = typeof navigator !== 'undefined' && 'vibrate' in navigator;\n\n  const intervalIdRef = useRef<ReturnType<typeof setInterval>>(undefined);\n  const [active, setActive] = useState(false);\n\n  const trigger = (internalPattern: UseVibratePattern = pattern) => {\n    if (!supported) return;\n    navigator.vibrate(internalPattern);\n  };\n\n  const stop = () => {\n    if (!supported) return;\n    navigator.vibrate(0);\n    setActive(false);\n    if (intervalIdRef.current) clearInterval(intervalIdRef.current);\n  };\n\n  const pause = () => {\n    if (!supported) return;\n    setActive(false);\n    if (intervalIdRef.current) clearInterval(intervalIdRef.current);\n  };\n\n  const resume = (intervalInterval: number = interval) => {\n    if (!supported) return;\n    if (intervalIdRef.current) clearInterval(intervalIdRef.current);\n    setActive(true);\n    intervalIdRef.current = setInterval(trigger, intervalInterval);\n  };\n\n  useEffect(() => {\n    if (!supported || interval <= 0) return;\n    resume(interval);\n    return () => {\n      stop();\n    };\n  }, [interval, pattern]);\n\n  return { supported, trigger, stop, active, pause, resume };\n};\n"],"names":["useVibrate","pattern","interval","supported","intervalIdRef","useRef","active","setActive","useState","trigger","internalPattern","stop","pause","resume","intervalInterval","useEffect"],"mappings":"yGAoCaA,EAAa,CAACC,EAA4BC,EAAmB,IAAM,CAC9E,MAAMC,EAAY,OAAO,UAAc,KAAe,YAAa,UAE7DC,EAAgBC,EAAAA,OAAuC,MAAS,EAChE,CAACC,EAAQC,CAAS,EAAIC,EAAAA,SAAS,EAAK,EAEpCC,EAAU,CAACC,EAAqCT,IAAY,CAC3DE,GACL,UAAU,QAAQO,CAAe,CAAA,EAG7BC,EAAO,IAAM,CACZR,IACL,UAAU,QAAQ,CAAC,EACnBI,EAAU,EAAK,EACXH,EAAc,SAAS,cAAcA,EAAc,OAAO,EAAA,EAG1DQ,EAAQ,IAAM,CACbT,IACLI,EAAU,EAAK,EACXH,EAAc,SAAS,cAAcA,EAAc,OAAO,EAAA,EAG1DS,EAAS,CAACC,EAA2BZ,IAAa,CACjDC,IACDC,EAAc,SAAS,cAAcA,EAAc,OAAO,EAC9DG,EAAU,EAAI,EACdH,EAAc,QAAU,YAAYK,EAASK,CAAgB,EAAA,EAG/DC,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAI,GAACZ,GAAaD,GAAY,GAC9B,OAAAW,EAAOX,CAAQ,EACR,IAAM,CACXS,EAAA,CAAK,CACP,EACC,CAACT,EAAUD,CAAO,CAAC,EAEf,CAAE,UAAAE,EAAW,QAAAM,EAAS,KAAAE,EAAM,OAAAL,EAAQ,MAAAM,EAAO,OAAAC,CAAA,CACpD"}