{"version":3,"file":"useThrottleCallback.cjs","sources":["../../../../src/hooks/useThrottleCallback/useThrottleCallback.ts"],"sourcesContent":["import { useMemo, useRef } from 'react';\n\nexport type ThrottledCallback<Params extends unknown[]> = ((...args: Params) => void) & {\n  cancel: () => void;\n};\n\n/**\n * @name useThrottleCallback\n * @description - Hook that creates a throttled callback\n * @category Utilities\n *\n * @template Params The type of the params\n * @template Return The type of the return\n * @param {(...args: Params) => Return} callback The callback function\n * @param {number} delay The delay in milliseconds\n * @returns {(...args: Params) => Return} The callback with throttle\n *\n * @example\n * const throttled = useThrottleCallback(() => console.log('callback'), 500);\n */\nexport const useThrottleCallback = <Params extends unknown[], Return>(\n  callback: (...args: Params) => Return,\n  delay: number\n): ThrottledCallback<Params> => {\n  const internalCallbackRef = useRef(callback);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const isCalledRef = useRef(false);\n  const delayRef = useRef(delay);\n  const lastArgsRef = useRef<Params | null>(null);\n\n  internalCallbackRef.current = callback;\n  delayRef.current = delay;\n\n  const throttled = useMemo(() => {\n    const timer = () => {\n      isCalledRef.current = false;\n\n      if (!lastArgsRef.current) return;\n      internalCallbackRef.current.apply(this, lastArgsRef.current);\n      lastArgsRef.current = null;\n      setTimeout(timer, delayRef.current);\n    };\n\n    const cancel = () => {\n      if (!timeoutRef.current) return;\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n      isCalledRef.current = false;\n    };\n\n    const throttledCallback = function (this: any, ...args: Params) {\n      lastArgsRef.current = args;\n      if (isCalledRef.current) return;\n\n      internalCallbackRef.current.apply(this, args);\n      isCalledRef.current = true;\n      timeoutRef.current = setTimeout(timer, delayRef.current);\n    };\n\n    throttledCallback.cancel = cancel;\n\n    cancel();\n    return throttledCallback;\n  }, [delay]);\n\n  return throttled;\n};\n"],"names":["useThrottleCallback","callback","delay","internalCallbackRef","useRef","timeoutRef","isCalledRef","delayRef","lastArgsRef","useMemo","timer","cancel","throttledCallback","args"],"mappings":"yGAoBaA,EAAsB,CACjCC,EACAC,IAC8B,CAC9B,MAAMC,EAAsBC,EAAAA,OAAOH,CAAQ,EACrCI,EAAaD,EAAAA,OAA6C,IAAI,EAC9DE,EAAcF,EAAAA,OAAO,EAAK,EAC1BG,EAAWH,EAAAA,OAAOF,CAAK,EACvBM,EAAcJ,EAAAA,OAAsB,IAAI,EAE9C,OAAAD,EAAoB,QAAUF,EAC9BM,EAAS,QAAUL,EAEDO,EAAAA,QAAQ,IAAM,CAC9B,MAAMC,EAAQ,IAAM,CAClBJ,EAAY,QAAU,GAEjBE,EAAY,UACjBL,EAAoB,QAAQ,MAAM,OAAMK,EAAY,OAAO,EAC3DA,EAAY,QAAU,KACtB,WAAWE,EAAOH,EAAS,OAAO,EAAA,EAG9BI,EAAS,IAAM,CACdN,EAAW,UAChB,aAAaA,EAAW,OAAO,EAC/BA,EAAW,QAAU,KACrBC,EAAY,QAAU,GAAA,EAGlBM,EAAoB,YAAwBC,EAAc,CAC9DL,EAAY,QAAUK,EAClB,CAAAP,EAAY,UAEhBH,EAAoB,QAAQ,MAAM,KAAMU,CAAI,EAC5CP,EAAY,QAAU,GACtBD,EAAW,QAAU,WAAWK,EAAOH,EAAS,OAAO,EAAA,EAGzD,OAAAK,EAAkB,OAASD,EAE3BA,EAAA,EACOC,CAAA,EACN,CAACV,CAAK,CAAC,CAGZ"}