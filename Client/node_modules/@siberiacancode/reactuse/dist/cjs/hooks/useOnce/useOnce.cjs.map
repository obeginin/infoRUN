{"version":3,"file":"useOnce.cjs","sources":["../../../../src/hooks/useOnce/useOnce.ts"],"sourcesContent":["import type { EffectCallback } from 'react';\n\nimport { useEffect, useRef } from 'react';\n\n/**\n * @name useEffectOnce\n * @description - Hook that runs an effect only once. Please do not use it in production code!\n * @category Humor\n *\n * @warning - This hook will run effect only once even in strict mode. Please do not use it in production code!\n *\n * @param {EffectCallback} effect The effect to run\n *\n * @example\n * useOnce(() => console.log('effect once'));\n */\nexport function useOnce(effect: EffectCallback) {\n  const cleanupRef = useRef<ReturnType<EffectCallback>>(undefined);\n  const hasRunRef = useRef(false);\n  const hasRenderedAfterRun = useRef(false);\n\n  if (hasRunRef.current) {\n    hasRenderedAfterRun.current = true;\n  }\n\n  useEffect(() => {\n    if (hasRunRef.current) return;\n\n    hasRunRef.current = true;\n    cleanupRef.current = effect();\n\n    return () => {\n      if (!hasRenderedAfterRun.current) return;\n\n      if (typeof cleanupRef.current === 'function') {\n        cleanupRef.current();\n      }\n    };\n  }, []);\n}\n"],"names":["useOnce","effect","cleanupRef","useRef","hasRunRef","hasRenderedAfterRun","useEffect"],"mappings":"yGAgBO,SAASA,EAAQC,EAAwB,CAC9C,MAAMC,EAAaC,EAAAA,OAAmC,MAAS,EACzDC,EAAYD,EAAAA,OAAO,EAAK,EACxBE,EAAsBF,EAAAA,OAAO,EAAK,EAEpCC,EAAU,UACZC,EAAoB,QAAU,IAGhCC,EAAAA,UAAU,IAAM,CACd,GAAI,CAAAF,EAAU,QAEd,OAAAA,EAAU,QAAU,GACpBF,EAAW,QAAUD,EAAA,EAEd,IAAM,CACNI,EAAoB,SAErB,OAAOH,EAAW,SAAY,YAChCA,EAAW,QAAA,CACb,CACF,EACC,EAAE,CACP"}