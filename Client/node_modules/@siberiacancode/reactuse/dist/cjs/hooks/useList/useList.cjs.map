{"version":3,"file":"useList.cjs","sources":["../../../../src/hooks/useList/useList.ts"],"sourcesContent":["import { useState } from 'react';\n\n/** The use list return type */\nexport interface UseListReturn<Item> {\n  /** The current list of items */\n  value: Item[];\n  /** Clears the list */\n  clear: () => void;\n  /** Inserts an item at the specified index */\n  insertAt: (insertAtIndex: number, item: Item) => void;\n  /** Adds an item to the list */\n  push: (item: Item) => void;\n  /** Removes an item from the list */\n  removeAt: (removeAtIndex: number) => void;\n  /** Sets the list of items */\n  set: (list: Item[]) => void;\n  /** Updates an item at the specified index */\n  updateAt: (updateAtIndex: number, item: Item) => void;\n}\n\n/**\n * @name useList\n * @description - Hook that provides state and helper methods to manage a list of items\n * @category State\n *\n * @template Item The type of the item\n * @param {Item[] | (() => Item[])} initialList The initial list of items\n * @returns {UseListReturn} An object containing the current list and functions to interact with the list\n *\n * @example\n * const { value, set, push, removeAt, insertAt, updateAt, clear } = useList();\n */\nexport const useList = <Item>(initialList: Item[] = []) => {\n  const [list, setList] = useState(initialList);\n\n  const push = (item: Item) => setList((prevList) => [...prevList, item]);\n\n  const removeAt = (removeAtIndex: number) =>\n    setList((prevList) => [\n      ...prevList.slice(0, removeAtIndex),\n      ...prevList.slice(removeAtIndex + 1)\n    ]);\n\n  const insertAt = (insertAtIndex: number, item: Item) =>\n    setList((l) => [...l.slice(0, insertAtIndex), item, ...l.slice(insertAtIndex)]);\n\n  const updateAt = (updateAtIndex: number, item: Item) =>\n    setList((prevList) =>\n      prevList.map((element, index) => (index === updateAtIndex ? item : element))\n    );\n\n  const clear = () => setList([]);\n\n  const reset = () => setList(initialList);\n\n  return {\n    value: list,\n    set: setList,\n    push,\n    removeAt,\n    insertAt,\n    updateAt,\n    clear,\n    reset\n  };\n};\n"],"names":["useList","initialList","list","setList","useState","item","prevList","removeAtIndex","insertAtIndex","l","updateAtIndex","element","index"],"mappings":"yGAgCaA,EAAU,CAAOC,EAAsB,KAAO,CACzD,KAAM,CAACC,EAAMC,CAAO,EAAIC,EAAAA,SAASH,CAAW,EAsB5C,MAAO,CACL,MAAOC,EACP,IAAKC,EACL,KAvBYE,GAAeF,EAASG,GAAa,CAAC,GAAGA,EAAUD,CAAI,CAAC,EAwBpE,SAtBgBE,GAChBJ,EAASG,GAAa,CACpB,GAAGA,EAAS,MAAM,EAAGC,CAAa,EAClC,GAAGD,EAAS,MAAMC,EAAgB,CAAC,CAAA,CACpC,EAmBD,SAjBe,CAACC,EAAuBH,IACvCF,EAASM,GAAM,CAAC,GAAGA,EAAE,MAAM,EAAGD,CAAa,EAAGH,EAAM,GAAGI,EAAE,MAAMD,CAAa,CAAC,CAAC,EAiB9E,SAfe,CAACE,EAAuBL,IACvCF,EAASG,GACPA,EAAS,IAAI,CAACK,EAASC,IAAWA,IAAUF,EAAgBL,EAAOM,CAAQ,CAAA,EAc7E,MAXY,IAAMR,EAAQ,EAAE,EAY5B,MAVY,IAAMA,EAAQF,CAAW,CAUrC,CAEJ"}