{"version":3,"file":"useLockCallback.cjs","sources":["../../../../src/hooks/useLockCallback/useLockCallback.ts"],"sourcesContent":["import { useRef } from 'react';\n\n/**\n * @name useLockCallback\n * @description - Hook that prevents a callback from being executed multiple times simultaneously\n * @category Async\n *\n * @param {Function} callback The callback to be locked\n * @returns {Function} The locked callback\n *\n * @example\n * const lockedCallback = useLockCallback(() => promise());\n */\nexport const useLockCallback = <Callback extends (...args: any[]) => any>(callback: Callback) => {\n  const lockRef = useRef(false);\n  const internalCallbackRef = useRef(callback);\n  internalCallbackRef.current = callback;\n\n  return async (...args: Parameters<Callback>) => {\n    if (lockRef.current) return;\n    lockRef.current = true;\n\n    try {\n      return await internalCallbackRef.current(...args);\n    } finally {\n      lockRef.current = false;\n    }\n  };\n};\n"],"names":["useLockCallback","callback","lockRef","useRef","internalCallbackRef","args"],"mappings":"yGAaaA,EAA6DC,GAAuB,CAC/F,MAAMC,EAAUC,EAAAA,OAAO,EAAK,EACtBC,EAAsBD,EAAAA,OAAOF,CAAQ,EAC3C,OAAAG,EAAoB,QAAUH,EAEvB,SAAUI,IAA+B,CAC9C,GAAI,CAAAH,EAAQ,QACZ,CAAAA,EAAQ,QAAU,GAElB,GAAI,CACF,OAAO,MAAME,EAAoB,QAAQ,GAAGC,CAAI,CAAA,QAClD,CACEH,EAAQ,QAAU,EAAA,EACpB,CAEJ"}