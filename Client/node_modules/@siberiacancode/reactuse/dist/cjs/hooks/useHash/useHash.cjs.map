{"version":3,"file":"useHash.cjs","sources":["../../../../src/hooks/useHash/useHash.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst getHash = () => decodeURIComponent(window.location.hash.replace('#', ''));\n\n/** The use hash return type */\ntype UseHashReturn = [string, (value: string) => void];\n\n/**\n * @name useHash\n * @description - Hook that manages the hash value\n * @category State\n *\n * @param {string} [initialValue] The initial hash value if no hash exists\n * @returns {UseHashReturn} An array containing the hash value and a function to set the hash value\n *\n * @example\n * const [hash, setHash] = useHash(\"initial\");\n */\nexport const useHash = (\n  initialValue = '',\n  mode: 'initial' | 'replace' = 'replace'\n): UseHashReturn => {\n  const [hash, setHash] = useState(() => {\n    if (typeof window === 'undefined') return initialValue;\n    return getHash() || initialValue;\n  });\n\n  const set = (value: string) => {\n    window.location.hash = value;\n    setHash(value);\n  };\n\n  useEffect(() => {\n    if (mode === 'replace') window.location.hash = hash;\n\n    const onHashChange = () => setHash(getHash());\n    window.addEventListener('hashchange', onHashChange);\n    return () => {\n      window.removeEventListener('hashchange', onHashChange);\n    };\n  }, []);\n\n  return [hash, set] as const;\n};\n"],"names":["getHash","useHash","initialValue","mode","hash","setHash","useState","set","value","useEffect","onHashChange"],"mappings":"yGAEMA,EAAU,IAAM,mBAAmB,OAAO,SAAS,KAAK,QAAQ,IAAK,EAAE,CAAC,EAgBjEC,EAAU,CACrBC,EAAe,GACfC,EAA8B,YACZ,CAClB,KAAM,CAACC,EAAMC,CAAO,EAAIC,EAAAA,SAAS,IAC3B,OAAO,OAAW,IAAoBJ,EACnCF,KAAaE,CACrB,EAEKK,EAAOC,GAAkB,CAC7B,OAAO,SAAS,KAAOA,EACvBH,EAAQG,CAAK,CAAA,EAGfC,OAAAA,EAAAA,UAAU,IAAM,CACVN,IAAS,YAAW,OAAO,SAAS,KAAOC,GAE/C,MAAMM,EAAe,IAAML,EAAQL,GAAS,EAC5C,cAAO,iBAAiB,aAAcU,CAAY,EAC3C,IAAM,CACX,OAAO,oBAAoB,aAAcA,CAAY,CAAA,CACvD,EACC,EAAE,EAEE,CAACN,EAAMG,CAAG,CACnB"}