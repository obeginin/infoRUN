{"version":3,"file":"useFps.cjs","sources":["../../../../src/hooks/useFps/useFps.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\n/**\n * @name useFps\n * @description - Hook that measures frames per second\n * @category Browser\n *\n * @browserapi requestAnimationFrame https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n *\n * @returns {number} A number which determines frames per second\n *\n * @example\n * const fps = useFps();\n */\nexport const useFps = () => {\n  const [fps, setFps] = useState(0);\n\n  useEffect(() => {\n    let frameCount = 0;\n    let startTime = performance.now();\n    let rafId: number;\n\n    const onRequestAnimationFrame = () => {\n      frameCount += 1;\n      const currentTime = performance.now();\n      const elapsedTime = currentTime - startTime;\n\n      if (elapsedTime >= 1000) {\n        const calculatedFps = Math.round((frameCount * 1000) / elapsedTime);\n        setFps(calculatedFps);\n        frameCount = 0;\n        startTime = currentTime;\n      }\n\n      rafId = requestAnimationFrame(onRequestAnimationFrame);\n    };\n\n    rafId = requestAnimationFrame(onRequestAnimationFrame);\n\n    return () => {\n      cancelAnimationFrame(rafId);\n    };\n  }, []);\n\n  return fps;\n};\n"],"names":["useFps","fps","setFps","useState","useEffect","frameCount","startTime","rafId","onRequestAnimationFrame","currentTime","elapsedTime","calculatedFps"],"mappings":"yGAcaA,EAAS,IAAM,CAC1B,KAAM,CAACC,EAAKC,CAAM,EAAIC,EAAAA,SAAS,CAAC,EAEhCC,OAAAA,EAAAA,UAAU,IAAM,CACd,IAAIC,EAAa,EACbC,EAAY,YAAY,IAAA,EACxBC,EAEJ,MAAMC,EAA0B,IAAM,CACpCH,GAAc,EACd,MAAMI,EAAc,YAAY,IAAA,EAC1BC,EAAcD,EAAcH,EAElC,GAAII,GAAe,IAAM,CACvB,MAAMC,EAAgB,KAAK,MAAON,EAAa,IAAQK,CAAW,EAClER,EAAOS,CAAa,EACpBN,EAAa,EACbC,EAAYG,CAAA,CAGdF,EAAQ,sBAAsBC,CAAuB,CAAA,EAGvD,OAAAD,EAAQ,sBAAsBC,CAAuB,EAE9C,IAAM,CACX,qBAAqBD,CAAK,CAAA,CAC5B,EACC,EAAE,EAEEN,CACT"}