{"version":3,"file":"useToggle.cjs","sources":["../../../../src/hooks/useToggle/useToggle.ts"],"sourcesContent":["import type { SetStateAction } from 'react';\n\nimport { useReducer } from 'react';\n\n/** The use toggle return type */\nexport type UseToggleReturn<Value> = readonly [Value, (value?: Value) => void];\n\n/**\n * @name useToggle\n * @description - Hook that create toggle\n * @category State\n *\n * @template Value The type of the value\n * @param {Value[]} [values=[false, true]] The values to toggle\n *\n * @example\n * const [on, toggle] = useToggle();\n *\n * @example\n * const [value, toggle] = useToggle(['light', 'dark'] as const);\n */\nexport const useToggle = <Value = boolean>(values: readonly Value[] = [false, true] as any) => {\n  const [[option], toggle] = useReducer((state: Value[], action: SetStateAction<Value>) => {\n    const value =\n      typeof action === 'function' ? (action as (prevState: Value) => Value)(state[0]) : action;\n    const index = Math.abs(state.indexOf(value));\n    return state.slice(index).concat(state.slice(0, index));\n  }, values as Value[]);\n\n  return [option, toggle as (value?: SetStateAction<Value>) => void] as const;\n};\n"],"names":["useToggle","values","option","toggle","useReducer","state","action","value","index"],"mappings":"yGAqBaA,EAAY,CAAkBC,EAA2B,CAAC,GAAO,EAAI,IAAa,CAC7F,KAAM,CAAC,CAACC,CAAM,EAAGC,CAAM,EAAIC,aAAW,CAACC,EAAgBC,IAAkC,CACvF,MAAMC,EACJ,OAAOD,GAAW,WAAcA,EAAuCD,EAAM,CAAC,CAAC,EAAIC,EAC/EE,EAAQ,KAAK,IAAIH,EAAM,QAAQE,CAAK,CAAC,EAC3C,OAAOF,EAAM,MAAMG,CAAK,EAAE,OAAOH,EAAM,MAAM,EAAGG,CAAK,CAAC,CAAA,EACrDP,CAAiB,EAEpB,MAAO,CAACC,EAAQC,CAAiD,CACnE"}