{"version":3,"file":"useRefState.cjs","sources":["../../../../src/hooks/useRefState/useRefState.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport interface StateRef<Value> {\n  (node: Value): void;\n  current: Value;\n  state?: Value;\n}\n\nconst createRefState = <Value>(\n  initialValue: Value | undefined,\n  setState: (value: Value) => void\n) => {\n  let temp = initialValue;\n  function ref(value: Value) {\n    if (temp === value) return;\n    temp = value;\n    setState(temp);\n  }\n\n  Object.defineProperty(ref, 'current', {\n    get() {\n      return temp;\n    },\n    set(value: Value) {\n      if (temp === value) return;\n      temp = value;\n      setState(temp);\n    },\n    configurable: true,\n    enumerable: true\n  });\n\n  return ref as StateRef<Value>;\n};\n\n/**\n * @name useRefState\n * @description - Hook that returns the state reference of the value\n * @category State\n *\n * @template Value The type of the value\n * @param {Value} [initialValue] The initial value\n * @returns {StateRef<Value>} The current value\n *\n * @example\n * const internalRefState = useRefState();\n */\nexport const useRefState = <Value>(initialValue?: Value) => {\n  const [state, setState] = useState<Value | undefined>(initialValue);\n  const [ref] = useState(() => createRefState<Value>(initialValue, setState));\n  ref.state = state;\n  return ref;\n};\n"],"names":["createRefState","initialValue","setState","temp","ref","value","useRefState","state","useState"],"mappings":"yGAQMA,EAAiB,CACrBC,EACAC,IACG,CACH,IAAIC,EAAOF,EACX,SAASG,EAAIC,EAAc,CACrBF,IAASE,IACbF,EAAOE,EACPH,EAASC,CAAI,EAAA,CAGf,cAAO,eAAeC,EAAK,UAAW,CACpC,KAAM,CACJ,OAAOD,CAAA,EAET,IAAIE,EAAc,CACZF,IAASE,IACbF,EAAOE,EACPH,EAASC,CAAI,EAAA,EAEf,aAAc,GACd,WAAY,EAAA,CACb,EAEMC,CACT,EAcaE,EAAsBL,GAAyB,CAC1D,KAAM,CAACM,EAAOL,CAAQ,EAAIM,EAAAA,SAA4BP,CAAY,EAC5D,CAACG,CAAG,EAAII,EAAAA,SAAS,IAAMR,EAAsBC,EAAcC,CAAQ,CAAC,EAC1E,OAAAE,EAAI,MAAQG,EACLH,CACT"}