{"version":3,"file":"useDisplayMedia.cjs","sources":["../../../../src/hooks/useDisplayMedia/useDisplayMedia.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nimport type { HookTarget } from '@/utils/helpers';\n\nimport { getElement, isTarget } from '@/utils/helpers';\n\nimport type { StateRef } from '../useRefState/useRefState';\n\nimport { useRefState } from '../useRefState/useRefState';\n\n/** The use display media return type */\nexport interface UseDisplayMediaReturn {\n  /** Whether screen sharing is currently active */\n  sharing: boolean;\n  /** The media stream object */\n  stream: MediaStream | null;\n  /** Whether the display media API is supported */\n  supported: boolean;\n  /** Start screen sharing */\n  start: () => Promise<void>;\n  /** Stop screen sharing */\n  stop: () => void;\n}\n\n/** The use display media options type */\nexport interface UseDisplayMediaOptions {\n  /** Whether to enable audio sharing */\n  audio?: boolean | MediaTrackConstraints;\n  /** Whether to start immediately */\n  immediately?: boolean;\n  /** Whether to enable video sharing */\n  video?: boolean | MediaTrackConstraints;\n}\n\nexport interface UseDisplayMedia {\n  (target: HookTarget, options?: UseDisplayMediaOptions): UseDisplayMediaReturn;\n\n  <Target extends HTMLVideoElement>(\n    options?: UseDisplayMediaOptions,\n    target?: never\n  ): { ref: StateRef<Target> } & UseDisplayMediaReturn;\n}\n\n/**\n * @name useDisplayMedia\n * @description - Hook that provides screen sharing functionality\n * @category Browser\n *\n * @browserapi mediaDevices.getDisplayMedia https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia\n *\n * @overload\n * @param {HookTarget} target The target video element to display the media stream\n * @param {boolean | MediaTrackConstraints} [options.audio] Whether to enable audio sharing\n * @param {boolean} [options.immediately=false] Whether to start immediately\n * @param {boolean | MediaTrackConstraints} [options.video] Whether to enable video sharing\n * @returns {UseDisplayMediaReturn} Object containing stream, sharing status and control methods\n *\n * @example\n * const { stream, sharing, start, stop } = useDisplayMedia(ref);\n *\n * @overload\n * @template Target The target video element\n * @param {boolean | MediaTrackConstraints} [options.audio] Whether to enable audio sharing\n * @param {boolean} [options.immediately=false] Whether to start immediately\n * @param {boolean | MediaTrackConstraints} [options.video] Whether to enable video sharing\n * @returns {UseDisplayMediaReturn & { ref: StateRef<HTMLVideoElement> }} Object containing stream, sharing status, control methods and ref\n *\n * @example\n * const { ref, stream, sharing, start, stop } = useDisplayMedia<HTMLVideoElement>();\n */\nexport const useDisplayMedia = ((...params: any[]) => {\n  const supported =\n    typeof navigator !== 'undefined' &&\n    'mediaDevices' in navigator &&\n    !!navigator.mediaDevices &&\n    'getDisplayMedia' in navigator.mediaDevices;\n  const target = (isTarget(params[0]) ? params[0] : undefined) as HookTarget | undefined;\n  const options = (params[1] ? params[1] : params[0]) as UseDisplayMediaOptions | undefined;\n  const immediately = options?.immediately ?? false;\n\n  const [sharing, setSharing] = useState(false);\n\n  const elementRef = useRef<HTMLVideoElement>(null);\n  const streamRef = useRef<MediaStream>(null);\n  const internalRef = useRefState<Element>();\n\n  const stop = () => {\n    if (!streamRef.current || !supported || !elementRef.current) return;\n\n    setSharing(false);\n    elementRef.current.srcObject = null;\n    streamRef.current.getTracks().forEach((track) => track.stop());\n    streamRef.current = null;\n  };\n\n  const start = async () => {\n    if (!supported || !elementRef.current) return;\n\n    const displayMedia = await navigator.mediaDevices.getDisplayMedia({\n      video: options?.video,\n      audio: options?.audio\n    });\n\n    setSharing(true);\n    streamRef.current = displayMedia;\n    elementRef.current.srcObject = displayMedia;\n\n    displayMedia.getTracks().forEach((track) => (track.onended = stop));\n    return displayMedia;\n  };\n\n  useEffect(() => {\n    if (!supported || (!target && !internalRef.state)) return;\n\n    const element = (target ? getElement(target) : internalRef.current) as HTMLVideoElement;\n\n    if (!element) return;\n\n    elementRef.current = element;\n\n    if (!immediately) return;\n\n    start();\n\n    return () => {\n      stop();\n    };\n  }, [target, internalRef.state]);\n\n  if (target)\n    return {\n      stream: streamRef.current,\n      sharing,\n      supported,\n      start,\n      stop\n    };\n\n  return {\n    stream: streamRef.current,\n    sharing,\n    supported,\n    start,\n    stop,\n    ref: internalRef\n  };\n}) as UseDisplayMedia;\n"],"names":["useDisplayMedia","params","supported","target","isTarget","options","immediately","sharing","setSharing","useState","elementRef","useRef","streamRef","internalRef","useRefState","stop","track","start","displayMedia","useEffect","element","getElement"],"mappings":"mPAsEaA,EAAmB,IAAIC,IAAkB,CACpD,MAAMC,EACJ,OAAO,UAAc,KACrB,iBAAkB,WAClB,CAAC,CAAC,UAAU,cACZ,oBAAqB,UAAU,aAC3BC,EAAUC,EAAAA,SAASH,EAAO,CAAC,CAAC,EAAIA,EAAO,CAAC,EAAI,OAC5CI,EAAWJ,EAAO,CAAC,EAAIA,EAAO,CAAC,EAAIA,EAAO,CAAC,EAC3CK,EAAcD,GAAS,aAAe,GAEtC,CAACE,EAASC,CAAU,EAAIC,EAAAA,SAAS,EAAK,EAEtCC,EAAaC,EAAAA,OAAyB,IAAI,EAC1CC,EAAYD,EAAAA,OAAoB,IAAI,EACpCE,EAAcC,EAAAA,YAAA,EAEdC,EAAO,IAAM,CACb,CAACH,EAAU,SAAW,CAACV,GAAa,CAACQ,EAAW,UAEpDF,EAAW,EAAK,EAChBE,EAAW,QAAQ,UAAY,KAC/BE,EAAU,QAAQ,YAAY,QAASI,GAAUA,EAAM,MAAM,EAC7DJ,EAAU,QAAU,KAAA,EAGhBK,EAAQ,SAAY,CACxB,GAAI,CAACf,GAAa,CAACQ,EAAW,QAAS,OAEvC,MAAMQ,EAAe,MAAM,UAAU,aAAa,gBAAgB,CAChE,MAAOb,GAAS,MAChB,MAAOA,GAAS,KAAA,CACjB,EAED,OAAAG,EAAW,EAAI,EACfI,EAAU,QAAUM,EACpBR,EAAW,QAAQ,UAAYQ,EAE/BA,EAAa,YAAY,QAASF,GAAWA,EAAM,QAAUD,CAAK,EAC3DG,CAAA,EAqBT,OAlBAC,EAAAA,UAAU,IAAM,CACd,GAAI,CAACjB,GAAc,CAACC,GAAU,CAACU,EAAY,MAAQ,OAEnD,MAAMO,EAAWjB,EAASkB,EAAAA,WAAWlB,CAAM,EAAIU,EAAY,QAE3D,GAAKO,IAELV,EAAW,QAAUU,EAEjB,EAACd,GAEL,OAAAW,EAAA,EAEO,IAAM,CACXF,EAAA,CAAK,CACP,EACC,CAACZ,EAAQU,EAAY,KAAK,CAAC,EAE1BV,EACK,CACL,OAAQS,EAAU,QAClB,QAAAL,EACA,UAAAL,EACA,MAAAe,EACA,KAAAF,CAAA,EAGG,CACL,OAAQH,EAAU,QAClB,QAAAL,EACA,UAAAL,EACA,MAAAe,EACA,KAAAF,EACA,IAAKF,CAAA,CAET"}