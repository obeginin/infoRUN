{"version":3,"file":"useFileDialog.cjs","sources":["../../../../src/hooks/useFileDialog/useFileDialog.ts"],"sourcesContent":["import type { ComponentProps } from 'react';\n\nimport { useEffect, useRef, useState } from 'react';\n\n/* The use file dialog options */\nexport interface UseFileDialogOptions extends Pick<ComponentProps<'input'>, 'accept' | 'multiple'> {\n  /** The capture value */\n  capture?: string;\n  /** The reset value */\n  reset?: boolean;\n}\n\nconst DEFAULT_OPTIONS = {\n  multiple: true,\n  accept: '*',\n  reset: false\n} satisfies UseFileDialogOptions;\n\n/* The use file dialog return type */\nexport interface UseFileDialogReturn {\n  /** The selected files */\n  value: FileList | null;\n  /** The open function */\n  open: (openParams?: UseFileDialogOptions) => void;\n  /** The reset function */\n  reset: () => void;\n}\n\nexport interface UseFileDialog {\n  (\n    callback?: (value: FileList | null) => void,\n    options?: UseFileDialogOptions\n  ): UseFileDialogReturn;\n\n  (options?: UseFileDialogOptions, callback?: never): UseFileDialogReturn;\n}\n\n/**\n * @name useFileDialog\n * @description - Hook to handle file input\n * @category Elements\n *\n * @overload\n * @param {(value: FileList | null) => void} callback The callback to execute when a file is selected\n * @param {boolean} [options.multiple=true] Whether multiple files can be selected\n * @param {string} [options.accept='*'] The accepted file types\n * @param {boolean} [options.reset=false] Whether the input should be reset when the callback is called\n * @param {string} [options.capture] The capture value\n * @returns {UseFileDialogReturn} An object containing the selected files\n *\n * @example\n * const { values, open, reset } = useFileDialog((value) => console.log(value));\n *\n * @overload\n * @param {boolean} [options.multiple=true] Whether multiple files can be selected\n * @param {string} [options.accept='*'] The accepted file types\n * @param {boolean} [options.reset=false] Whether the input should be reset when the callback is called\n * @param {string} [options.capture] The capture value\n * @returns {UseFileDialogReturn} An object containing the selected files\n *\n * @example\n * const { values, open, reset } = useFileDialog({ accept: 'image/*' });\n */\nexport const useFileDialog = ((...params: any[]) => {\n  const callback = (typeof params[0] === 'function' ? params[0] : undefined) as\n    | ((value: FileList | null) => void)\n    | undefined;\n  const options = (callback ? params[0] : params[1]) as UseFileDialogOptions | undefined;\n\n  const [value, setValue] = useState<FileList | null>(null);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const internalCallbackRef = useRef(callback);\n  internalCallbackRef.current = callback;\n\n  const reset = () => {\n    setValue(null);\n    internalCallbackRef.current?.(null);\n    if (inputRef.current) inputRef.current.value = '';\n  };\n\n  const open = (openParams?: UseFileDialogOptions) => {\n    if (!inputRef.current) return;\n\n    inputRef.current.multiple =\n      openParams?.multiple ?? options?.multiple ?? DEFAULT_OPTIONS.multiple;\n    inputRef.current.accept = openParams?.accept ?? options?.accept ?? DEFAULT_OPTIONS.accept;\n\n    const capture = openParams?.capture ?? options?.capture;\n    if (capture) inputRef.current.capture = capture;\n\n    if (openParams?.reset ?? options?.reset ?? DEFAULT_OPTIONS.reset) reset();\n\n    inputRef.current.click();\n  };\n\n  useEffect(() => {\n    const init = () => {\n      const input = document.createElement('input');\n      input.type = 'file';\n\n      input.onchange = (event: Event) => {\n        const { files } = event.target as HTMLInputElement;\n        setValue(files);\n        internalCallbackRef.current?.(files);\n      };\n      return input;\n    };\n\n    inputRef.current = init();\n    return () => {\n      inputRef.current?.remove();\n    };\n  }, [options?.multiple, options?.accept, options?.capture, options?.reset]);\n\n  return { value, open, reset };\n}) as UseFileDialog;\n"],"names":["DEFAULT_OPTIONS","useFileDialog","params","callback","options","value","setValue","useState","inputRef","useRef","internalCallbackRef","reset","open","openParams","capture","useEffect","init","input","event","files"],"mappings":"yGAYMA,EAAkB,CACtB,SAAU,GACV,OAAQ,IACR,MAAO,EACT,EA+CaC,EAAiB,IAAIC,IAAkB,CAClD,MAAMC,EAAY,OAAOD,EAAO,CAAC,GAAM,WAAaA,EAAO,CAAC,EAAI,OAG1DE,EAAWD,EAAWD,EAAO,CAAC,EAAIA,EAAO,CAAC,EAE1C,CAACG,EAAOC,CAAQ,EAAIC,EAAAA,SAA0B,IAAI,EAClDC,EAAWC,EAAAA,OAAgC,IAAI,EAC/CC,EAAsBD,EAAAA,OAAON,CAAQ,EAC3CO,EAAoB,QAAUP,EAE9B,MAAMQ,EAAQ,IAAM,CAClBL,EAAS,IAAI,EACbI,EAAoB,UAAU,IAAI,EAC9BF,EAAS,UAASA,EAAS,QAAQ,MAAQ,GAAA,EAG3CI,EAAQC,GAAsC,CAClD,GAAI,CAACL,EAAS,QAAS,OAEvBA,EAAS,QAAQ,SACfK,GAAY,UAAYT,GAAS,UAAYJ,EAAgB,SAC/DQ,EAAS,QAAQ,OAASK,GAAY,QAAUT,GAAS,QAAUJ,EAAgB,OAEnF,MAAMc,EAAUD,GAAY,SAAWT,GAAS,QAC5CU,IAASN,EAAS,QAAQ,QAAUM,IAEpCD,GAAY,OAAST,GAAS,OAASJ,EAAgB,QAAOW,EAAA,EAElEH,EAAS,QAAQ,MAAA,CAAM,EAGzBO,OAAAA,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAO,IAAM,CACjB,MAAMC,EAAQ,SAAS,cAAc,OAAO,EAC5C,OAAAA,EAAM,KAAO,OAEbA,EAAM,SAAYC,GAAiB,CACjC,KAAM,CAAE,MAAAC,GAAUD,EAAM,OACxBZ,EAASa,CAAK,EACdT,EAAoB,UAAUS,CAAK,CAAA,EAE9BF,CAAA,EAGT,OAAAT,EAAS,QAAUQ,EAAA,EACZ,IAAM,CACXR,EAAS,SAAS,OAAA,CAAO,CAC3B,EACC,CAACJ,GAAS,SAAUA,GAAS,OAAQA,GAAS,QAASA,GAAS,KAAK,CAAC,EAElE,CAAE,MAAAC,EAAO,KAAAO,EAAM,MAAAD,CAAA,CACxB"}