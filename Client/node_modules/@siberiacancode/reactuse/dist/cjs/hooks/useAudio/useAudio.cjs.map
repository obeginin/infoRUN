{"version":3,"file":"useAudio.cjs","sources":["../../../../src/hooks/useAudio/useAudio.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/** Type sprite map */\nexport interface SpriteMap {\n  /** [start time in seconds, end time in seconds] */\n  [key: string]: [number, number];\n}\n\n/** Type use audio options */\nexport interface UseAudioOptions {\n  /** Whether audio playback is initially enabled */\n  immediately?: boolean;\n  /** Whether to stop current playback when starting a new one */\n  interrupt?: boolean;\n  /** Initial playback speed (0.5 to 2) */\n  playbackRate?: number;\n  /** Map of named audio segments for sprite-based playback */\n  sprite?: SpriteMap;\n  /** Initial volume level (0 to 1) */\n  volume?: number;\n}\n\n/** Type use audio return type */\nexport interface UseAudioReturn {\n  /** Current playback speed (0.5 to 2) */\n  playbackRate: number;\n  /** Whether audio is currently playing */\n  playing: boolean;\n  /** Current volume level (0 to 1) */\n  volume: number;\n  /** Set playback speed (0.5 to 2) */\n  changePlaybackRate: (value: number) => void;\n  /** Pause audio playback at current position */\n  pause: () => void;\n  /** Start audio playback from the beginning or specified sprite segment */\n  play: (sprite?: string) => Promise<void>;\n  /** Set audio volume level (0 to 1) */\n  setVolume: (value: number) => void;\n  /** Stop audio playback and reset position to start */\n  stop: () => void;\n}\n\n/**\n * @name useAudio\n * @description - Hook that manages audio playback with sprite support\n * @category Browser\n *\n * @browserapi Audio https://developer.mozilla.org/en-US/docs/Web/API/Audio\n *\n * @template Value The type of the value\n * @param {string} url The URL of the audio file to play\n * @param {UseAudioOptions} [options] Audio configuration options\n * @param {number} [options.volume=1] Initial volume level (0 to 1)\n * @param {number} [options.playbackRate=1] Initial playback speed (0.5 to 2)\n * @param {boolean} [options.interrupt=false] Whether to stop current playback when starting a new one\n * @param {boolean} [options.soundEnabled=true] Whether audio playback is initially enabled\n * @param {SpriteMap} [options.sprite] Map of named audio segments for sprite-based playback\n * @returns {UseAudioReturn} An object containing audio controls and state\n *\n * @example\n * const audio = useAudio(\"/path/to/sound.mp3\");\n */\nexport const useAudio = (src: string, options: UseAudioOptions = {}): UseAudioReturn => {\n  const [playing, setPlaying] = useState(false);\n  const [volume, setCurrentVolume] = useState(options.volume ?? 1);\n  const [playbackRate, setPlaybackRate] = useState(options.playbackRate ?? 1);\n\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  useEffect(() => {\n    const audio = new Audio(src);\n\n    audio.volume = volume;\n    audio.playbackRate = playbackRate;\n    audioRef.current = audio;\n\n    if (options.immediately) audio.play();\n\n    const onPlay = () => setPlaying(true);\n    const onPause = () => setPlaying(false);\n    const onEnded = () => setPlaying(false);\n    const onTimeUpdate = () => {};\n    const onVolumeChange = () => setCurrentVolume(audio.volume);\n    const onRateChange = () => setPlaybackRate(audio.playbackRate);\n\n    audio.addEventListener('play', onPlay);\n    audio.addEventListener('pause', onPause);\n    audio.addEventListener('ended', onEnded);\n    audio.addEventListener('timeupdate', onTimeUpdate);\n    audio.addEventListener('volumechange', onVolumeChange);\n    audio.addEventListener('ratechange', onRateChange);\n\n    return () => {\n      audio.removeEventListener('play', onPlay);\n      audio.removeEventListener('pause', onPause);\n      audio.removeEventListener('ended', onEnded);\n      audio.removeEventListener('timeupdate', onTimeUpdate);\n      audio.removeEventListener('volumechange', onVolumeChange);\n      audio.removeEventListener('ratechange', onRateChange);\n\n      audio.pause();\n      audio.remove();\n    };\n  }, [src]);\n\n  const stop = () => {\n    if (!audioRef.current) return;\n    audioRef.current.pause();\n    audioRef.current.currentTime = 0;\n  };\n\n  const play = async (spriteName?: string) => {\n    if (!audioRef.current) return;\n    if (options.interrupt) stop();\n\n    if (!spriteName || !options.sprite?.[spriteName]) {\n      await audioRef.current.play();\n      return;\n    }\n\n    const [start, end] = options.sprite[spriteName];\n    audioRef.current.currentTime = start;\n    await audioRef.current.play();\n\n    const checkTime = () => {\n      if (!audioRef.current) return;\n      if (audioRef.current.currentTime >= end) {\n        stop();\n      }\n\n      if (!playing) return;\n\n      requestAnimationFrame(checkTime);\n    };\n\n    requestAnimationFrame(checkTime);\n  };\n\n  const pause = () => audioRef.current?.pause();\n\n  const setVolume = (value: number) => {\n    if (!audioRef.current) return;\n    const newVolume = Math.max(0, Math.min(1, value));\n    audioRef.current.volume = newVolume;\n    setCurrentVolume(newVolume);\n  };\n\n  const changePlaybackRate = (value: number) => {\n    if (!audioRef.current) return;\n    const newRate = Math.max(0.5, Math.min(2, value));\n    audioRef.current.playbackRate = newRate;\n    setPlaybackRate(newRate);\n  };\n\n  return {\n    play,\n    pause,\n    stop,\n    playing,\n    setVolume,\n    volume,\n    changePlaybackRate,\n    playbackRate\n  };\n};\n"],"names":["useAudio","src","options","playing","setPlaying","useState","volume","setCurrentVolume","playbackRate","setPlaybackRate","audioRef","useRef","useEffect","audio","onPlay","onPause","onEnded","onTimeUpdate","onVolumeChange","onRateChange","stop","spriteName","start","end","checkTime","value","newVolume","newRate"],"mappings":"yGA8DaA,EAAW,CAACC,EAAaC,EAA2B,KAAuB,CACtF,KAAM,CAACC,EAASC,CAAU,EAAIC,EAAAA,SAAS,EAAK,EACtC,CAACC,EAAQC,CAAgB,EAAIF,EAAAA,SAASH,EAAQ,QAAU,CAAC,EACzD,CAACM,EAAcC,CAAe,EAAIJ,EAAAA,SAASH,EAAQ,cAAgB,CAAC,EAEpEQ,EAAWC,EAAAA,OAAgC,IAAI,EAErDC,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAQ,IAAI,MAAMZ,CAAG,EAE3BY,EAAM,OAASP,EACfO,EAAM,aAAeL,EACrBE,EAAS,QAAUG,EAEfX,EAAQ,aAAaW,EAAM,KAAA,EAE/B,MAAMC,EAAS,IAAMV,EAAW,EAAI,EAC9BW,EAAU,IAAMX,EAAW,EAAK,EAChCY,EAAU,IAAMZ,EAAW,EAAK,EAChCa,EAAe,IAAM,CAAA,EACrBC,EAAiB,IAAMX,EAAiBM,EAAM,MAAM,EACpDM,EAAe,IAAMV,EAAgBI,EAAM,YAAY,EAE7D,OAAAA,EAAM,iBAAiB,OAAQC,CAAM,EACrCD,EAAM,iBAAiB,QAASE,CAAO,EACvCF,EAAM,iBAAiB,QAASG,CAAO,EACvCH,EAAM,iBAAiB,aAAcI,CAAY,EACjDJ,EAAM,iBAAiB,eAAgBK,CAAc,EACrDL,EAAM,iBAAiB,aAAcM,CAAY,EAE1C,IAAM,CACXN,EAAM,oBAAoB,OAAQC,CAAM,EACxCD,EAAM,oBAAoB,QAASE,CAAO,EAC1CF,EAAM,oBAAoB,QAASG,CAAO,EAC1CH,EAAM,oBAAoB,aAAcI,CAAY,EACpDJ,EAAM,oBAAoB,eAAgBK,CAAc,EACxDL,EAAM,oBAAoB,aAAcM,CAAY,EAEpDN,EAAM,MAAA,EACNA,EAAM,OAAA,CAAO,CACf,EACC,CAACZ,CAAG,CAAC,EAER,MAAMmB,EAAO,IAAM,CACZV,EAAS,UACdA,EAAS,QAAQ,MAAA,EACjBA,EAAS,QAAQ,YAAc,EAAA,EA8CjC,MAAO,CACL,KA5CW,MAAOW,GAAwB,CAC1C,GAAI,CAACX,EAAS,QAAS,OAGvB,GAFIR,EAAQ,WAAWkB,EAAA,EAEnB,CAACC,GAAc,CAACnB,EAAQ,SAASmB,CAAU,EAAG,CAChD,MAAMX,EAAS,QAAQ,KAAA,EACvB,MAAA,CAGF,KAAM,CAACY,EAAOC,CAAG,EAAIrB,EAAQ,OAAOmB,CAAU,EAC9CX,EAAS,QAAQ,YAAcY,EAC/B,MAAMZ,EAAS,QAAQ,KAAA,EAEvB,MAAMc,EAAY,IAAM,CACjBd,EAAS,UACVA,EAAS,QAAQ,aAAea,GAClCH,EAAA,EAGGjB,GAEL,sBAAsBqB,CAAS,EAAA,EAGjC,sBAAsBA,CAAS,CAAA,EAqB/B,MAlBY,IAAMd,EAAS,SAAS,MAAA,EAmBpC,KAAAU,EACA,QAAAjB,EACA,UAnBiBsB,GAAkB,CACnC,GAAI,CAACf,EAAS,QAAS,OACvB,MAAMgB,EAAY,KAAK,IAAI,EAAG,KAAK,IAAI,EAAGD,CAAK,CAAC,EAChDf,EAAS,QAAQ,OAASgB,EAC1BnB,EAAiBmB,CAAS,CAAA,EAgB1B,OAAApB,EACA,mBAd0BmB,GAAkB,CAC5C,GAAI,CAACf,EAAS,QAAS,OACvB,MAAMiB,EAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAGF,CAAK,CAAC,EAChDf,EAAS,QAAQ,aAAeiB,EAChClB,EAAgBkB,CAAO,CAAA,EAWvB,aAAAnB,CAAA,CAEJ"}