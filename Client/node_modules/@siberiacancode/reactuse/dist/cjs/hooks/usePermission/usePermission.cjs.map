{"version":3,"file":"usePermission.cjs","sources":["../../../../src/hooks/usePermission/usePermission.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { useEvent } from '../useEvent/useEvent';\n\n/** The permission name */\nexport type UsePermissionName =\n  | 'accelerometer'\n  | 'accessibility-events'\n  | 'ambient-light-sensor'\n  | 'background-sync'\n  | 'camera'\n  | 'clipboard-read'\n  | 'clipboard-write'\n  | 'gyroscope'\n  | 'magnetometer'\n  | 'microphone'\n  | 'notifications'\n  | 'payment-handler'\n  | 'persistent-storage'\n  | 'push'\n  | 'speaker'\n  | PermissionName;\n\n/** The use permission options type */\nexport interface UsePermissionOptions {\n  /** Whether the permission is enabled */\n  enabled: boolean;\n}\n\n/** The use permission return type */\nexport interface UsePermissionReturn {\n  /** The permission state */\n  state: PermissionState;\n  /** The permission supported status */\n  supported: boolean;\n  /** The permission query function */\n  query: () => Promise<PermissionState>;\n}\n\n/**\n *  @name usePermission\n *  @description - Hook that gives you the state of permission\n *  @category Browser\n *\n *  @browserapi navigator.permissions https://developer.mozilla.org/en-US/docs/Web/API/Navigator/permissions\n *\n *  @param {UsePermissionName} permissionDescriptorName - The permission name\n *  @param {boolean} [options.enabled=true] - Whether the permission is enabled\n *  @returns {UsePermissionReturn} An object containing the state and the supported status\n *\n *  @example\n *  const { state, supported, query } = usePermission('microphone');\n */\nexport const usePermission = (\n  permissionDescriptorName: UsePermissionName,\n  options?: UsePermissionOptions\n) => {\n  const supported = typeof navigator !== 'undefined' && 'permissions' in navigator;\n  const [state, setState] = useState<PermissionState>('prompt');\n  const enabled = options?.enabled ?? true;\n\n  const permissionDescriptor = { name: permissionDescriptorName };\n\n  const query = useEvent(async () => {\n    try {\n      const permissionStatus = await navigator.permissions.query(\n        permissionDescriptor as PermissionDescriptor\n      );\n      setState(permissionStatus.state);\n      return permissionStatus.state;\n    } catch {\n      setState('prompt');\n      return 'prompt';\n    }\n  });\n\n  useEffect(() => {\n    if (!supported || !enabled) return;\n    query();\n    window.addEventListener('change', query);\n    return () => {\n      window.removeEventListener('change', query);\n    };\n  }, [permissionDescriptorName, enabled]);\n\n  return {\n    state,\n    supported,\n    query\n  };\n};\n"],"names":["usePermission","permissionDescriptorName","options","supported","state","setState","useState","enabled","permissionDescriptor","query","useEvent","permissionStatus","useEffect"],"mappings":"+IAqDaA,EAAgB,CAC3BC,EACAC,IACG,CACH,MAAMC,EAAY,OAAO,UAAc,KAAe,gBAAiB,UACjE,CAACC,EAAOC,CAAQ,EAAIC,EAAAA,SAA0B,QAAQ,EACtDC,EAAUL,GAAS,SAAW,GAE9BM,EAAuB,CAAE,KAAMP,CAAA,EAE/BQ,EAAQC,EAAAA,SAAS,SAAY,CACjC,GAAI,CACF,MAAMC,EAAmB,MAAM,UAAU,YAAY,MACnDH,CAAA,EAEF,OAAAH,EAASM,EAAiB,KAAK,EACxBA,EAAiB,KAAA,MAClB,CACN,OAAAN,EAAS,QAAQ,EACV,QAAA,CACT,CACD,EAEDO,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAI,GAACT,GAAa,CAACI,GACnB,OAAAE,EAAA,EACA,OAAO,iBAAiB,SAAUA,CAAK,EAChC,IAAM,CACX,OAAO,oBAAoB,SAAUA,CAAK,CAAA,CAC5C,EACC,CAACR,EAA0BM,CAAO,CAAC,EAE/B,CACL,MAAAH,EACA,UAAAD,EACA,MAAAM,CAAA,CAEJ"}