{"version":3,"file":"useFocus.cjs","sources":["../../../../src/hooks/useFocus/useFocus.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nimport type { HookTarget } from '@/utils/helpers';\n\nimport { getElement, isTarget } from '@/utils/helpers';\n\nimport type { StateRef } from '../useRefState/useRefState';\n\nimport { useRefState } from '../useRefState/useRefState';\n\n/** The use focus options type */\nexport interface UseFocusOptions {\n  /** The initial focus state of the target */\n  initialValue?: boolean;\n  /** The on blur callback */\n  onBlur?: (event: FocusEvent) => void;\n  /** The on focus callback */\n  onFocus?: (event: FocusEvent) => void;\n}\n\n/** The use focus return type */\nexport interface UseFocusReturn {\n  /** The boolean state value of the target */\n  focused: boolean;\n  /** Blur the target */\n  blur: () => void;\n  /** Focus the target */\n  focus: () => void;\n}\n\nexport interface UseFocus {\n  (target: HookTarget, options?: UseFocusOptions): UseFocusReturn;\n\n  <Target extends Element>(\n    options?: UseFocusOptions,\n    target?: never\n  ): UseFocusReturn & { ref: StateRef<Target> };\n}\n\n/**\n * @name useFocus\n * @description - Hook that allows you to focus on a specific element\n * @category Elements\n *\n * @overload\n * @param {HookTarget} target The target element to focus\n * @param {boolean} [options.initialValue=false] The initial focus state of the target\n * @param {(event: FocusEvent) => void} [options.onFocus] The callback function to be invoked on focus\n * @param {(event: FocusEvent) => void} [options.onBlur] The callback function to be invoked on blur\n * @returns {UseFocusReturn} An object with focus state and methods\n *\n * @example\n * const { focus, blur, focused } = useFocus(ref);\n *\n * @overload\n * @template Target The target element\n * @param {boolean} [options.initialValue=false] The initial focus state of the target\n * @param {(event: FocusEvent) => void} [options.onFocus] The callback function to be invoked on focus\n * @param {(event: FocusEvent) => void} [options.onBlur] The callback function to be invoked on blur\n * @returns {UseFocusReturn & { ref: StateRef<Target> }} An object with focus state, methods and ref\n *\n * @example\n * const { ref, focus, blur, focused } = useFocus();\n */\nexport const useFocus = ((...params: any[]) => {\n  const target = (isTarget(params[0]) ? params[0] : undefined) as HookTarget | undefined;\n  const options = ((target ? params[1] : params[0]) as UseFocusOptions) ?? {};\n  const initialValue = options.initialValue ?? false;\n\n  const [focused, setFocused] = useState(initialValue);\n  const internalRef = useRefState<Element>();\n  const internalOptionsRef = useRef(options);\n  internalOptionsRef.current = options;\n\n  const elementRef = useRef<HTMLElement | null>(null);\n\n  const focus = () => elementRef.current?.focus();\n  const blur = () => elementRef.current?.blur();\n\n  useEffect(() => {\n    if (!target && !internalRef.state) return;\n    const element = (target ? getElement(target) : internalRef.current) as HTMLElement;\n    if (!element) return;\n\n    elementRef.current = element;\n\n    const onFocus = (event: FocusEvent) => {\n      internalOptionsRef.current?.onFocus?.(event);\n      if (!focus || (event.target as HTMLElement).matches?.(':focus-visible')) setFocused(true);\n    };\n\n    const onBlur = (event: FocusEvent) => {\n      internalOptionsRef.current?.onBlur?.(event);\n      setFocused(false);\n    };\n\n    if (initialValue) element.focus();\n\n    element.addEventListener('focus', onFocus);\n    element.addEventListener('blur', onBlur);\n\n    return () => {\n      element.removeEventListener('focus', onFocus);\n      element.removeEventListener('blur', onBlur);\n    };\n  }, [target, internalRef.state]);\n\n  if (target) return { focus, blur, focused };\n  return {\n    ref: internalRef,\n    focus,\n    blur,\n    focused\n  };\n}) as UseFocus;\n"],"names":["useFocus","params","target","isTarget","options","initialValue","focused","setFocused","useState","internalRef","useRefState","internalOptionsRef","useRef","elementRef","focus","blur","useEffect","element","getElement","onFocus","event","onBlur"],"mappings":"mPAgEaA,EAAY,IAAIC,IAAkB,CAC7C,MAAMC,EAAUC,EAAAA,SAASF,EAAO,CAAC,CAAC,EAAIA,EAAO,CAAC,EAAI,OAC5CG,GAAYF,EAASD,EAAO,CAAC,EAAIA,EAAO,CAAC,IAA0B,CAAA,EACnEI,EAAeD,EAAQ,cAAgB,GAEvC,CAACE,EAASC,CAAU,EAAIC,EAAAA,SAASH,CAAY,EAC7CI,EAAcC,EAAAA,YAAA,EACdC,EAAqBC,EAAAA,OAAOR,CAAO,EACzCO,EAAmB,QAAUP,EAE7B,MAAMS,EAAaD,EAAAA,OAA2B,IAAI,EAE5CE,EAAQ,IAAMD,EAAW,SAAS,MAAA,EAClCE,EAAO,IAAMF,EAAW,SAAS,KAAA,EA8BvC,OA5BAG,EAAAA,UAAU,IAAM,CACd,GAAI,CAACd,GAAU,CAACO,EAAY,MAAO,OACnC,MAAMQ,EAAWf,EAASgB,EAAAA,WAAWhB,CAAM,EAAIO,EAAY,QAC3D,GAAI,CAACQ,EAAS,OAEdJ,EAAW,QAAUI,EAErB,MAAME,EAAWC,GAAsB,CACrCT,EAAmB,SAAS,UAAUS,CAAK,GACvC,CAACN,GAAUM,EAAM,OAAuB,UAAU,gBAAgB,MAAc,EAAI,CAAA,EAGpFC,EAAUD,GAAsB,CACpCT,EAAmB,SAAS,SAASS,CAAK,EAC1Cb,EAAW,EAAK,CAAA,EAGlB,OAAIF,KAAsB,MAAA,EAE1BY,EAAQ,iBAAiB,QAASE,CAAO,EACzCF,EAAQ,iBAAiB,OAAQI,CAAM,EAEhC,IAAM,CACXJ,EAAQ,oBAAoB,QAASE,CAAO,EAC5CF,EAAQ,oBAAoB,OAAQI,CAAM,CAAA,CAC5C,EACC,CAACnB,EAAQO,EAAY,KAAK,CAAC,EAE1BP,EAAe,CAAE,MAAAY,EAAO,KAAAC,EAAM,QAAAT,CAAA,EAC3B,CACL,IAAKG,EACL,MAAAK,EACA,KAAAC,EACA,QAAAT,CAAA,CAEJ"}