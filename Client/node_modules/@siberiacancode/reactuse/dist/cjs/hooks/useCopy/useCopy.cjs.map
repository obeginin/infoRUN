{"version":3,"file":"useCopy.cjs","sources":["../../../../src/hooks/useCopy/useCopy.ts"],"sourcesContent":["import { useState } from 'react';\n\nimport { copy } from '@/utils/helpers';\n\n/** The use copy return type */\nexport interface UseCopyReturn {\n  /** Whether copy is in progress */\n  copied: boolean;\n  /** The copied value */\n  value?: string;\n  /** Function to copy text */\n  copy: (value: string) => Promise<void>;\n}\n\n/** The use copy params type */\nexport interface UseCopyParams {\n  /** Reset delay in milliseconds */\n  resetDelay?: number;\n}\n\n/**\n * @name useCopy\n * @description - Hook that manages copying text with status reset\n * @category Browser\n *\n * @browserapi navigator.clipboard https://developer.mozilla.org/en-US/docs/Web/API/Navigator/clipboard\n *\n * @param {number} [delay=1000] Delay in ms before resetting copied status\n * @returns {UseCopyReturn} An object containing the copied value, status and copy function\n *\n * @example\n * const { copied, value, copy } = useCopy();\n */\nexport const useCopy = (delay: number = 1000): UseCopyReturn => {\n  const [value, setValue] = useState<string | undefined>();\n  const [copied, setCopied] = useState(false);\n\n  const copyToClipboard = async (text: string) => {\n    await copy(text);\n    setValue(text);\n    setCopied(true);\n    setTimeout(() => setCopied(false), delay);\n  };\n\n  return { value, copied, copy: copyToClipboard };\n};\n"],"names":["useCopy","delay","value","setValue","useState","copied","setCopied","text","copy"],"mappings":"mJAiCaA,EAAU,CAACC,EAAgB,MAAwB,CAC9D,KAAM,CAACC,EAAOC,CAAQ,EAAIC,WAAA,EACpB,CAACC,EAAQC,CAAS,EAAIF,EAAAA,SAAS,EAAK,EAS1C,MAAO,CAAE,MAAAF,EAAO,OAAAG,EAAQ,KAPA,MAAOE,GAAiB,CAC9C,MAAMC,EAAAA,KAAKD,CAAI,EACfJ,EAASI,CAAI,EACbD,EAAU,EAAI,EACd,WAAW,IAAMA,EAAU,EAAK,EAAGL,CAAK,CAAA,CAGZ,CAChC"}