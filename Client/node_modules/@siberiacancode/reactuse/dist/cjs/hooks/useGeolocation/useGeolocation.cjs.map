{"version":3,"file":"useGeolocation.cjs","sources":["../../../../src/hooks/useGeolocation/useGeolocation.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\n/** The use geolocation return type */\nexport interface UseGeolocationReturn {\n  /** The accuracy of the last position update */\n  accuracy: number | null;\n  /** The altitude of the last position update */\n  altitude: number | null;\n  /** The altitude accuracy of the last position update */\n  altitudeAccuracy: number | null;\n  /** The error of the last position update */\n  error: GeolocationPositionError | null;\n  /** The heading of the last position update */\n  heading: number | null;\n  /** The latitude of the last position update */\n  latitude: number | null;\n  /** The loading state */\n  loading: boolean;\n  /** The longitude of the last position update */\n  longitude: number | null;\n  /** The speed of the last position update */\n  speed: number | null;\n  /** The timestamp of the last position update */\n  timestamp: number | null;\n}\n\n/** The use geolocation params type */\nexport type UseGeolocationParams = PositionOptions;\n\n/**\n * @name useGeolocation\n * @description - Hook that returns the current geolocation\n * @category Browser\n *\n * @browserapi navigator.geolocation https://developer.mozilla.org/en-US/docs/Web/API/Navigator/geolocation\n *\n * @param {boolean} [params.enableHighAccuracy] Enable high accuracy\n * @param {number} [params.maximumAge] Maximum age\n * @param {number} [params.timeout] Timeout\n * @returns {UseGeolocationReturn}\n *\n * @example\n * const { loading, error, timestamp, accuracy, latitude, longitude, altitude, altitudeAccuracy, heading, speed } = useGeolocation();\n */\nexport const useGeolocation = (params?: UseGeolocationParams): UseGeolocationReturn => {\n  const [value, setValue] = useState<UseGeolocationReturn>({\n    loading: true,\n    error: null,\n    timestamp: Date.now(),\n    accuracy: 0,\n    latitude: Number.POSITIVE_INFINITY,\n    longitude: Number.POSITIVE_INFINITY,\n    altitude: null,\n    altitudeAccuracy: null,\n    heading: null,\n    speed: null\n  });\n\n  useEffect(() => {\n    const onEvent = ({ coords, timestamp }: GeolocationPosition) => {\n      setValue({\n        ...value,\n        loading: false,\n        timestamp,\n        latitude: coords.latitude,\n        longitude: coords.longitude,\n        altitude: coords.altitude,\n        accuracy: coords.accuracy,\n        altitudeAccuracy: coords.altitudeAccuracy,\n        heading: coords.heading,\n        speed: coords.speed\n      });\n    };\n\n    const onEventError = (error: GeolocationPositionError) => {\n      setValue({\n        ...value,\n        loading: false,\n        error\n      });\n    };\n\n    navigator.geolocation.getCurrentPosition(onEvent, onEventError, params);\n    const watchId = navigator.geolocation.watchPosition(onEvent, onEventError, params);\n\n    return () => {\n      navigator.geolocation.clearWatch(watchId);\n    };\n  }, [params?.enableHighAccuracy, params?.maximumAge, params?.timeout]);\n\n  return value;\n};\n"],"names":["useGeolocation","params","value","setValue","useState","useEffect","onEvent","coords","timestamp","onEventError","error","watchId"],"mappings":"yGA4CaA,EAAkBC,GAAwD,CACrF,KAAM,CAACC,EAAOC,CAAQ,EAAIC,WAA+B,CACvD,QAAS,GACT,MAAO,KACP,UAAW,KAAK,IAAA,EAChB,SAAU,EACV,SAAU,OAAO,kBACjB,UAAW,OAAO,kBAClB,SAAU,KACV,iBAAkB,KAClB,QAAS,KACT,MAAO,IAAA,CACR,EAEDC,OAAAA,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAU,CAAC,CAAE,OAAAC,EAAQ,UAAAC,KAAqC,CAC9DL,EAAS,CACP,GAAGD,EACH,QAAS,GACT,UAAAM,EACA,SAAUD,EAAO,SACjB,UAAWA,EAAO,UAClB,SAAUA,EAAO,SACjB,SAAUA,EAAO,SACjB,iBAAkBA,EAAO,iBACzB,QAASA,EAAO,QAChB,MAAOA,EAAO,KAAA,CACf,CAAA,EAGGE,EAAgBC,GAAoC,CACxDP,EAAS,CACP,GAAGD,EACH,QAAS,GACT,MAAAQ,CAAA,CACD,CAAA,EAGH,UAAU,YAAY,mBAAmBJ,EAASG,EAAcR,CAAM,EACtE,MAAMU,EAAU,UAAU,YAAY,cAAcL,EAASG,EAAcR,CAAM,EAEjF,MAAO,IAAM,CACX,UAAU,YAAY,WAAWU,CAAO,CAAA,CAC1C,EACC,CAACV,GAAQ,mBAAoBA,GAAQ,WAAYA,GAAQ,OAAO,CAAC,EAE7DC,CACT"}