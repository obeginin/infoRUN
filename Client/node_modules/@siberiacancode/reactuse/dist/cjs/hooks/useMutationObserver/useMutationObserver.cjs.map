{"version":3,"file":"useMutationObserver.cjs","sources":["../../../../src/hooks/useMutationObserver/useMutationObserver.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nimport type { HookTarget } from '@/utils/helpers';\n\nimport { getElement, isTarget } from '@/utils/helpers';\n\nimport type { StateRef } from '../useRefState/useRefState';\n\nimport { useRefState } from '../useRefState/useRefState';\n\n/** The mutation observer target element type */\nexport type UseMutationObserverTarget = HookTarget;\n\n/** The mutation observer return type */\nexport interface UseMutationObserverReturn {\n  /** The mutation observer instance */\n  observer: MutationObserver;\n  /** The mutation observer entries */\n  stop: () => void;\n}\n\n/** The mutation observer options type */\nexport interface UseMutationObserverOptions extends MutationObserverInit {\n  /** The enabled state of the mutation observer */\n  enabled?: boolean;\n}\n\nexport interface UseMutationObserver {\n  (\n    target: HookTarget,\n    callback: MutationCallback,\n    options?: UseMutationObserverOptions\n  ): UseMutationObserverReturn;\n\n  <Target extends Element>(\n    callback: MutationCallback,\n    options?: UseMutationObserverOptions,\n    target?: never\n  ): UseMutationObserverReturn & { ref: StateRef<Target> };\n}\n\n/**\n * @name useMutationObserver\n * @description - Hook that gives you mutation observer state\n * @category Sensors\n *\n * @overload\n * @template Target The target element\n * @param {MutationCallback} callback The callback to execute when mutation is detected\n * @param {boolean} [options.enabled=true] The enabled state of the mutation observer\n * @param {boolean} [options.attributes] Set to true if mutations to target's attributes are to be observed\n * @param {boolean} [options.characterData] Set to true if mutations to target's data are to be observed\n * @param {boolean} [options.childList] Set to true if mutations to target's children are to be observed\n * @param {boolean} [options.subtree]  Set to true if mutations to not just target, but also target's descendants are to be observed\n * @param {boolean} [options.characterDataOldValue] Set to true if characterData is set to true or omitted and target's data before the mutation needs to be recorded\n * @param {boolean} [options.attributeOldValue]  Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed and attributes is true or omitted\n * @param {string[]} [options.attributeFilter] Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed and attributes is true or omitted\n * @returns {UseMutationObserverReturn & { ref: StateRef<Target> }} An object containing the mutation observer state\n *\n * @example\n * const { ref, observer, stop } = useMutationObserver(() => console.log('callback'))\n *\n * @overload\n * @param {HookTarget} target The target element to observe\n * @param {MutationCallback} callback The callback to execute when mutation is detected\n * @param {boolean} [options.enabled=true] The enabled state of the mutation observer\n * @param {boolean} [options.attributes] Set to true if mutations to target's attributes are to be observed\n * @param {boolean} [options.characterData] Set to true if mutations to target's data are to be observed\n * @param {boolean} [options.childList] Set to true if mutations to target's children are to be observed\n * @param {boolean} [options.subtree]  Set to true if mutations to not just target, but also target's descendants are to be observed\n * @param {boolean} [options.characterDataOldValue] Set to true if characterData is set to true or omitted and target's data before the mutation needs to be recorded\n * @param {boolean} [options.attributeOldValue]  Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed and attributes is true or omitted\n * @param {string[]} [options.attributeFilter] Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed and attributes is true or omitted\n * @returns {UseMutationObserverReturn} An object containing the mutation observer state\n *\n * @example\n * const { observer, stop } = useMutationObserver(ref, () => console.log('callback'))\n */\nexport const useMutationObserver = ((...params: any[]) => {\n  const target = (isTarget(params[0]) ? params[0] : undefined) as HookTarget | undefined;\n  const callback = (target ? params[1] : params[0]) as MutationCallback;\n  const options = (target ? params[2] : params[1]) as UseMutationObserverOptions | undefined;\n\n  const [observer, setObserver] = useState<MutationObserver>();\n  const enabled = options?.enabled ?? true;\n\n  const internalRef = useRefState<Element>(window.document.documentElement);\n  const internalCallbackRef = useRef<MutationCallback>(callback);\n  internalCallbackRef.current = callback;\n  const internalOptionsRef = useRef(options);\n  internalOptionsRef.current = options;\n\n  useEffect(() => {\n    if (!enabled || (!target && !internalRef.state)) return;\n\n    const element = (target ? getElement(target) : internalRef.current) as Element;\n    if (!element) return;\n\n    const observer = new MutationObserver(internalCallbackRef.current);\n    setObserver(observer);\n    observer.observe(element, internalOptionsRef.current);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [target, internalRef.state]);\n\n  const stop = () => observer?.disconnect();\n\n  if (target) return { stop, observer };\n  return {\n    ref: internalRef,\n    stop,\n    observer\n  };\n}) as UseMutationObserver;\n"],"names":["useMutationObserver","params","target","isTarget","callback","options","observer","setObserver","useState","enabled","internalRef","useRefState","internalCallbackRef","useRef","internalOptionsRef","useEffect","element","getElement","stop"],"mappings":"mPA8EaA,EAAuB,IAAIC,IAAkB,CACxD,MAAMC,EAAUC,EAAAA,SAASF,EAAO,CAAC,CAAC,EAAIA,EAAO,CAAC,EAAI,OAC5CG,EAAYF,EAASD,EAAO,CAAC,EAAIA,EAAO,CAAC,EACzCI,EAAWH,EAASD,EAAO,CAAC,EAAIA,EAAO,CAAC,EAExC,CAACK,EAAUC,CAAW,EAAIC,WAAA,EAC1BC,EAAUJ,GAAS,SAAW,GAE9BK,EAAcC,EAAAA,YAAqB,OAAO,SAAS,eAAe,EAClEC,EAAsBC,EAAAA,OAAyBT,CAAQ,EAC7DQ,EAAoB,QAAUR,EAC9B,MAAMU,EAAqBD,EAAAA,OAAOR,CAAO,EACzCS,EAAmB,QAAUT,EAE7BU,EAAAA,UAAU,IAAM,CACd,GAAI,CAACN,GAAY,CAACP,GAAU,CAACQ,EAAY,MAAQ,OAEjD,MAAMM,EAAWd,EAASe,EAAAA,WAAWf,CAAM,EAAIQ,EAAY,QAC3D,GAAI,CAACM,EAAS,OAEd,MAAMV,EAAW,IAAI,iBAAiBM,EAAoB,OAAO,EACjE,OAAAL,EAAYD,CAAQ,EACpBA,EAAS,QAAQU,EAASF,EAAmB,OAAO,EAE7C,IAAM,CACXR,EAAS,WAAA,CAAW,CACtB,EACC,CAACJ,EAAQQ,EAAY,KAAK,CAAC,EAE9B,MAAMQ,EAAO,IAAMZ,GAAU,WAAA,EAE7B,OAAIJ,EAAe,CAAE,KAAAgB,EAAM,SAAAZ,CAAA,EACpB,CACL,IAAKI,EACL,KAAAQ,EACA,SAAAZ,CAAA,CAEJ"}