{"version":3,"file":"useSet.cjs","sources":["../../../../src/hooks/useSet/useSet.ts"],"sourcesContent":["import { useState } from 'react';\n\n/** The use set return type */\ninterface UseSetReturn<Value> {\n  /** The size of the set */\n  size: number;\n  /** The current set */\n  value: Set<Value>;\n  /** Function to add a value to the set */\n  add: (value: Value) => void;\n  /** Function to clear the set */\n  clear: () => void;\n  /** Function to get the symmetric difference of two sets */\n  difference: (other: Set<Value>) => void;\n  /** Function to check if a value exists in the set */\n  has: (value: Value) => boolean;\n  /** Function to get the difference of two sets */\n  intersection: (other: Set<Value>) => void;\n  /** Function to remove a value from the set */\n  remove: (value: Value) => void;\n  /** Function to toggle a value in the set */\n  reset: () => void;\n  /** Function to get the symmetric difference of two sets */\n  symmetricDifference: (other: Set<Value>) => void;\n  /** Function to toggle a value in the set */\n  toggle: (value: Value) => void;\n  /** Function to get the union of two sets */\n  union: (other: Set<Value>) => void;\n}\n\n/**\n * @name useSet\n * @description - Hook that manages a set structure\n * @category State\n *\n * @template Value The type of the value\n * @param {Value[]} [values] The initial array of the set\n * @returns {UseSetReturn<Value>} An object containing the current set and functions to interact with the set\n *\n * @example\n * const { value, add, remove, clear, reset, toggle, union, intersection, difference, symmetricDifference, size, has } = useSet([1, 2, 3]);\n */\nexport const useSet = <Value>(values?: Value[]): UseSetReturn<Value> => {\n  const [set, setSet] = useState(new Set(values));\n\n  const add = (value: Value) => setSet((prevSet) => new Set(prevSet).add(value));\n  const remove = (value: Value) =>\n    setSet((prevSet) => {\n      if (!prevSet.has(value)) return prevSet;\n      const newSet = new Set(prevSet);\n      newSet.delete(value);\n      return newSet;\n    });\n  const clear = () => setSet(new Set());\n  const reset = () => setSet(new Set(values));\n  const toggle = (value: Value) =>\n    setSet((prevSet) => {\n      if (!prevSet.has(value)) return new Set(prevSet).add(value);\n      const newSet = new Set(prevSet);\n      newSet.delete(value);\n      return newSet;\n    });\n  const union = (other: Set<Value>) => setSet(set.union(other));\n  const difference = (other: Set<Value>) => setSet(set.difference(other));\n  const symmetricDifference = (other: Set<Value>) => setSet(set.symmetricDifference(other));\n  const intersection = (other: Set<Value>) => setSet(set.intersection(other));\n  const has = (value: Value) => set.has(value);\n\n  return {\n    value: set,\n    size: set.size,\n    has,\n    add,\n    remove,\n    clear,\n    reset,\n    toggle,\n    union,\n    difference,\n    symmetricDifference,\n    intersection\n  };\n};\n"],"names":["useSet","values","set","setSet","useState","add","value","prevSet","remove","newSet","clear","reset","toggle","union","other","difference","symmetricDifference","intersection","has"],"mappings":"yGA0CaA,EAAiBC,GAA0C,CACtE,KAAM,CAACC,EAAKC,CAAM,EAAIC,EAAAA,SAAS,IAAI,IAAIH,CAAM,CAAC,EAExCI,EAAOC,GAAiBH,EAAQI,GAAY,IAAI,IAAIA,CAAO,EAAE,IAAID,CAAK,CAAC,EACvEE,EAAUF,GACdH,EAAQI,GAAY,CAClB,GAAI,CAACA,EAAQ,IAAID,CAAK,EAAG,OAAOC,EAChC,MAAME,EAAS,IAAI,IAAIF,CAAO,EAC9B,OAAAE,EAAO,OAAOH,CAAK,EACZG,CAAA,CACR,EACGC,EAAQ,IAAMP,EAAO,IAAI,GAAK,EAC9BQ,EAAQ,IAAMR,EAAO,IAAI,IAAIF,CAAM,CAAC,EACpCW,EAAUN,GACdH,EAAQI,GAAY,CAClB,GAAI,CAACA,EAAQ,IAAID,CAAK,EAAG,OAAO,IAAI,IAAIC,CAAO,EAAE,IAAID,CAAK,EAC1D,MAAMG,EAAS,IAAI,IAAIF,CAAO,EAC9B,OAAAE,EAAO,OAAOH,CAAK,EACZG,CAAA,CACR,EACGI,EAASC,GAAsBX,EAAOD,EAAI,MAAMY,CAAK,CAAC,EACtDC,EAAcD,GAAsBX,EAAOD,EAAI,WAAWY,CAAK,CAAC,EAChEE,EAAuBF,GAAsBX,EAAOD,EAAI,oBAAoBY,CAAK,CAAC,EAClFG,EAAgBH,GAAsBX,EAAOD,EAAI,aAAaY,CAAK,CAAC,EACpEI,EAAOZ,GAAiBJ,EAAI,IAAII,CAAK,EAE3C,MAAO,CACL,MAAOJ,EACP,KAAMA,EAAI,KACV,IAAAgB,EACA,IAAAb,EACA,OAAAG,EACA,MAAAE,EACA,MAAAC,EACA,OAAAC,EACA,MAAAC,EACA,WAAAE,EACA,oBAAAC,EACA,aAAAC,CAAA,CAEJ"}