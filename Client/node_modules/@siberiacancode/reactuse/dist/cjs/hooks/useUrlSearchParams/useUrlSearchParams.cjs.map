{"version":3,"file":"useUrlSearchParams.cjs","sources":["../../../../src/hooks/useUrlSearchParams/useUrlSearchParams.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport {\n  createQueryString,\n  dispatchUrlSearchParamsEvent,\n  getUrlSearchParams,\n  URL_SEARCH_PARAMS_EVENT\n} from '../useUrlSearchParam/useUrlSearchParam';\n\n/** The url params type */\nexport type UrlParams = Record<string, any>;\n\n/** The url search params mod */\nexport type UrlSearchParamsMode = 'hash-params' | 'hash' | 'history';\n\n/** The use url search params set options type */\nexport interface UseUrlSearchParamsSetOptions {\n  /** The mode to use for writing to the URL */\n  write?: 'push' | 'replace';\n}\n\n/* The use search params initial value type */\nexport type UseUrlSearchParamsInitialValue<Value> = (() => Value) | Value;\n\n/** The use url search params options type */\nexport interface UseUrlSearchParamsOptions<Value> {\n  /* The initial value of the url search params */\n  initialValue?: UseUrlSearchParamsInitialValue<string | URLSearchParams | Value>;\n  /** The mode to use for writing to the URL */\n  mode?: UrlSearchParamsMode;\n  /** The mode to use for writing to the URL  */\n  write?: 'push' | 'replace';\n  /* The deserializer function to be invoked */\n  deserializer?: (value: string) => Value[keyof Value];\n  /* The serializer function to be invoked */\n  serializer?: (value: Value[keyof Value]) => string;\n}\n\n/** The use url search params return type */\nexport interface UseUrlSearchParamsReturn<Value> {\n  /** The value of the url search params */\n  value: Value;\n  /** The set function */\n  set: (value: Partial<Value>, options?: UseUrlSearchParamsSetOptions) => void;\n}\n\nexport interface UseUrlSearchParams {\n  <Value>(\n    key: string,\n    options: UseUrlSearchParamsOptions<Value> & {\n      initialValue: UseUrlSearchParamsInitialValue<Value>;\n    }\n  ): UseUrlSearchParamsReturn<Value>;\n\n  <Value>(options?: UseUrlSearchParamsOptions<Value>): UseUrlSearchParamsReturn<Value | undefined>;\n\n  <Value>(initialValue: UseUrlSearchParamsInitialValue<Value>): UseUrlSearchParamsReturn<Value>;\n\n  <Value>(key: string): UseUrlSearchParamsReturn<Value | undefined>;\n}\n\n/**\n * @name useUrlSearchParams\n * @description - Hook that provides reactive URLSearchParams\n * @category State\n *\n * @overload\n * @template Value The type of the url param values\n * @param {UseUrlSearchParamsOptions<Value> & { initialValue: UseUrlSearchParamsInitialValue<Value> }} options The options object with required initialValue\n * @param {UseUrlSearchParamsInitialValue<Value>} [options.initialValue] The initial value for the url params\n * @param {UrlSearchParamsMode} [options.mode='history'] The mode to use for the URL ('history' | 'hash-params' | 'hash')\n * @param {'push' | 'replace'} [options.write='replace'] The mode to use for writing to the URL\n * @param {(value: Value[keyof Value]) => string} [options.serializer] Custom serializer function to convert value to string\n * @param {(value: string) => Value[keyof Value]} [options.deserializer] Custom deserializer function to convert string to value\n * @returns {UseUrlSearchParamsReturn<Value>} The object with value and function for change value\n *\n * @example\n * const { value, set } = useUrlSearchParams({ initialValue: { page: 1 } });\n *\n * @overload\n * @template Value The type of the url param values\n * @param {UseUrlSearchParamsInitialValue<Value>} [initialValue] The initial value for the url params\n * @returns {UseUrlSearchParamsReturn<Value>} The object with value and function for change value\n *\n * @example\n * const { value, set } = useUrlSearchParams({ page: 1 });\n */\nexport const useUrlSearchParams = (<Value extends UrlParams>(\n  params: any\n): UseUrlSearchParamsReturn<Value> => {\n  const options = (\n    typeof params === 'object' &&\n    params &&\n    ('serializer' in params ||\n      'deserializer' in params ||\n      'initialValue' in params ||\n      'mode' in params ||\n      'write' in params)\n      ? params\n      : undefined\n  ) as UseUrlSearchParamsOptions<Value>;\n  const initialValue = (\n    options ? options?.initialValue : params\n  ) as UseUrlSearchParamsInitialValue<Value>;\n\n  const { mode = 'history', write: writeMode = 'replace' } = options;\n\n  const serializer = (value: Value[keyof Value]) => {\n    if (options?.serializer) return options.serializer(value);\n    if (typeof value === 'string') return value;\n    return JSON.stringify(value);\n  };\n\n  const deserializer = (value: string) => {\n    if (options?.deserializer) return options.deserializer(value);\n    if (value === 'undefined') return undefined as unknown as Value[keyof Value];\n\n    try {\n      return JSON.parse(value) as Value;\n    } catch {\n      return value as Value[keyof Value];\n    }\n  };\n\n  const setUrlSearchParams = <Value extends UrlParams>(\n    mode: UrlSearchParamsMode,\n    value: Partial<Value>,\n    write: 'push' | 'replace' = 'replace'\n  ) => {\n    const urlSearchParams = new URLSearchParams();\n\n    Object.entries(value).forEach(([key, param]) => {\n      if (Array.isArray(param)) {\n        param.forEach((value) => urlSearchParams.set(key, serializer(value)));\n      } else {\n        urlSearchParams.set(key, serializer(param));\n      }\n    });\n\n    const query = createQueryString(urlSearchParams, mode);\n    if (write === 'replace') window.history.replaceState({}, '', query);\n    if (write === 'push') window.history.pushState({}, '', query);\n\n    return urlSearchParams;\n  };\n\n  const getParsedUrlSearchParams = (searchParams: string | UrlParams | URLSearchParams) => {\n    if (typeof searchParams === 'string') {\n      return getParsedUrlSearchParams(new URLSearchParams(searchParams));\n    }\n\n    if (searchParams instanceof URLSearchParams) {\n      return Array.from(searchParams.entries()).reduce(\n        (acc, [key, value]) => {\n          acc[key] = deserializer(value);\n          return acc;\n        },\n        {} as Record<string, any>\n      );\n    }\n\n    return searchParams;\n  };\n\n  const [value, setValue] = useState<Value>(() => {\n    if (typeof window === 'undefined') return (initialValue ?? {}) as Value;\n\n    const urlSearchParams = getUrlSearchParams(mode);\n    const value = {\n      ...(initialValue && getParsedUrlSearchParams(initialValue)),\n      ...getParsedUrlSearchParams(urlSearchParams)\n    } as Value;\n\n    setUrlSearchParams(mode, value, writeMode);\n\n    return value;\n  });\n\n  const set = (params: Partial<Value>, options?: UseUrlSearchParamsSetOptions) => {\n    const searchParams = setUrlSearchParams(\n      mode,\n      { ...value, ...params },\n      options?.write ?? writeMode\n    );\n    setValue(getParsedUrlSearchParams(searchParams) as Value);\n    dispatchUrlSearchParamsEvent();\n  };\n\n  useEffect(() => {\n    const onParamsChange = () => {\n      const searchParams = getUrlSearchParams(mode);\n      setValue(getParsedUrlSearchParams(searchParams) as Value);\n    };\n\n    window.addEventListener(URL_SEARCH_PARAMS_EVENT, onParamsChange);\n    window.addEventListener('popstate', onParamsChange);\n    if (mode !== 'history') window.addEventListener('hashchange', onParamsChange);\n\n    return () => {\n      window.removeEventListener(URL_SEARCH_PARAMS_EVENT, onParamsChange);\n      window.removeEventListener('popstate', onParamsChange);\n      if (mode !== 'history') window.removeEventListener('hashchange', onParamsChange);\n    };\n  }, [mode]);\n\n  return {\n    value,\n    set\n  };\n}) as UseUrlSearchParams;\n\nexport { createQueryString, dispatchUrlSearchParamsEvent, getUrlSearchParams };\n"],"names":["useUrlSearchParams","params","options","initialValue","mode","writeMode","serializer","value","deserializer","setUrlSearchParams","write","urlSearchParams","key","param","query","createQueryString","getParsedUrlSearchParams","searchParams","acc","setValue","useState","getUrlSearchParams","set","dispatchUrlSearchParamsEvent","useEffect","onParamsChange","URL_SEARCH_PARAMS_EVENT"],"mappings":"iKAuFaA,EACXC,GACoC,CACpC,MAAMC,EACJ,OAAOD,GAAW,UAClBA,IACC,eAAgBA,GACf,iBAAkBA,GAClB,iBAAkBA,GAClB,SAAUA,GACV,UAAWA,GACTA,EACA,OAEAE,EACJD,EAAUA,GAAS,aAAeD,EAG9B,CAAE,KAAAG,EAAO,UAAW,MAAOC,EAAY,WAAcH,EAErDI,EAAcC,GACdL,GAAS,WAAmBA,EAAQ,WAAWK,CAAK,EACpD,OAAOA,GAAU,SAAiBA,EAC/B,KAAK,UAAUA,CAAK,EAGvBC,EAAgBD,GAAkB,CACtC,GAAIL,GAAS,aAAc,OAAOA,EAAQ,aAAaK,CAAK,EAC5D,GAAIA,IAAU,YAEd,GAAI,CACF,OAAO,KAAK,MAAMA,CAAK,CAAA,MACjB,CACN,OAAOA,CAAA,CACT,EAGIE,EAAqB,CACzBL,EACAG,EACAG,EAA4B,YACzB,CACH,MAAMC,EAAkB,IAAI,gBAE5B,OAAO,QAAQJ,CAAK,EAAE,QAAQ,CAAC,CAACK,EAAKC,CAAK,IAAM,CAC1C,MAAM,QAAQA,CAAK,EACrBA,EAAM,QAASN,GAAUI,EAAgB,IAAIC,EAAKN,EAAWC,CAAK,CAAC,CAAC,EAEpEI,EAAgB,IAAIC,EAAKN,EAAWO,CAAK,CAAC,CAC5C,CACD,EAED,MAAMC,EAAQC,EAAAA,kBAAkBJ,EAAiBP,CAAI,EACrD,OAAIM,IAAU,WAAW,OAAO,QAAQ,aAAa,CAAA,EAAI,GAAII,CAAK,EAC9DJ,IAAU,QAAQ,OAAO,QAAQ,UAAU,CAAA,EAAI,GAAII,CAAK,EAErDH,CAAA,EAGHK,EAA4BC,GAC5B,OAAOA,GAAiB,SACnBD,EAAyB,IAAI,gBAAgBC,CAAY,CAAC,EAG/DA,aAAwB,gBACnB,MAAM,KAAKA,EAAa,QAAA,CAAS,EAAE,OACxC,CAACC,EAAK,CAACN,EAAKL,CAAK,KACfW,EAAIN,CAAG,EAAIJ,EAAaD,CAAK,EACtBW,GAET,CAAA,CAAC,EAIED,EAGH,CAACV,EAAOY,CAAQ,EAAIC,EAAAA,SAAgB,IAAM,CAC9C,GAAI,OAAO,OAAW,IAAa,OAAQjB,GAAgB,CAAA,EAE3D,MAAMQ,EAAkBU,EAAAA,mBAAmBjB,CAAI,EACzCG,EAAQ,CACZ,GAAIJ,GAAgBa,EAAyBb,CAAY,EACzD,GAAGa,EAAyBL,CAAe,CAAA,EAG7C,OAAAF,EAAmBL,EAAMG,EAAOF,CAAS,EAElCE,CAAA,CACR,EAEKe,EAAM,CAACrB,EAAwBC,IAA2C,CAC9E,MAAMe,EAAeR,EACnBL,EACA,CAAE,GAAGG,EAAO,GAAGN,CAAAA,EACfC,GAAS,OAASG,CAAA,EAEpBc,EAASH,EAAyBC,CAAY,CAAU,EACxDM,+BAAA,CAA6B,EAG/BC,OAAAA,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAiB,IAAM,CAC3B,MAAMR,EAAeI,EAAAA,mBAAmBjB,CAAI,EAC5Ce,EAASH,EAAyBC,CAAY,CAAU,CAAA,EAG1D,cAAO,iBAAiBS,EAAAA,wBAAyBD,CAAc,EAC/D,OAAO,iBAAiB,WAAYA,CAAc,EAC9CrB,IAAS,WAAW,OAAO,iBAAiB,aAAcqB,CAAc,EAErE,IAAM,CACX,OAAO,oBAAoBC,EAAAA,wBAAyBD,CAAc,EAClE,OAAO,oBAAoB,WAAYA,CAAc,EACjDrB,IAAS,WAAW,OAAO,oBAAoB,aAAcqB,CAAc,CAAA,CACjF,EACC,CAACrB,CAAI,CAAC,EAEF,CACL,MAAAG,EACA,IAAAe,CAAA,CAEJ"}