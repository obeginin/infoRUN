{"version":3,"file":"useIdle.cjs","sources":["../../../../src/hooks/useIdle/useIdle.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { throttle } from '@/utils/helpers';\n\n/** The use idle options type */\nexport interface UseIdleOptions {\n  /** The idle events */\n  events?: Array<keyof DocumentEventMap>;\n  /** The idle state */\n  initialValue?: boolean;\n}\n\nconst IDLE_EVENTS = [\n  'mousemove',\n  'mousedown',\n  'keydown',\n  'touchstart',\n  'wheel',\n  'resize'\n] satisfies Array<keyof DocumentEventMap>;\nconst ONE_MINUTE = 60e3;\n\n/** The use idle return type */\nexport interface UseIdleReturn {\n  /** The idle state */\n  idle: boolean;\n  /** The last active time */\n  lastActive: number;\n}\n\n/**\n * @name useIdle\n * @description - Hook that defines the logic when the user is idle\n * @category Sensors\n *\n * @param {number} [milliseconds=ONE_MINUTE] The idle time in milliseconds\n * @param {boolean} [options.initialState=false] The options for the hook\n * @param {Array<keyof WindowEventMap>} [options.events=IDLE_EVENTS]\n * @returns {UseIdleReturn} An object containing the idle state and the last active time\n *\n * @example\n * const { idle, lastActive } = useIdle();\n */\nexport const useIdle = (\n  milliseconds = ONE_MINUTE,\n  { initialValue = false, events = IDLE_EVENTS }: UseIdleOptions = {}\n): UseIdleReturn => {\n  const [idle, setIdle] = useState(initialValue);\n  const [lastActive, setLastActive] = useState(Date.now());\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n    const onTimeout = () => setIdle(true);\n\n    const onEvent = throttle(() => {\n      setIdle(false);\n      setLastActive(Date.now());\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(onTimeout, milliseconds);\n    }, 500);\n\n    const onVisibilitychange = () => {\n      if (!document.hidden) onEvent();\n    };\n\n    timeoutId = setTimeout(onTimeout, milliseconds);\n\n    events.forEach((event) => window.addEventListener(event, onEvent));\n    document.addEventListener('visibilitychange', onVisibilitychange);\n\n    return () => {\n      events.forEach((event) => window.addEventListener(event, onEvent));\n      document.removeEventListener('visibilitychange', onVisibilitychange);\n      clearTimeout(timeoutId);\n    };\n  }, [milliseconds, events]);\n\n  return { idle, lastActive };\n};\n"],"names":["IDLE_EVENTS","ONE_MINUTE","useIdle","milliseconds","initialValue","events","idle","setIdle","useState","lastActive","setLastActive","useEffect","timeoutId","onTimeout","onEvent","throttle","onVisibilitychange","event"],"mappings":"uJAYMA,EAAc,CAClB,YACA,YACA,UACA,aACA,QACA,QACF,EACMC,EAAa,IAuBNC,EAAU,CACrBC,EAAeF,EACf,CAAE,aAAAG,EAAe,GAAO,OAAAC,EAASL,CAAA,EAAgC,KAC/C,CAClB,KAAM,CAACM,EAAMC,CAAO,EAAIC,EAAAA,SAASJ,CAAY,EACvC,CAACK,EAAYC,CAAa,EAAIF,EAAAA,SAAS,KAAK,KAAK,EAEvDG,OAAAA,EAAAA,UAAU,IAAM,CACd,IAAIC,EACJ,MAAMC,EAAY,IAAMN,EAAQ,EAAI,EAE9BO,EAAUC,EAAAA,SAAS,IAAM,CAC7BR,EAAQ,EAAK,EACbG,EAAc,KAAK,KAAK,EACxB,aAAaE,CAAS,EACtBA,EAAY,WAAWC,EAAWV,CAAY,CAAA,EAC7C,GAAG,EAEAa,EAAqB,IAAM,CAC1B,SAAS,QAAQF,EAAA,CAAQ,EAGhC,OAAAF,EAAY,WAAWC,EAAWV,CAAY,EAE9CE,EAAO,QAASY,GAAU,OAAO,iBAAiBA,EAAOH,CAAO,CAAC,EACjE,SAAS,iBAAiB,mBAAoBE,CAAkB,EAEzD,IAAM,CACXX,EAAO,QAASY,GAAU,OAAO,iBAAiBA,EAAOH,CAAO,CAAC,EACjE,SAAS,oBAAoB,mBAAoBE,CAAkB,EACnE,aAAaJ,CAAS,CAAA,CACxB,EACC,CAACT,EAAcE,CAAM,CAAC,EAElB,CAAE,KAAAC,EAAM,WAAAG,CAAA,CACjB"}