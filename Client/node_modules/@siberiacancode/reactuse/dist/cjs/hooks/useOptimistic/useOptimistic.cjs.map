{"version":3,"file":"useOptimistic.cjs","sources":["../../../../src/hooks/useOptimistic/useOptimistic.ts"],"sourcesContent":["import { useRef, useState } from 'react';\n\nimport { useDidUpdate } from '../useDidUpdate/useDidUpdate';\n\nexport type UseOptimisticReturn<State> = [\n  State,\n  (optimisticValue: State, promise: Promise<any>) => void\n];\n\n/**\n * @name useOptimistic\n * @description - Hook that allows get optimistic value before its update\n * @category Async\n *\n * @template State The type of the state\n * @param {State} state The value to be returned initially and whenever no action is pending\n * @param {(currentState: State, optimisticValue: State) => State} update A pure function that takes the current state and the optimistic value passed to updateOptimistic and returns the resulting optimistic state\n * @returns {UseOptimisticReturn<State>} The resulting optimistic state, and the function to update it\n *\n * @example\n * const [optimisticValue, updateOptimistic] = useOptimistic<number>(count, (currentState, optimisticValue) => currentState + optimisticValue);\n */\nexport const useOptimistic = <State, OptimisticState = State>(\n  externalState: State,\n  update: (currentState: State, optimisticState: OptimisticState) => State\n) => {\n  const [state, setState] = useState<State>(externalState);\n  const internalUpdateRef = useRef(update);\n  internalUpdateRef.current = update;\n\n  const [promised, setPromised] = useState(false);\n\n  useDidUpdate(() => {\n    if (!promised) return;\n    setState(externalState);\n    setPromised(false);\n  }, [promised]);\n\n  const updateState = (optimisticValue: OptimisticState, promise: Promise<any>) => {\n    setState((currentState) => internalUpdateRef.current(currentState, optimisticValue));\n    return promise.finally(() => setPromised(true));\n  };\n\n  return [state, updateState] as const;\n};\n"],"names":["useOptimistic","externalState","update","state","setState","useState","internalUpdateRef","useRef","promised","setPromised","useDidUpdate","optimisticValue","promise","currentState"],"mappings":"uJAsBaA,EAAgB,CAC3BC,EACAC,IACG,CACH,KAAM,CAACC,EAAOC,CAAQ,EAAIC,EAAAA,SAAgBJ,CAAa,EACjDK,EAAoBC,EAAAA,OAAOL,CAAM,EACvCI,EAAkB,QAAUJ,EAE5B,KAAM,CAACM,EAAUC,CAAW,EAAIJ,EAAAA,SAAS,EAAK,EAE9CK,OAAAA,EAAAA,aAAa,IAAM,CACZF,IACLJ,EAASH,CAAa,EACtBQ,EAAY,EAAK,EAAA,EAChB,CAACD,CAAQ,CAAC,EAON,CAACL,EALY,CAACQ,EAAkCC,KACrDR,EAAUS,GAAiBP,EAAkB,QAAQO,EAAcF,CAAe,CAAC,EAC5EC,EAAQ,QAAQ,IAAMH,EAAY,EAAI,CAAC,EAGtB,CAC5B"}