{"version":3,"file":"usePerformanceObserver.cjs","sources":["../../../../src/hooks/usePerformanceObserver/usePerformanceObserver.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/** The use performance observer options type */\nexport type UsePerformanceObserverOptions = PerformanceObserverInit & {\n  /** Whether to start the observer immediately */\n  immediate?: boolean;\n};\n\n/**\n * @name usePerformanceObserver\n * @description - Hook that allows you to observe performance entries\n * @category Sensors\n *\n * @browserapi PerformanceObserver https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver\n *\n * @param {UsePerformanceObserverOptions} options The options for the performance observer\n * @param {PerformanceObserverCallback} callback The function to handle performance entries\n * @returns {object} An object containing the observer's support status and methods to start and stop the observer\n *\n * @example\n * const { supported, entries, start, stop } = usePerformanceObserver();\n */\nexport const usePerformanceObserver = (\n  options: UsePerformanceObserverOptions,\n  callback?: PerformanceObserverCallback\n) => {\n  const supported = typeof window !== 'undefined' && typeof PerformanceObserver !== 'undefined';\n  const [entries, setEntries] = useState<PerformanceEntry[]>([]);\n\n  const observerRef = useRef<PerformanceObserver | null>(null);\n  const internalCallback = useRef<PerformanceObserverCallback | null>(callback);\n  internalCallback.current = callback;\n\n  const start = () => {\n    if (!supported) return;\n    const observer = new PerformanceObserver((entryList, observer) => {\n      setEntries(entryList.getEntries());\n      internalCallback.current?.(entryList, observer);\n    });\n    observer.observe(options);\n    observerRef.current = observer;\n  };\n\n  const stop = () => {\n    if (!supported) return;\n    observerRef.current?.disconnect();\n    observerRef.current = null;\n  };\n\n  useEffect(() => {\n    if (!supported) return;\n    if (options.immediate) start();\n\n    return () => {\n      stop();\n    };\n  }, []);\n\n  return { supported, entries, start, stop };\n};\n"],"names":["usePerformanceObserver","options","callback","supported","entries","setEntries","useState","observerRef","useRef","internalCallback","start","observer","entryList","stop","useEffect"],"mappings":"yGAsBaA,EAAyB,CACpCC,EACAC,IACG,CACH,MAAMC,EAAY,OAAO,OAAW,KAAe,OAAO,oBAAwB,IAC5E,CAACC,EAASC,CAAU,EAAIC,EAAAA,SAA6B,CAAA,CAAE,EAEvDC,EAAcC,EAAAA,OAAmC,IAAI,EACrDC,EAAmBD,EAAAA,OAA2CN,CAAQ,EAC5EO,EAAiB,QAAUP,EAE3B,MAAMQ,EAAQ,IAAM,CAClB,GAAI,CAACP,EAAW,OAChB,MAAMQ,EAAW,IAAI,oBAAoB,CAACC,EAAWD,IAAa,CAChEN,EAAWO,EAAU,YAAY,EACjCH,EAAiB,UAAUG,EAAWD,CAAQ,CAAA,CAC/C,EACDA,EAAS,QAAQV,CAAO,EACxBM,EAAY,QAAUI,CAAA,EAGlBE,EAAO,IAAM,CACZV,IACLI,EAAY,SAAS,WAAA,EACrBA,EAAY,QAAU,KAAA,EAGxBO,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAKX,EACL,OAAIF,EAAQ,WAAWS,EAAA,EAEhB,IAAM,CACXG,EAAA,CAAK,CACP,EACC,EAAE,EAEE,CAAE,UAAAV,EAAW,QAAAC,EAAS,MAAAM,EAAO,KAAAG,CAAA,CACtC"}