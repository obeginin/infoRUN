{"version":3,"file":"useSpeechSynthesis.cjs","sources":["../../../../src/hooks/useSpeechSynthesis/useSpeechSynthesis.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/** The use speech synthesis status type */\nexport type UseSpeechSynthesisStatus = 'end' | 'init' | 'pause' | 'play';\n\n/** The use speech synthesis options type */\nexport interface UseSpeechSynthesisOptions {\n  /** Language for SpeechSynthesis */\n  lang?: string;\n  /** Gets and sets the pitch at which the utterance will be spoken at. */\n  pitch?: number;\n  /** Gets and sets the speed at which the utterance will be spoken at. */\n  rate?: number;\n  /** The text to be spoken */\n  text?: string;\n  /** Gets and sets the voice that will be used to speak the utterance. */\n  voice?: SpeechSynthesisVoice | null;\n  /** Gets and sets the volume that the utterance will be spoken at. */\n  volume?: number;\n}\n\n/** The use speech synthesis return type */\nexport interface UseSpeechSynthesisReturn {\n  /** Any error that occurred during speech synthesis. */\n  error: SpeechSynthesisErrorEvent | undefined;\n  /** Indicates if speech is currently playing. */\n  playing: boolean;\n  /** The current status of speech synthesis. */\n  status: UseSpeechSynthesisStatus;\n  /** Indicates if the SpeechSynthesis API is supported in the current environment. */\n  supported: boolean;\n  /** The SpeechSynthesisUtterance instance. */\n  utterance: SpeechSynthesisUtterance | null;\n  /** Function to pause speech synthesis. */\n  pause: () => void;\n  /** Function to resume speech synthesis. */\n  resume: () => void;\n  /** Function to start speech synthesis. */\n  speak: () => void;\n  /** Function to stop speech synthesis. */\n  stop: () => void;\n  /** Function to toggle between play and pause. */\n  toggle: (value?: boolean) => void;\n}\n\n/**\n * @name useSpeechSynthesis\n * @description - Hook that provides speech synthesis functionality\n * @category Browser\n *\n * @browserapi SpeechSynthesis https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis\n *\n * @params {string} [options.text] - The text to be spoken\n * @params {string} [options.lang] - The language to be spoken\n * @params {number} [options.pitch] - The pitch to be spoken\n * @params {number} [options.rate] - The rate to be spoken\n * @params {SpeechSynthesisVoice} [options.voice] - The voice to be spoken\n * @params {number} [options.volume] - The volume to be spoken\n * @returns {UseSpeechSynthesisReturn} An object containing the speech synthesis state and control methods\n *\n * @example\n * const { supported, playing, status, utterance, error, stop, toggle, speak, resume, pause } = useSpeechSynthesis();\n */\nexport const useSpeechSynthesis = (\n  options: UseSpeechSynthesisOptions = {}\n): UseSpeechSynthesisReturn => {\n  const supported = typeof window !== 'undefined' && 'speechSynthesis' in window;\n\n  const { text = '', lang = 'en-US', pitch = 1, rate = 1, voice = null, volume = 1 } = options;\n\n  const [playing, setPlaying] = useState(false);\n  const [status, setStatus] = useState<UseSpeechSynthesisStatus>('init');\n  const [error, setError] = useState<SpeechSynthesisErrorEvent>();\n  const speechSynthesisUtteranceRef = useRef<SpeechSynthesisUtterance | null>(null);\n\n  const bindSpeechSynthesisUtterance = (speechSynthesisUtterance: SpeechSynthesisUtterance) => {\n    speechSynthesisUtterance.lang = lang;\n    speechSynthesisUtterance.pitch = pitch;\n    speechSynthesisUtterance.rate = rate;\n    speechSynthesisUtterance.volume = volume;\n    speechSynthesisUtterance.voice = voice;\n\n    speechSynthesisUtterance.onstart = () => {\n      setPlaying(true);\n      setStatus('play');\n    };\n\n    speechSynthesisUtterance.onpause = () => {\n      setPlaying(false);\n      setStatus('pause');\n    };\n\n    speechSynthesisUtterance.onresume = () => {\n      setPlaying(true);\n      setStatus('play');\n    };\n\n    speechSynthesisUtterance.onend = () => {\n      setPlaying(false);\n      setStatus('end');\n    };\n\n    speechSynthesisUtterance.onerror = (event) => {\n      setPlaying(false);\n      setError(event);\n    };\n  };\n\n  useEffect(() => {\n    if (!supported) return;\n\n    const speechSynthesisUtterance = new SpeechSynthesisUtterance(text);\n    bindSpeechSynthesisUtterance(speechSynthesisUtterance);\n    speechSynthesisUtteranceRef.current = speechSynthesisUtterance;\n\n    return () => {\n      window.speechSynthesis?.cancel();\n    };\n  }, [text, lang, pitch, rate, voice, volume]);\n\n  const speak = (text?: string) => {\n    if (!supported) return;\n\n    if (text) {\n      speechSynthesisUtteranceRef.current = new SpeechSynthesisUtterance(text);\n      bindSpeechSynthesisUtterance(speechSynthesisUtteranceRef.current);\n    }\n\n    window.speechSynthesis?.cancel();\n    if (speechSynthesisUtteranceRef.current)\n      window.speechSynthesis?.speak(speechSynthesisUtteranceRef.current);\n  };\n\n  const stop = () => {\n    if (!supported) return;\n\n    window.speechSynthesis?.cancel();\n    setPlaying(false);\n  };\n\n  const toggle = (value = !playing) => {\n    if (!supported) return;\n\n    if (value) {\n      window.speechSynthesis?.resume();\n    } else {\n      window.speechSynthesis?.pause();\n    }\n    setPlaying(value);\n  };\n\n  const resume = () => {\n    setPlaying(true);\n    window.speechSynthesis?.resume();\n  };\n\n  const pause = () => {\n    setPlaying(false);\n    window.speechSynthesis?.pause();\n  };\n\n  return {\n    supported,\n    playing,\n    status,\n    utterance: speechSynthesisUtteranceRef.current,\n    error,\n\n    stop,\n    toggle,\n    speak,\n    resume,\n    pause\n  };\n};\n"],"names":["useSpeechSynthesis","options","supported","text","lang","pitch","rate","voice","volume","playing","setPlaying","useState","status","setStatus","error","setError","speechSynthesisUtteranceRef","useRef","bindSpeechSynthesisUtterance","speechSynthesisUtterance","event","useEffect","speak","stop","toggle","value","resume","pause"],"mappings":"yGA+DaA,EAAqB,CAChCC,EAAqC,KACR,CAC7B,MAAMC,EAAY,OAAO,OAAW,KAAe,oBAAqB,OAElE,CAAE,KAAAC,EAAO,GAAI,KAAAC,EAAO,QAAS,MAAAC,EAAQ,EAAG,KAAAC,EAAO,EAAG,MAAAC,EAAQ,KAAM,OAAAC,EAAS,GAAMP,EAE/E,CAACQ,EAASC,CAAU,EAAIC,EAAAA,SAAS,EAAK,EACtC,CAACC,EAAQC,CAAS,EAAIF,EAAAA,SAAmC,MAAM,EAC/D,CAACG,EAAOC,CAAQ,EAAIJ,WAAA,EACpBK,EAA8BC,EAAAA,OAAwC,IAAI,EAE1EC,EAAgCC,GAAuD,CAC3FA,EAAyB,KAAOf,EAChCe,EAAyB,MAAQd,EACjCc,EAAyB,KAAOb,EAChCa,EAAyB,OAASX,EAClCW,EAAyB,MAAQZ,EAEjCY,EAAyB,QAAU,IAAM,CACvCT,EAAW,EAAI,EACfG,EAAU,MAAM,CAAA,EAGlBM,EAAyB,QAAU,IAAM,CACvCT,EAAW,EAAK,EAChBG,EAAU,OAAO,CAAA,EAGnBM,EAAyB,SAAW,IAAM,CACxCT,EAAW,EAAI,EACfG,EAAU,MAAM,CAAA,EAGlBM,EAAyB,MAAQ,IAAM,CACrCT,EAAW,EAAK,EAChBG,EAAU,KAAK,CAAA,EAGjBM,EAAyB,QAAWC,GAAU,CAC5CV,EAAW,EAAK,EAChBK,EAASK,CAAK,CAAA,CAChB,EAGFC,EAAAA,UAAU,IAAM,CACd,GAAI,CAACnB,EAAW,OAEhB,MAAMiB,EAA2B,IAAI,yBAAyBhB,CAAI,EAClE,OAAAe,EAA6BC,CAAwB,EACrDH,EAA4B,QAAUG,EAE/B,IAAM,CACX,OAAO,iBAAiB,OAAA,CAAO,CACjC,EACC,CAAChB,EAAMC,EAAMC,EAAOC,EAAMC,EAAOC,CAAM,CAAC,EAE3C,MAAMc,EAASnB,GAAkB,CAC1BD,IAEDC,IACFa,EAA4B,QAAU,IAAI,yBAAyBb,CAAI,EACvEe,EAA6BF,EAA4B,OAAO,GAGlE,OAAO,iBAAiB,OAAA,EACpBA,EAA4B,SAC9B,OAAO,iBAAiB,MAAMA,EAA4B,OAAO,EAAA,EAG/DO,EAAO,IAAM,CACZrB,IAEL,OAAO,iBAAiB,OAAA,EACxBQ,EAAW,EAAK,EAAA,EAGZc,EAAS,CAACC,EAAQ,CAAChB,IAAY,CAC9BP,IAEDuB,EACF,OAAO,iBAAiB,OAAA,EAExB,OAAO,iBAAiB,MAAA,EAE1Bf,EAAWe,CAAK,EAAA,EAGZC,EAAS,IAAM,CACnBhB,EAAW,EAAI,EACf,OAAO,iBAAiB,OAAA,CAAO,EAG3BiB,EAAQ,IAAM,CAClBjB,EAAW,EAAK,EAChB,OAAO,iBAAiB,MAAA,CAAM,EAGhC,MAAO,CACL,UAAAR,EACA,QAAAO,EACA,OAAAG,EACA,UAAWI,EAA4B,QACvC,MAAAF,EAEA,KAAAS,EACA,OAAAC,EACA,MAAAF,EACA,OAAAI,EACA,MAAAC,CAAA,CAEJ"}