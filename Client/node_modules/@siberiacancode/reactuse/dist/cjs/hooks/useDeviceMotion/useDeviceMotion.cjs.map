{"version":3,"file":"useDeviceMotion.cjs","sources":["../../../../src/hooks/useDeviceMotion/useDeviceMotion.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nimport { throttle } from '@/utils/helpers';\n\nexport interface UseDeviceMotionReturn {\n  acceleration: DeviceMotionEventAcceleration;\n  accelerationIncludingGravity: DeviceMotionEventAcceleration;\n  interval: DeviceMotionEvent['interval'];\n  rotationRate: DeviceMotionEventRotationRate;\n}\n\nexport interface UseDeviceMotionParams {\n  /** The delay in milliseconds */\n  delay?: number;\n  /** Whether to enable the hook */\n  enabled?: boolean;\n  /** The callback function to be invoked */\n  callback?: (event: DeviceMotionEvent) => void;\n}\n\n/**\n * @name useDeviceMotion\n * @description - Hook that work with device motion\n * @category Utilities\n *\n * @browserapi DeviceMotionEvent https://developer.mozilla.org/en-US/docs/Web/API/Window/DeviceMotionEvent\n *\n * @param {number} [delay=1000] The delay in milliseconds\n * @param {(event: DeviceMotionEvent) => void} [callback] The callback function to be invoked\n * @param {boolean} [enabled=true] Whether to enable the hook\n * @returns {UseDeviceMotionReturn} The device motion data and interval\n *\n * @example\n * const { interval, rotationRate, acceleration, accelerationIncludingGravity } = useDeviceMotion();\n */\nexport const useDeviceMotion = (params?: UseDeviceMotionParams) => {\n  const enabled = params?.enabled ?? true;\n  const delay = params?.delay ?? 1000;\n  const [value, setValue] = useState<UseDeviceMotionReturn>({\n    interval: 0,\n    rotationRate: { alpha: null, beta: null, gamma: null },\n    acceleration: { x: null, y: null, z: null },\n    accelerationIncludingGravity: { x: null, y: null, z: null }\n  });\n  const internalCallbackRef = useRef(params?.callback);\n  internalCallbackRef.current = params?.callback;\n\n  useEffect(() => {\n    if (!enabled) return;\n\n    const onDeviceMotion = throttle<[DeviceMotionEvent]>((event) => {\n      internalCallbackRef.current?.(event);\n\n      setValue({\n        interval: event.interval,\n        rotationRate: {\n          ...value.rotationRate,\n          ...event.rotationRate\n        },\n        acceleration: {\n          ...value.acceleration,\n          ...event.acceleration\n        },\n        accelerationIncludingGravity: {\n          ...value.accelerationIncludingGravity,\n          ...event.accelerationIncludingGravity\n        }\n      });\n    }, delay);\n\n    window.addEventListener('devicemotion', onDeviceMotion);\n\n    return () => {\n      window.removeEventListener('devicemotion', onDeviceMotion);\n    };\n  }, [delay, enabled]);\n\n  return value;\n};\n"],"names":["useDeviceMotion","params","enabled","delay","value","setValue","useState","internalCallbackRef","useRef","useEffect","onDeviceMotion","throttle","event"],"mappings":"uJAmCaA,EAAmBC,GAAmC,CACjE,MAAMC,EAAUD,GAAQ,SAAW,GAC7BE,EAAQF,GAAQ,OAAS,IACzB,CAACG,EAAOC,CAAQ,EAAIC,WAAgC,CACxD,SAAU,EACV,aAAc,CAAE,MAAO,KAAM,KAAM,KAAM,MAAO,IAAA,EAChD,aAAc,CAAE,EAAG,KAAM,EAAG,KAAM,EAAG,IAAA,EACrC,6BAA8B,CAAE,EAAG,KAAM,EAAG,KAAM,EAAG,IAAA,CAAK,CAC3D,EACKC,EAAsBC,EAAAA,OAAOP,GAAQ,QAAQ,EACnD,OAAAM,EAAoB,QAAUN,GAAQ,SAEtCQ,EAAAA,UAAU,IAAM,CACd,GAAI,CAACP,EAAS,OAEd,MAAMQ,EAAiBC,WAA+BC,GAAU,CAC9DL,EAAoB,UAAUK,CAAK,EAEnCP,EAAS,CACP,SAAUO,EAAM,SAChB,aAAc,CACZ,GAAGR,EAAM,aACT,GAAGQ,EAAM,YAAA,EAEX,aAAc,CACZ,GAAGR,EAAM,aACT,GAAGQ,EAAM,YAAA,EAEX,6BAA8B,CAC5B,GAAGR,EAAM,6BACT,GAAGQ,EAAM,4BAAA,CACX,CACD,CAAA,EACAT,CAAK,EAER,cAAO,iBAAiB,eAAgBO,CAAc,EAE/C,IAAM,CACX,OAAO,oBAAoB,eAAgBA,CAAc,CAAA,CAC3D,EACC,CAACP,EAAOD,CAAO,CAAC,EAEZE,CACT"}