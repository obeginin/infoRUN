{"version":3,"file":"usePointerLock.cjs","sources":["../../../../src/hooks/usePointerLock/usePointerLock.ts"],"sourcesContent":["import type { MouseEvent } from 'react';\n\nimport { useEffect, useState } from 'react';\n\n/** The use pointer lock return type */\ninterface UsePointerLockReturn {\n  /** The pointer lock element */\n  element?: Element;\n  /** Whether the pointer lock is supported */\n  supported: boolean;\n  /** Lock the pointer lock */\n  lock: (event: MouseEvent) => void;\n  /** Unlock the pointer lock */\n  unlock: () => boolean;\n}\n\n/**\n * @name usePointerLock\n * @description - Hook that provides reactive pointer lock\n * @category Browser\n *\n * @browserapi pointerLockElement https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerLockElement\n *\n * @returns {UsePointerLockReturn} An object containing the pointer lock element and functions to interact with the pointer lock\n *\n * @example\n * const { supported, lock, unlock, element } = usePointerLock();\n */\nexport const usePointerLock = (): UsePointerLockReturn => {\n  const supported = typeof document !== 'undefined' && 'pointerLockElement' in document;\n  const [element, setElement] = useState<Element>();\n\n  useEffect(() => {\n    if (!supported) return;\n\n    const handlePointerLockChange = () => {\n      if (!supported) return;\n\n      const currentElement = document.pointerLockElement ?? element;\n\n      if (currentElement && currentElement === element) {\n        setElement(document.pointerLockElement as Element);\n      }\n    };\n    const handlePointerLockError = () => {\n      if (!supported) return;\n\n      const currentElement = document.pointerLockElement ?? element;\n\n      if (currentElement && currentElement === element) {\n        const action = document.pointerLockElement ? 'release' : 'acquire';\n\n        throw new Error(`Failed to ${action} pointer lock.`);\n      }\n    };\n\n    document.addEventListener('pointerlockchange', handlePointerLockChange);\n    document.addEventListener('pointerlockerror', handlePointerLockError);\n\n    return () => {\n      document.removeEventListener('pointerlockchange', handlePointerLockChange);\n      document.removeEventListener('pointerlockerror', handlePointerLockError);\n    };\n  }, []);\n\n  const lock = (event: MouseEvent) => {\n    if (!supported) return false;\n\n    if (event instanceof Event) return false;\n\n    event.currentTarget.requestPointerLock();\n\n    setElement(event.currentTarget);\n    return true;\n  };\n\n  const unlock = () => {\n    if (!supported) return false;\n\n    if (!element) return false;\n\n    document.exitPointerLock();\n    setElement(undefined);\n\n    return true;\n  };\n\n  return {\n    supported,\n    element,\n    lock,\n    unlock\n  };\n};\n"],"names":["usePointerLock","supported","element","setElement","useState","useEffect","handlePointerLockChange","currentElement","handlePointerLockError","action","event"],"mappings":"yGA4BaA,EAAiB,IAA4B,CACxD,MAAMC,EAAY,OAAO,SAAa,KAAe,uBAAwB,SACvE,CAACC,EAASC,CAAU,EAAIC,WAAA,EAE9BC,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAI,CAACJ,EAAW,OAEhB,MAAMK,EAA0B,IAAM,CACpC,GAAI,CAACL,EAAW,OAEhB,MAAMM,EAAiB,SAAS,oBAAsBL,EAElDK,GAAkBA,IAAmBL,GACvCC,EAAW,SAAS,kBAA6B,CACnD,EAEIK,EAAyB,IAAM,CACnC,GAAI,CAACP,EAAW,OAEhB,MAAMM,EAAiB,SAAS,oBAAsBL,EAEtD,GAAIK,GAAkBA,IAAmBL,EAAS,CAChD,MAAMO,EAAS,SAAS,mBAAqB,UAAY,UAEzD,MAAM,IAAI,MAAM,aAAaA,CAAM,gBAAgB,CAAA,CACrD,EAGF,gBAAS,iBAAiB,oBAAqBH,CAAuB,EACtE,SAAS,iBAAiB,mBAAoBE,CAAsB,EAE7D,IAAM,CACX,SAAS,oBAAoB,oBAAqBF,CAAuB,EACzE,SAAS,oBAAoB,mBAAoBE,CAAsB,CAAA,CACzE,EACC,EAAE,EAwBE,CACL,UAAAP,EACA,QAAAC,EACA,KAzBYQ,GACR,CAACT,GAEDS,aAAiB,MAAc,IAEnCA,EAAM,cAAc,mBAAA,EAEpBP,EAAWO,EAAM,aAAa,EACvB,IAkBP,OAfa,IACT,CAACT,GAED,CAACC,EAAgB,IAErB,SAAS,gBAAA,EACTC,EAAW,MAAS,EAEb,GAOP,CAEJ"}