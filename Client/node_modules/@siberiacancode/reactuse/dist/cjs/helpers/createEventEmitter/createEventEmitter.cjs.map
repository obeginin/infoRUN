{"version":3,"file":"createEventEmitter.cjs","sources":["../../../../src/helpers/createEventEmitter/createEventEmitter.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\n/**\n * @name createEventEmitter\n * @description - Creates a type-safe event emitter\n * @category Helpers\n *\n * @template Events - The type of events and their data\n * @returns {EventEmitterApi<Events>} - Object containing event emitter methods and hook\n *\n * @example\n * const { push, subscribe, unsubscribe, useSubscribe } = createEventEmitter<{ foo: number }>();\n */\nexport const createEventEmitter = <Events extends Record<string, any> = Record<string, any>>() => {\n  type ListenerMap = Map<string, Set<(data: any) => void>>;\n  const listeners: ListenerMap = new Map();\n\n  const push = <Event extends keyof Events>(event: Event, data: Events[Event]) => {\n    const eventListeners = listeners.get(event as string);\n    eventListeners?.forEach((listener) => listener(data));\n  };\n\n  const unsubscribe = <Key extends keyof Events>(\n    event: Key,\n    listener: (data: Events[Key]) => void\n  ) => {\n    const eventKey = event as string;\n    const eventListeners = listeners.get(eventKey);\n    if (!eventListeners) return;\n    eventListeners.delete(listener);\n    if (!eventListeners.size) listeners.delete(eventKey);\n  };\n\n  const subscribe = <Key extends keyof Events>(\n    event: Key,\n    listener: (data: Events[Key]) => void\n  ) => {\n    const eventKey = event as string;\n    if (!listeners.has(eventKey)) listeners.set(eventKey, new Set());\n    const eventListeners = listeners.get(event as string)!;\n    eventListeners.add(listener);\n\n    return () => {\n      unsubscribe(event, listener);\n    };\n  };\n\n  const useSubscribe = <Event extends keyof Events>(\n    event: Event,\n    listener?: (data: Events[Event]) => void\n  ) => {\n    const [data, setData] = useState<Events[Event] | undefined>(undefined);\n    const listenerRef = useRef(listener);\n    listenerRef.current = listener;\n\n    useEffect(() => {\n      const onSubscribe = (data: Events[Event]) => {\n        setData(data);\n        listenerRef.current?.(data);\n      };\n\n      const unsubscribe = subscribe(event, onSubscribe);\n      return () => {\n        unsubscribe();\n      };\n    }, [event]);\n\n    return data;\n  };\n\n  return {\n    push,\n    subscribe,\n    unsubscribe,\n    useSubscribe\n  };\n};\n"],"names":["createEventEmitter","listeners","push","event","data","listener","unsubscribe","eventKey","eventListeners","subscribe","setData","useState","listenerRef","useRef","useEffect"],"mappings":"yGAaaA,EAAqB,IAAgE,CAEhG,MAAMC,MAA6B,IAE7BC,EAAO,CAA6BC,EAAcC,IAAwB,CACvDH,EAAU,IAAIE,CAAe,GACpC,QAASE,GAAaA,EAASD,CAAI,CAAC,CAAA,EAGhDE,EAAc,CAClBH,EACAE,IACG,CACH,MAAME,EAAWJ,EACXK,EAAiBP,EAAU,IAAIM,CAAQ,EACxCC,IACLA,EAAe,OAAOH,CAAQ,EACzBG,EAAe,MAAMP,EAAU,OAAOM,CAAQ,EAAA,EAG/CE,EAAY,CAChBN,EACAE,IACG,CACH,MAAME,EAAWJ,EACjB,OAAKF,EAAU,IAAIM,CAAQ,KAAa,IAAIA,EAAU,IAAI,GAAK,EACxCN,EAAU,IAAIE,CAAe,EACrC,IAAIE,CAAQ,EAEpB,IAAM,CACXC,EAAYH,EAAOE,CAAQ,CAAA,CAC7B,EA0BF,MAAO,CACL,KAAAH,EACA,UAAAO,EACA,YAAAH,EACA,aA3BmB,CACnBH,EACAE,IACG,CACH,KAAM,CAACD,EAAMM,CAAO,EAAIC,EAAAA,SAAoC,MAAS,EAC/DC,EAAcC,EAAAA,OAAOR,CAAQ,EACnC,OAAAO,EAAY,QAAUP,EAEtBS,EAAAA,UAAU,IAAM,CAMd,MAAMR,EAAcG,EAAUN,EALTC,GAAwB,CAC3CM,EAAQN,CAAI,EACZQ,EAAY,UAAUR,CAAI,CAAA,CAGoB,EAChD,MAAO,IAAM,CACXE,EAAAA,CAAY,CACd,EACC,CAACH,CAAK,CAAC,EAEHC,CAAA,CAOP,CAEJ"}