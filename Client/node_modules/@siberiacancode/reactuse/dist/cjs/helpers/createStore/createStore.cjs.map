{"version":3,"file":"createStore.cjs","sources":["../../../../src/helpers/createStore/createStore.ts"],"sourcesContent":["import { useSyncExternalStore } from 'react';\n\ntype SetStateAction<Value> = ((prev: Value) => Value) | Value;\ntype StateCreator<Value> = (\n  set: (action: SetStateAction<Value>) => void,\n  get: () => Value\n) => Value;\n\nexport interface StoreApi<Value> {\n  getInitialState: () => Value;\n  getState: () => Value;\n  setState: (action: SetStateAction<Value>) => void;\n  subscribe: (listener: (state: Value, prevState: Value) => void) => () => void;\n}\n\n/**\n * @name createStore\n * @description - Creates a store with state management capabilities\n * @category Helpers\n *\n * @template Value - The type of the store state\n * @param {StateCreator<Value>} createState - Function that initializes the store state\n * @returns {StoreApi<Value>} - Object containing store methods and hook for accessing state\n *\n * @example\n * const { set, get, use, subscribe } = createStore((set) => ({\n *   count: 0,\n *   increment: () => set(state => ({ count: state.count + 1 }))\n * }));\n */\nexport const createStore = <Value>(createState: StateCreator<Value> | Value) => {\n  type Listener = (state: Value, prevState: Value) => void;\n  let state: Value;\n  const listeners: Set<Listener> = new Set();\n\n  const setState = (action: SetStateAction<Value>) => {\n    const nextState =\n      typeof action === 'function' ? (action as (state: Value) => Value)(state) : action;\n\n    if (!Object.is(nextState, state)) {\n      const prevState = state;\n      state = nextState;\n      listeners.forEach((listener) => listener(state, prevState));\n    }\n  };\n\n  const getState = () => state;\n  const getInitialState = () => state;\n\n  const subscribe = (listener: Listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  if (typeof createState === 'function') {\n    state = (createState as StateCreator<Value>)(setState, getState);\n  } else {\n    state = createState;\n  }\n\n  const useStore = <Selected>(selector?: (state: Value) => Selected) =>\n    useSyncExternalStore(\n      subscribe,\n      () => (selector ? selector(getState()) : getState()),\n      () => (selector ? selector(getInitialState()) : getInitialState())\n    );\n\n  return {\n    set: setState,\n    get: getState,\n    use: useStore,\n    subscribe\n  };\n};\n"],"names":["createStore","createState","state","listeners","setState","action","nextState","prevState","listener","getState","getInitialState","subscribe","selector","useSyncExternalStore"],"mappings":"yGA8BaA,EAAsBC,GAA6C,CAE9E,IAAIC,EACJ,MAAMC,MAA+B,IAE/BC,EAAYC,GAAkC,CAClD,MAAMC,EACJ,OAAOD,GAAW,WAAcA,EAAmCH,CAAK,EAAIG,EAE9E,GAAI,CAAC,OAAO,GAAGC,EAAWJ,CAAK,EAAG,CAChC,MAAMK,EAAYL,EAClBA,EAAQI,EACRH,EAAU,QAASK,GAAaA,EAASN,EAAOK,CAAS,CAAC,CAAA,CAC5D,EAGIE,EAAW,IAAMP,EACjBQ,EAAkB,IAAMR,EAExBS,EAAaH,IACjBL,EAAU,IAAIK,CAAQ,EACf,IAAML,EAAU,OAAOK,CAAQ,GAExC,OAAI,OAAOP,GAAgB,WACzBC,EAASD,EAAoCG,EAAUK,CAAQ,EAE/DP,EAAQD,EAUH,CACL,IAAKG,EACL,IAAKK,EACL,IAV0BG,GAC1BC,EAAAA,qBACEF,EACA,IAAOC,EAAWA,EAASH,EAAA,CAAU,EAAIA,EAAA,EACzC,IAAOG,EAAWA,EAASF,EAAA,CAAiB,EAAIA,EAAA,CAAgB,EAOlE,UAAAC,CAAA,CAEJ"}