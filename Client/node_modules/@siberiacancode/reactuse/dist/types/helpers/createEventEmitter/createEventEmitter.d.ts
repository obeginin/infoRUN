/**
 * @name createEventEmitter
 * @description - Creates a type-safe event emitter
 * @category Helpers
 *
 * @template Events - The type of events and their data
 * @returns {EventEmitterApi<Events>} - Object containing event emitter methods and hook
 *
 * @example
 * const { push, subscribe, unsubscribe, useSubscribe } = createEventEmitter<{ foo: number }>();
 */
export declare const createEventEmitter: <Events extends Record<string, any> = Record<string, any>>() => {
    push: <Event extends keyof Events>(event: Event, data: Events[Event]) => void;
    subscribe: <Key extends keyof Events>(event: Key, listener: (data: Events[Key]) => void) => () => void;
    unsubscribe: <Key extends keyof Events>(event: Key, listener: (data: Events[Key]) => void) => void;
    useSubscribe: <Event extends keyof Events>(event: Event, listener?: (data: Events[Event]) => void) => Events[Event] | undefined;
};
