import { Context, Provider, RefObject } from 'react';
/** The create reactive context options type */
export interface CreateReactiveContextOptions {
    /** Display name for the context (useful for debugging) */
    name?: string;
    /** Whether to throw an error if context is used outside of Provider */
    strict?: boolean;
}
/** The create reactive context return type */
export interface CreateReactiveContextReturn<Value> {
    /** The context instance */
    instance: Context<ReactiveContextValue<Value>>;
    /** The Provider component for the context */
    Provider: Provider<Value>;
    /** A hook to select a part of the context state */
    useSelector: <Selected>(selector?: (state: Value) => Selected) => Selected;
}
type ContextListener<Value> = (value: Value) => void;
interface ReactiveContextValue<Value> {
    /** The listeners for the context */
    listeners: Set<ContextListener<Value>>;
    /** The value for the context */
    value: RefObject<Value>;
}
/**
 * @name createReactiveContext
 * @description - Creates a typed context selector with optimized updates for state selection
 * @category Helpers
 *
 * @warning - For complex interfaces, we strongly recommend using state management solutions outside of React like createStore, reatom, effector, or zustand instead of context
 *
 * @template Value - The type of value that will be stored in the context
 * @param {Value | undefined} [defaultValue] - Default value for the context
 * @param {CreateReactiveContextOptions<Value>} [options] - Additional options for context creation
 * @returns {CreateReactiveContextReturn<Value>} Object containing context utilities and components
 *
 * @example
 * const { Provider, useSelector, instance } = createReactiveContext<number>(0);
 */
export declare const createReactiveContext: <Value extends Record<string, any>>(defaultValue?: Value | undefined, options?: CreateReactiveContextOptions) => {
    instance: Context<ReactiveContextValue<Value>>;
    Provider: Provider<Value>;
    useSelector: {
        (): Value;
        <SelectedValue>(selector: (state: Value) => SelectedValue): SelectedValue;
    };
};
export {};
