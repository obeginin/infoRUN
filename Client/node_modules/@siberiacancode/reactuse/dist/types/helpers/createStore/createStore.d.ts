type SetStateAction<Value> = ((prev: Value) => Value) | Value;
type StateCreator<Value> = (set: (action: SetStateAction<Value>) => void, get: () => Value) => Value;
export interface StoreApi<Value> {
    getInitialState: () => Value;
    getState: () => Value;
    setState: (action: SetStateAction<Value>) => void;
    subscribe: (listener: (state: Value, prevState: Value) => void) => () => void;
}
/**
 * @name createStore
 * @description - Creates a store with state management capabilities
 * @category Helpers
 *
 * @template Value - The type of the store state
 * @param {StateCreator<Value>} createState - Function that initializes the store state
 * @returns {StoreApi<Value>} - Object containing store methods and hook for accessing state
 *
 * @example
 * const { set, get, use, subscribe } = createStore((set) => ({
 *   count: 0,
 *   increment: () => set(state => ({ count: state.count + 1 }))
 * }));
 */
export declare const createStore: <Value>(createState: StateCreator<Value> | Value) => {
    set: (action: SetStateAction<Value>) => void;
    get: () => Value;
    use: <Selected>(selector?: (state: Value) => Selected) => Value | Selected;
    subscribe: (listener: (state: Value, prevState: Value) => void) => () => boolean;
};
export {};
