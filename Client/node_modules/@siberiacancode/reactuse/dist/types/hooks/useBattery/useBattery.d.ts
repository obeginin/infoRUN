export interface BatteryManager extends EventTarget {
    charging: boolean;
    chargingTime: number;
    dischargingTime: number;
    level: number;
}
declare global {
    interface Navigator {
        readonly getBattery: () => Promise<BatteryManager>;
    }
}
/** The use battery value type */
export interface UseBatteryValue {
    /** Is charging battery? */
    charging: boolean;
    /** Time until the battery is fully charged */
    chargingTime: number;
    /** Time until the battery is completely discharged */
    dischargingTime: number;
    /** Battery charge level from 0 to 1 */
    level: number;
    /** Is battery information loading? */
    loading: boolean;
}
/** The use battery return type */
export interface UseBatteryStateReturn {
    /** Whether the battery api is supported*/
    supported: boolean;
    /** The use battery value type  */
    value: UseBatteryValue;
}
/**
 * @name useBattery
 * @description - Hook for getting information about battery status
 * @category Browser
 *
 * @browserapi navigator.getBattery https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getBattery
 *
 * @returns {UseBatteryStateReturn} Object containing battery information & Battery API support
 *
 * @example
 * const { supported, loading, charging, chargingTime, dischargingTime, level } = useBattery();
 */
export declare const useBattery: () => UseBatteryStateReturn;
