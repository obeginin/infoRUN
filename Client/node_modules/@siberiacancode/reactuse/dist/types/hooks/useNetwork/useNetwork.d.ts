export interface Connection extends EventTarget {
    readonly downlink: number;
    readonly downlinkMax: number;
    readonly effectiveType: '2g' | '3g' | '4g' | 'slow-2g';
    readonly rtt: number;
    readonly saveData: boolean;
    onChange: (event: Event) => void;
    readonly type: 'bluetooth' | 'cellular' | 'ethernet' | 'mixed' | 'none' | 'other' | 'unknown' | 'wifi' | 'wimax';
}
declare global {
    interface Navigator {
        readonly connection: Connection;
        readonly mozConnection: Connection;
        readonly webkitConnection: Connection;
    }
}
/** The type of network connection */
export type ConnectionType = Connection['type'];
/** The effective type of connection */
export type ConnectionEffectiveType = Connection['effectiveType'];
/** The use network return type */
export interface UseNetworkReturn {
    /** The estimated downlink speed in megabits per seconds */
    downlink?: Connection['downlink'];
    /** The maximum downlink speed, if available */
    downlinkMax?: Connection['downlinkMax'];
    /** The effective type of connection (e.g., '2g', '3g', '4g') */
    effectiveType?: Connection['effectiveType'];
    /** Indicates if the device is currently online */
    online: boolean;
    /** The estimated round-trip time in milliseconds */
    rtt?: Connection['rtt'];
    /** Indicates if the user has enabled data saving mode */
    saveData?: Connection['saveData'];
    /** The type of network connection (e.g., 'wifi', 'cellular') */
    type?: Connection['type'];
}
export declare const getConnection: () => Connection;
/**
 * @name useNetwork
 * @description - Hook to track network status
 * @category Browser
 *
 * @browserapi navigator.connection https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection
 *
 * @returns {UseNetworkReturn} An object containing the network status
 *
 * @example
 * const { online, downlink, downlinkMax, effectiveType, rtt, saveData, type } = useNetwork();
 */
export declare const useNetwork: () => UseNetworkReturn;
