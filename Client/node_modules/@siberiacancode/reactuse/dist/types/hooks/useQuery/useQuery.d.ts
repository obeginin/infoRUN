import { DependencyList } from 'react';
export interface UseQueryOptions<QueryData, Data> {
    enabled?: boolean;
    keys?: DependencyList;
    placeholderData?: (() => Data) | Data;
    refetchInterval?: number;
    retry?: boolean | number;
    retryDelay?: ((retry: number, error: Error) => number) | number;
    onError?: (error: Error) => void;
    onSuccess?: (data: Data) => void;
    select?: (data: QueryData) => Data;
}
interface UseQueryCallbackParams {
    keys: DependencyList;
    signal: AbortSignal;
}
export interface UseQueryReturn<Data> {
    abort: AbortController['abort'];
    data?: Data;
    error?: Error;
    isError: boolean;
    isFetching: boolean;
    isLoading: boolean;
    isRefetching: boolean;
    isSuccess: boolean;
    refetch: () => void;
}
/**
 * @name useQuery
 * @description - Hook that defines the logic when query data
 * @category Async
 *
 * @template Data The type of the data
 * @param {() => Promise<Data>} callback The callback function to be invoked
 * @param {DependencyList} [options.keys] The dependencies for the hook
 * @param {(data: Data) => void} [options.onSuccess] The callback function to be invoked on success
 * @param {(error: Error) => void} [options.onError] The callback function to be invoked on error
 * @param {UseQueryOptionsSelect<Data>} [options.select] The select function to be invoked
 * @param {Data | (() => Data)} [options.initialData] The initial data for the hook
 * @param {Data | (() => Data)} [options.placeholderData] The placeholder data for the hook
 * @param {number} [options.refetchInterval] The refetch interval
 * @param {boolean | number} [options.retry] The retry count of requests
 * @returns {UseQueryReturn<Data>} An object with the state of the query
 *
 * @example
 * const { data, isFetching, isLoading, isError, isSuccess, error, refetch, isRefetching, abort, aborted } = useQuery(() => fetch('url'));
 */
export declare const useQuery: <QueryData, Data = QueryData>(callback: (params: UseQueryCallbackParams) => Promise<QueryData>, options?: UseQueryOptions<QueryData, Data>) => UseQueryReturn<Data>;
export {};
