export declare const getCookies: () => {
    [k: string]: string;
};
export interface RemoveCookieParams {
    domain?: string;
    expires?: Date;
    maxAge?: number;
    path?: string;
    sameSite?: 'Lax' | 'None' | 'Strict';
    secure?: boolean;
}
export declare const removeCookie: (key: string, options?: RemoveCookieParams) => void;
export interface SetCookieParams {
    domain?: string;
    expires?: Date;
    httpOnly?: boolean;
    maxAge?: number;
    path?: string;
    sameSite?: 'Lax' | 'None' | 'Strict';
    secure?: boolean;
}
export declare const setCookie: (key: string, value: string, options?: SetCookieParams) => void;
export type UseCookieInitialValue<Value> = (() => Value) | Value;
export interface UseCookieOptions<Value> {
    domain?: string;
    expires?: Date;
    httpOnly?: boolean;
    initialValue?: UseCookieInitialValue<Value>;
    maxAge?: number;
    path?: string;
    sameSite?: 'Lax' | 'None' | 'Strict';
    secure?: boolean;
    deserializer?: (value: string) => Value;
    serializer?: (value: Value) => string;
}
export interface UseCookieReturn<Value> {
    value: Value;
    remove: (options?: RemoveCookieParams) => void;
    set: (value: Value, options?: SetCookieParams) => void;
}
export declare const COOKIE_EVENT = "reactuse-cookie";
export declare const dispatchCookieEvent: () => boolean;
export declare const setCookieItem: (key: string, value: string, options?: SetCookieParams) => void;
export declare const removeCookieItem: (key: string, options?: RemoveCookieParams) => void;
export declare const getCookie: (key: string) => string | undefined;
export interface UseCookie {
    <Value>(key: string, options: UseCookieOptions<Value> & {
        initialValue: UseCookieInitialValue<Value>;
    }): UseCookieReturn<Value>;
    <Value>(key: string, options?: UseCookieOptions<Value>): UseCookieReturn<Value | undefined>;
    <Value>(key: string, initialValue: UseCookieInitialValue<Value>): UseCookieReturn<Value>;
    <Value>(key: string): UseCookieReturn<Value | undefined>;
}
/**
 * @name useCookie
 * @description - Hook that manages cookie value
 * @category State
 *
 * @overload
 * @template Value The type of the cookie value
 * @param {string} key The key of the cookie
 * @param {UseCookieInitialValue<Value>} [initialValue] The initial value of the cookie
 * @returns {UseCookieReturn<Value>} The value and the set function
 *
 * @overload
 * @template Value The type of the cookie value
 * @param {string} key The key of the cookie
 * @param {UseCookieOptions<Value>} options The options object
 * @param {UseCookieInitialValue<Value>} [options.initialValue] The initial value of the cookie
 * @param {(value: string) => Value} [options.deserializer] The deserializer function to be invoked
 * @param {(value: Value) => string} [options.serializer] The serializer function to be invoked
 * @returns {UseCookieReturn<Value | undefined>} The value and the set function
 *
 * @example
 * const { value, set, remove } = useCookie('key', 'value');
 */
export declare const useCookie: UseCookie;
