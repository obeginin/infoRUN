import { ComponentProps } from 'react';
/** The use script status */
export type UseScriptStatus = 'error' | 'loading' | 'ready' | 'unknown';
export declare const SCRIPT_STATUS_ATTRIBUTE_NAME = "script-status";
/** The use script options extends from attributes script tag */
export interface UseScriptOptions extends ComponentProps<'script'> {
    /** Whether to remove the script on unmount */
    removeOnUnmount?: boolean;
}
/**
 * @name useScript
 * @description - Hook that manages a script with onLoad, onError, and removeOnUnmount functionalities
 * @category Elements
 *
 * @param {string} src The source of the script
 * @param {UseScriptOptions} [options] The options of the script extends from attributes script tag
 * @param {boolean} [options.removeOnUnmount=true] Whether to remove the script on unmount
 * @param {boolean} [options.async=true] Whether to load the script asynchronously
 * @returns {UseScriptStatus} The status of the script
 *
 * @example
 * const status = useScript('https://example.com/script.js');
 */
export declare const useScript: (src: string, options?: UseScriptOptions) => UseScriptStatus;
