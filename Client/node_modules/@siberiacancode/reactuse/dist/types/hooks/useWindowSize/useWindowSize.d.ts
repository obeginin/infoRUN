/** The use window size return type */
interface UseWindowSizeParams {
    /** Whether to include the scrollbar in the window size calculation */
    includeScrollbar?: boolean;
}
/** The use window size return type */
export interface UseWindowSizeReturn {
    /** The current window height */
    height: number;
    /** The current window width */
    width: number;
}
/**
 * @name useWindowSize
 * @description - Hook that manages a window size
 * @category Elements
 *
 * @param {number} [params.initialWidth=Number.POSITIVE_INFINITY] The initial window width
 * @param {number} [params.initialHeight=Number.POSITIVE_INFINITY] The initial window height
 * @returns {UseWindowSizeReturn} An object containing the current window width and height
 *
 * @example
 * const { width, height } = useWindowSize();
 */
export declare const useWindowSize: (params?: UseWindowSizeParams) => {
    width: number;
    height: number;
};
export {};
