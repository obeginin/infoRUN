export interface WizardItem<WizardStepId> {
    id: WizardStepId;
    nodes?: WizardStepId[];
}
/**
 * @name useWizard
 * @description - Hook that manages a wizard
 * @category State
 *
 * @param {WizardItem<WizardStepId>[]} map The map of the wizard
 * @param {WizardStepId} [initialStepId] The initial step id
 * @returns {UseWizardReturn<WizardStepId>} An object containing the current step id and functions to interact with the wizard
 *
 * @example
 * const { currentStepId, set, reset, back, next, history } = useWizard([
 *  { id: 'step1', nodes: ['step2', 'step3'] },
 *  { id: 'step2', nodes: ['step3'] },
 *  { id: 'step3', nodes: [] },
 * ])
 */
export declare const useWizard: <WizardStepId extends string>(map: WizardItem<WizardStepId>[], initialStepId?: WizardStepId) => {
    currentStepId: WizardStepId;
    set: (id: WizardStepId) => void;
    reset: () => void;
    back: () => void;
    history: WizardStepId[];
};
