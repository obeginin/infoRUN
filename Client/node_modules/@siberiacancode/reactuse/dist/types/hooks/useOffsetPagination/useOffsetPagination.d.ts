/** The use offset pagination return type */
export interface UseOffsetPaginationOptions {
    /** The initial page number */
    initialPage?: number;
    /** The number of items per page */
    pageSize?: number;
    /** The total number of items */
    total?: number;
    /** The callback function to be invoked when page changes */
    onPageChange?: ({ page, pageSize }: {
        page: number;
        pageSize: number;
    }) => void;
    /** The callback function to be invoked when page count changes */
    onPageCountChange?: ({ page, pageSize }: {
        page: number;
        pageSize: number;
    }) => void;
    /** The callback function to be invoked when page size changes */
    onPageSizeChange?: ({ page, pageSize }: {
        page: number;
        pageSize: number;
    }) => void;
}
/** The use offset pagination return type */
export interface UseOffsetPaginationReturn {
    /** The number of items per page */
    currentPageSize: number;
    /** Whether the current page is the first page */
    isFirstPage: boolean;
    /** Whether the current page is the last page */
    isLastPage: boolean;
    /** The current page number */
    page: number;
    /** The total number of pages */
    pageCount: number;
    /** The callback function to go to the next page */
    next: () => void;
    /** The callback function to go to the previous page */
    prev: () => void;
    /** The callback function to set the current page */
    set: (page: number) => void;
}
/**
 * @name useOffsetPagination
 * @description - Hook that defines the logic when pagination
 * @category State
 *
 * @param {UseOffsetPaginationOptions} options - The options for the hook
 * @param {number} [options.total] - The total number of items
 * @param {number} [options.pageSize] - The number of items per page
 * @param {number} [options.initialPage] - The current page
 * @param {({ page, pageSize }: { page: number; pageSize: number }) => void} [options.onPageChange] - The callback function to be invoked when page changes
 * @param {({ page, pageSize }: { page: number; pageSize: number }) => void} [options.onPageCountChange] - The callback function to be invoked when page count changes
 * @param {({ page, pageSize }: { page: number; pageSize: number }) => void} [options.onPageSizeChange] - The callback function to be invoked when page size changes
 * @returns {UseOffsetPaginationReturn} - The state of the hook
 *
 * @example
 * const { currentPage, currentPageSize, pageCount, isFirstPage, isLastPage, prev, next } = useOffsetPagination({
 *  total: 100,
 *  pageSize: 10,
 *  page: 1,
 *  onPageChange: (page) => {},
 *  onPageCountChange: (pageCount) => {},
 *  onPageSizeChange: (pageSize) => {}
 * });
 */
export declare const useOffsetPagination: ({ total, pageSize, initialPage, onPageChange, onPageCountChange, onPageSizeChange }?: UseOffsetPaginationOptions) => UseOffsetPaginationReturn;
