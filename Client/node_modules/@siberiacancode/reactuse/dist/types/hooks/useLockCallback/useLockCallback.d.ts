/**
 * @name useLockCallback
 * @description - Hook that prevents a callback from being executed multiple times simultaneously
 * @category Async
 *
 * @param {Function} callback The callback to be locked
 * @returns {Function} The locked callback
 *
 * @example
 * const lockedCallback = useLockCallback(() => promise());
 */
export declare const useLockCallback: <Callback extends (...args: any[]) => any>(callback: Callback) => (...args: Parameters<Callback>) => Promise<any>;
