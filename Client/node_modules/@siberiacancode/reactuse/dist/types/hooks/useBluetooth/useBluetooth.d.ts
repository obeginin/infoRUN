/** The use bluetooth return type */
export interface UseBluetoothReturn {
    /** Indicates if bluetooth device is currently connected */
    connected: boolean;
    /** Describe connected bluetooth device */
    device?: BluetoothDevice;
    /** The GATT server for connected bluetooth device */
    server?: BluetoothRemoteGATTServer;
    /** Whether the bluetooth is supported*/
    supported: boolean;
    /** Function to request bluetooth device from the user */
    requestDevice: () => Promise<void>;
}
/** The use bluetooth options type */
export interface UseBluetoothOptions {
    /** The options to request all bluetooth devices */
    acceptAllDevices?: boolean;
    /** Array of filters to apply when scanning bluetooth devices */
    filters?: BluetoothLEScanFilter[];
    /** Array of optional services that the application can use */
    optionalServices?: BluetoothServiceUUID[];
}
/**
 * @name useBluetooth
 * @description - Hook for getting information about bluetooth
 * @category Browser
 *
 * @browserapi navigator.bluetooth https://developer.mozilla.org/en-US/docs/Web/API/Navigator/bluetooth
 *
 * @param {boolean} [options.acceptAllDevices=false] The options to request all Bluetooth devices
 * @param {Array<BluetoothLEScanFilter>} [options.filters] Array of filters to apply when scanning Bluetooth devices
 * @param {Array<BluetoothServiceUUID>} [options.optionalServices] Array of optional services that the application can use
 * @returns {UseBluetoothReturn} Object containing battery information & Battery API support
 *
 * @example
 * const { supported, connected, device, requestDevice, server } = useBluetooth(options);
 */
export declare const useBluetooth: (options?: UseBluetoothOptions) => UseBluetoothReturn;
