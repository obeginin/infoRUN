/** The use state history hook return type */
interface UseStateHistoryReturn<Value> {
    /** True if a redo operation can be performed */
    canRedo: boolean;
    /** True if an undo operation can be performed */
    canUndo: boolean;
    /** All history values */
    history: Value[];
    /** Current index in history */
    index: number;
    /** Current value */
    value: Value;
    /** Go back specified number of steps in history (default: 1) */
    back: (steps?: number) => void;
    /** Go forward specified number of steps in history (default: 1) */
    forward: (steps?: number) => void;
    /** Redo the last change */
    redo: () => void;
    /** Reset history to initial state */
    reset: () => void;
    /** Set a new value */
    set: (value: Value) => void;
    /** Undo the last change */
    undo: () => void;
}
export type StateHistoryAction<Value> = {
    type: 'BACK';
    payload: {
        steps: number;
    };
} | {
    type: 'FORWARD';
    payload: {
        steps: number;
    };
} | {
    type: 'REDO';
} | {
    type: 'RESET';
    payload: {
        initialValue: Value;
        capacity: number;
    };
} | {
    type: 'SET';
    payload: {
        value: Value;
        capacity: number;
    };
} | {
    type: 'UNDO';
};
export interface StateHistory<Value> {
    currentIndex: number;
    history: Value[];
    redoStack: Value[][];
    undoStack: Value[][];
}
export declare const stateHistoryReducer: <Value>(state: StateHistory<Value>, action: StateHistoryAction<Value>) => StateHistory<Value>;
/**
 * @name useStateHistory
 * @description - Hook that manages state with history functionality
 * @category State
 *
 * @param {Value} initialValue - The initial value to start the history with
 * @param {number} [capacity=10] - Maximum number of history entries and undo actions to keep
 * @returns {UseStateHistoryReturn<Value>} Object containing current value, history array and control methods
 *
 * @example
 * const { value, history, index, set, back, forward, reset, undo, redo, canUndo, canRedo } = useStateHistory(0);
 */
export declare const useStateHistory: <Value>(initialValue: Value, capacity?: number) => UseStateHistoryReturn<Value>;
export {};
