import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
/** The use scroll to options type */
export interface UseScrollToOptions {
    /** The scrolling behavior */
    behavior?: ScrollBehavior;
    /** Whether to enable the scroll to */
    enabled?: boolean;
    /** The horizontal position to scroll to */
    x: number;
    /** The vertical position to scroll to */
    y: number;
}
/** The use scroll to return type */
export interface UseScrollToReturn {
    /** The state of scrolling */
    trigger: (params?: {
        x: number;
        y: number;
        behavior?: ScrollBehavior;
    }) => void;
}
export interface UseScrollTo {
    <Target extends Element>(options?: UseScrollToOptions, target?: never): UseScrollToReturn & {
        ref: StateRef<Target>;
    };
    (target: HookTarget, options?: UseScrollToOptions): UseScrollToReturn;
}
/**
 * @name useScrollTo
 * @description - Hook for scrolling to a specific element
 * @category Sensors
 *
 * @overload
 * @param {HookTarget} target The target element for scrolling to
 * @param {UseScrollToOptions} [options] The scroll options
 * @returns {UseScrollToReturn} The scroll trigger function
 *
 * @example
 * const trigger = useScrollTo(ref, options);
 *
 * @overload
 * @template Target The target element
 * @param {UseScrollToOptions} [options] The scroll options
 * @returns {UseScrollToReturn & { ref: StateRef<Target> }} The scroll trigger function and ref
 *
 * @example
 * const { ref, trigger } = useScrollTo(options);
 */
export declare const useScrollTo: UseScrollTo;
