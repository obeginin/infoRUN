import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
/** The css variable return type */
export interface UseCssVarReturn {
    /** The value of the CSS variable */
    value: string;
    /** Remove the value of the CSS variable */
    remove: () => void;
    /** Set the value of the CSS variable */
    set: (value: string) => void;
}
export interface UseCssVar {
    <Target extends HTMLElement>(key: string, initialValue?: string): UseCssVarReturn & {
        ref: StateRef<Target>;
    };
    (target: HookTarget, key: string, initialValue?: string): UseCssVarReturn;
}
/**
 * @name useCssVar
 * @description - Hook that returns the value of a css variable
 * @category Browser
 *
 * @overload
 * @param {string} key The CSS variable key
 * @param {string} initialValue The initial value of the CSS variable
 * @returns {UseCssVarReturn & { ref: StateRef<Element> }} The object containing the value of the CSS variable and ref
 *
 * @example
 * const { ref, value, set, remove } = useCssVar('--color', 'red');
 *
 * @overload
 * @param {HookTarget} target The target element
 * @param {string} key The CSS variable key
 * @param {string} initialValue The initial value of the CSS variable
 * @returns {UseCssVarReturn} The object containing the value of the CSS variable
 *
 * @example
 * const { value, set, remove } = useCssVar(ref, '--color', 'red');
 */
export declare const useCssVar: UseCssVar;
