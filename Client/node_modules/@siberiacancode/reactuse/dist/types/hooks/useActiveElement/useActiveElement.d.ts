import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
export interface UseActiveElement {
    (): HTMLElement | null;
    <Target extends Element, ActiveElement extends HTMLElement = HTMLElement>(target?: never): {
        ref: StateRef<Target>;
        value: ActiveElement | null;
    };
    <ActiveElement extends HTMLElement = HTMLElement>(target: HookTarget): ActiveElement | null;
}
/**
 * @name useActiveElement
 * @description - Hook that returns the active element
 * @category Elements
 *
 * @overload
 * @param {HookTarget} [target=window] The target element to observe active element changes
 * @returns {ActiveElement | null} The active element
 *
 * @example
 * const activeElement = useActiveElement(ref);
 *
 * @overload
 * @template ActiveElement The active element type
 * @returns {{ ref: StateRef<Element>; activeElement: ActiveElement | null }} An object containing the ref and active element
 *
 * @example
 * const { ref, value } = useActiveElement();
 *
 * @see {@link https://siberiacancode.github.io/reactuse/functions/hooks/useActiveElement.html}
 */
export declare const useActiveElement: UseActiveElement;
