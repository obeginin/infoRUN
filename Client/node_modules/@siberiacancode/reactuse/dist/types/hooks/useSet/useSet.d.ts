/** The use set return type */
interface UseSetReturn<Value> {
    /** The size of the set */
    size: number;
    /** The current set */
    value: Set<Value>;
    /** Function to add a value to the set */
    add: (value: Value) => void;
    /** Function to clear the set */
    clear: () => void;
    /** Function to get the symmetric difference of two sets */
    difference: (other: Set<Value>) => void;
    /** Function to check if a value exists in the set */
    has: (value: Value) => boolean;
    /** Function to get the difference of two sets */
    intersection: (other: Set<Value>) => void;
    /** Function to remove a value from the set */
    remove: (value: Value) => void;
    /** Function to toggle a value in the set */
    reset: () => void;
    /** Function to get the symmetric difference of two sets */
    symmetricDifference: (other: Set<Value>) => void;
    /** Function to toggle a value in the set */
    toggle: (value: Value) => void;
    /** Function to get the union of two sets */
    union: (other: Set<Value>) => void;
}
/**
 * @name useSet
 * @description - Hook that manages a set structure
 * @category State
 *
 * @template Value The type of the value
 * @param {Value[]} [values] The initial array of the set
 * @returns {UseSetReturn<Value>} An object containing the current set and functions to interact with the set
 *
 * @example
 * const { value, add, remove, clear, reset, toggle, union, intersection, difference, symmetricDifference, size, has } = useSet([1, 2, 3]);
 */
export declare const useSet: <Value>(values?: Value[]) => UseSetReturn<Value>;
export {};
