import { RemoveCookieParams, SetCookieParams } from '../useCookie/useCookie';
/** The cookies params type */
export type CookieParams = Record<string, any>;
export interface UseCookiesOptions<Value> {
    deserializer?: (value: string) => Value[keyof Value];
    serializer?: (value: Value[keyof Value]) => string;
}
export declare const clearCookies: () => void;
/**
 * @name useCookies
 * @description - Hook that manages cookie values
 * @category State
 *
 * @overload
 * @template {object} Value The type of the cookie values
 * @returns {UseCookieReturn<Value>} The value and the set function
 *
 * @example
 * const { value, set, remove, getAll, clear } = useCookies();
 */
export declare const useCookies: <Value extends CookieParams>(options?: UseCookiesOptions<Value>) => {
    value: Value;
    set: <Key extends keyof Value>(key: Key, value: Value[Key], options?: SetCookieParams) => void;
    remove: <Key extends keyof Value>(key: Key, options?: RemoveCookieParams) => void;
    getAll: () => any;
    clear: () => void;
};
