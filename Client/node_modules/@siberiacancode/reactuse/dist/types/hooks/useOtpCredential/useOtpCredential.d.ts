declare global {
    interface OTPOptions {
        readonly transport: string[];
    }
    interface CredentialRequestOptions {
        readonly otp: OTPOptions;
    }
    interface Credential {
        readonly code: string;
    }
}
export type UseOtpCredentialCallback = (otp: Credential | null) => void;
export interface UseOtpCredentialParams {
    onError: (error: any) => void;
    onSuccess: (credential: Credential | null) => void;
}
export interface UseOtpCredentialReturn {
    abort: AbortController['abort'];
    aborted: boolean;
    supported: boolean;
    get: () => Promise<Credential | null>;
}
export interface UseOtpCredential {
    (callback?: UseOtpCredentialCallback): UseOtpCredentialReturn;
    (params?: UseOtpCredentialParams): UseOtpCredentialReturn;
}
/**
 * @name useOtpCredential
 * @description - Hook that creates an otp credential
 * @category Browser
 *
 * @browserapi navigator.credentials https://developer.mozilla.org/en-US/docs/Web/API/Navigator/credentials
 *
 * @overload
 * @param {UseOtpCredentialCallback} callback The callback function to be invoked
 * @returns {UseOtpCredentialReturn}
 *
 * @example
 * useOtpCredential((credential) => console.log(credential));
 *
 * @overload
 * @param {UseOtpCredentialCallback} params.onSuccess The callback function to be invoked on success
 * @param {UseOtpCredentialCallback} params.onError The callback function to be invoked on error
 * @returns {UseOtpCredentialReturn}
 *
 * @example
 * useOtpCredential({ onSuccess: (credential) => console.log(credential), onError: (error) => console.log(error) });
 */
export declare const useOtpCredential: UseOtpCredential;
