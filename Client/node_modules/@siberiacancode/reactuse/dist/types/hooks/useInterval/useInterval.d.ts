/** The use interval options */
export interface UseIntervalOptions {
    /** Start the interval immediately */
    immediately?: boolean;
}
/** The use interval return type */
export interface UseIntervalReturn {
    /** Is the interval active */
    active: boolean;
    /** Pause the interval */
    pause: () => void;
    /** Resume the interval */
    resume: () => void;
    /** Toggle the interval */
    toggle: () => void;
}
interface UseInterval {
    (callback: () => void, interval?: number, options?: UseIntervalOptions): UseIntervalReturn;
    (callback: () => void, options?: UseIntervalOptions & {
        interval?: number;
    }): UseIntervalReturn;
}
/**
 * @name useInterval
 * @description - Hook that makes and interval and returns controlling functions
 * @category Time
 *
 * @overload
 * @param {() => void} callback Any callback function
 * @param {number} [interval=1000] Time in milliseconds
 * @param {boolean} [options.immediately=true] Start the interval immediately
 * @returns {UseIntervalReturn}
 *
 * @example
 * const { active, pause, resume, toggle } = useInterval(() => console.log('inside interval'), 2500);
 *
 * @overload
 * @param {() => void} callback Any callback function
 * @param {number} [options.interval=1000] Time in milliseconds
 * @param {boolean} [options.immediately=true] Start the interval immediately
 *
 * @example
 * const { active, pause, resume, toggle } = useInterval(() => console.log('inside interval'), { interval: 2500 });
 */
export declare const useInterval: UseInterval;
export {};
