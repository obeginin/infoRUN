import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
/** The element size value type */
export interface UseElementSizeValue {
    /** The element's height */
    height: number;
    /** The element's width */
    width: number;
}
/** The use element size return type */
export interface UseElementSizeReturn {
    value: UseElementSizeValue;
}
export interface UseElementSize {
    (target: HookTarget): UseElementSizeReturn;
    <Target extends Element>(target?: never): {
        ref: StateRef<Target>;
    } & UseElementSizeReturn;
}
/**
 * @name useElementSize
 * @description - Hook that observes and returns the width and height of element
 * @category Elements
 *
 * @overload
 * @param {HookTarget} target The target element to observe
 * @returns {UseElementSizeReturn} An object containing the current width and height of the element
 *
 * @example
 * const { value } = useElementSize(ref);
 *
 * @overload
 * @returns { { ref: StateRef<Target> } & UseElementSizeReturn } An object containing the current width and height of the element
 *
 * @example
 * const { ref, value } = useElementSize();
 */
export declare const useElementSize: UseElementSize;
