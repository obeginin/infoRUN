/** The use field params type */
export interface UseFieldParams<Value> {
    /** The auto focus */
    autoFocus?: boolean;
    /** The initial touched */
    initialTouched?: boolean;
    /** The initial value */
    initialValue?: Value;
    /** The validate on blur */
    validateOnBlur?: boolean;
    /** The validate on mount */
    validateOnChange?: boolean;
    /** The validate on mount */
    validateOnMount?: boolean;
}
/** The use field register params type */
export interface UseFieldRegisterParams {
    /** The required validation */
    required?: string;
    /** The custom validation */
    validate?: (value: string) => Promise<string | true>;
    /** The min value validation */
    max?: {
        value: number;
        message: string;
    };
    /** The max length validation */
    maxLength?: {
        value: number;
        message: string;
    };
    /** The max value validation */
    min?: {
        value: number;
        message: string;
    };
    /** The min length validation */
    minLength?: {
        value: number;
        message: string;
    };
    /** The pattern validation */
    pattern?: {
        value: RegExp;
        message: string;
    };
}
/** The use field return type */
export interface UseFieldReturn<Value> {
    /** The dirty state */
    dirty: boolean;
    /** The error state */
    error?: string;
    /** The set error function */
    touched: boolean;
    /** The set error function */
    clearError: () => void;
    /** The focus function */
    focus: () => void;
    /** The get value function */
    getValue: () => Value;
    /** The register function */
    register: (params?: UseFieldRegisterParams) => {
        onBlur: () => void;
        onChange: () => void;
        ref: (node: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | null | undefined) => void;
    };
    /** The reset function */
    reset: () => void;
    /** The set error function */
    setError: (error: string) => void;
    /** The  set value function */
    setValue: (value: Value) => void;
    /** The watch function */
    watch: () => Value;
}
/**
 * @name useField
 * @description - Hook to manage a form field
 * @category State
 *
 * @template Value The input value
 * @template Type The input value type
 * @param {Value} [params.initialValue] Initial value
 * @param {boolean} [params.initialTouched=false] Initial touched state
 * @param {boolean} [params.autoFocus=false] Auto focus
 * @param {boolean} [params.validateOnChange=false] Validate on change
 * @param {boolean} [params.validateOnBlur=false] Validate on blur
 * @param {boolean} [params.validateOnMount=false] Validate on mount
 * @returns {UseFieldReturn<Value>} An object containing input information
 *
 * @example
 * const { register, getValue, setValue, reset, dirty, error, setError, clearError, touched, focus, watch } = useField();
 */
export declare const useField: <Value extends boolean | number | string = string, Type = Value extends string ? string : Value extends boolean ? boolean : number>(params?: UseFieldParams<Value>) => UseFieldReturn<Type>;
