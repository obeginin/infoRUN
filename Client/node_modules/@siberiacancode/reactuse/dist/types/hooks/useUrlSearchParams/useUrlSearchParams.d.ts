import { createQueryString, dispatchUrlSearchParamsEvent, getUrlSearchParams } from '../useUrlSearchParam/useUrlSearchParam';
/** The url params type */
export type UrlParams = Record<string, any>;
/** The url search params mod */
export type UrlSearchParamsMode = 'hash-params' | 'hash' | 'history';
/** The use url search params set options type */
export interface UseUrlSearchParamsSetOptions {
    /** The mode to use for writing to the URL */
    write?: 'push' | 'replace';
}
export type UseUrlSearchParamsInitialValue<Value> = (() => Value) | Value;
/** The use url search params options type */
export interface UseUrlSearchParamsOptions<Value> {
    initialValue?: UseUrlSearchParamsInitialValue<string | URLSearchParams | Value>;
    /** The mode to use for writing to the URL */
    mode?: UrlSearchParamsMode;
    /** The mode to use for writing to the URL  */
    write?: 'push' | 'replace';
    deserializer?: (value: string) => Value[keyof Value];
    serializer?: (value: Value[keyof Value]) => string;
}
/** The use url search params return type */
export interface UseUrlSearchParamsReturn<Value> {
    /** The value of the url search params */
    value: Value;
    /** The set function */
    set: (value: Partial<Value>, options?: UseUrlSearchParamsSetOptions) => void;
}
export interface UseUrlSearchParams {
    <Value>(key: string, options: UseUrlSearchParamsOptions<Value> & {
        initialValue: UseUrlSearchParamsInitialValue<Value>;
    }): UseUrlSearchParamsReturn<Value>;
    <Value>(options?: UseUrlSearchParamsOptions<Value>): UseUrlSearchParamsReturn<Value | undefined>;
    <Value>(initialValue: UseUrlSearchParamsInitialValue<Value>): UseUrlSearchParamsReturn<Value>;
    <Value>(key: string): UseUrlSearchParamsReturn<Value | undefined>;
}
/**
 * @name useUrlSearchParams
 * @description - Hook that provides reactive URLSearchParams
 * @category State
 *
 * @overload
 * @template Value The type of the url param values
 * @param {UseUrlSearchParamsOptions<Value> & { initialValue: UseUrlSearchParamsInitialValue<Value> }} options The options object with required initialValue
 * @param {UseUrlSearchParamsInitialValue<Value>} [options.initialValue] The initial value for the url params
 * @param {UrlSearchParamsMode} [options.mode='history'] The mode to use for the URL ('history' | 'hash-params' | 'hash')
 * @param {'push' | 'replace'} [options.write='replace'] The mode to use for writing to the URL
 * @param {(value: Value[keyof Value]) => string} [options.serializer] Custom serializer function to convert value to string
 * @param {(value: string) => Value[keyof Value]} [options.deserializer] Custom deserializer function to convert string to value
 * @returns {UseUrlSearchParamsReturn<Value>} The object with value and function for change value
 *
 * @example
 * const { value, set } = useUrlSearchParams({ initialValue: { page: 1 } });
 *
 * @overload
 * @template Value The type of the url param values
 * @param {UseUrlSearchParamsInitialValue<Value>} [initialValue] The initial value for the url params
 * @returns {UseUrlSearchParamsReturn<Value>} The object with value and function for change value
 *
 * @example
 * const { value, set } = useUrlSearchParams({ page: 1 });
 */
export declare const useUrlSearchParams: UseUrlSearchParams;
export { createQueryString, dispatchUrlSearchParamsEvent, getUrlSearchParams };
