import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
export interface Point {
    x: number;
    y: number;
}
export declare class Pointer implements Point {
    x: number;
    y: number;
    constructor(x: number, y: number);
    update(point: Point): void;
    getDifferenceTo(point: Point): Pointer;
    getDistanceTo(point: Point): number;
    getAngleTo(point: Point): number;
    equalsTo(point: Point): boolean;
    moveByAngle(angle: number, distance: number): this;
}
export declare class Paint {
    pointer: Pointer;
    brush: Pointer;
    radius: number;
    smooth: boolean;
    points: Point[];
    lines: {
        points: Point[];
        color: string;
        radius: number;
        opacity: number;
    }[];
    constructor({ x, y, radius, smooth }: {
        x: number;
        y: number;
        radius: number;
        smooth: boolean;
    });
    getBrushCoordinates(): {
        x: number;
        y: number;
    };
    getPointerCoordinates(): {
        x: number;
        y: number;
    };
    update(point: Point): boolean;
}
export interface UsePaintOptions {
    /** Brush color */
    color?: string;
    /** Initial lines */
    initialLines?: Paint['lines'];
    /** Brush opacity */
    opacity?: number;
    /** Brush radius */
    radius?: number;
    /** Smooth brush movement */
    smooth?: boolean;
    /** Callback when the mouse is down */
    onMouseDown?: (event: MouseEvent, paint: Paint) => void;
    /** Callback when the mouse is moved */
    onMouseMove?: (event: MouseEvent, paint: Paint) => void;
    /** Callback when the mouse is up */
    onMouseUp?: (event: MouseEvent, paint: Paint) => void;
}
export interface UsePaintReturn {
    drawing: boolean;
    lines: Paint['lines'];
    clear: () => void;
    draw: (points: Point[], color: string, opacity: number, radius: number) => void;
    undo: () => void;
}
export interface UsePaint {
    (target: HookTarget, options?: UsePaintOptions): UsePaintReturn;
    <Target extends HTMLCanvasElement>(options?: UsePaintOptions, target?: never): UsePaintReturn & {
        ref: StateRef<Target>;
    };
}
/**
 * @name usePaint
 * @description - Hook that allows you to draw in a specific area
 * @category Elements
 *
 * @overload
 * @param {HookTarget} target The target element to be painted
 * @param {UsePaintOptions} [options] The options to be used
 * @returns {UsePaintReturn} An object containing the current pencil options and functions to interact with the paint
 *
 * @example
 * const drawing = usePaint(canvasRef);
 *
 * @overload
 * @param {UsePaintOptions} [options] The options to be used
 * @returns {UsePaintReturn & { ref: StateRef<HTMLCanvasElement> }} An object containing the current pencil options and functions to interact with the paint
 *
 * @example
 * const { ref, drawing } = usePaint();
 */
export declare const usePaint: UsePaint;
