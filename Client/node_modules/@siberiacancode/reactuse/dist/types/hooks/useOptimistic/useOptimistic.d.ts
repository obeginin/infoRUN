export type UseOptimisticReturn<State> = [
    State,
    (optimisticValue: State, promise: Promise<any>) => void
];
/**
 * @name useOptimistic
 * @description - Hook that allows get optimistic value before its update
 * @category Async
 *
 * @template State The type of the state
 * @param {State} state The value to be returned initially and whenever no action is pending
 * @param {(currentState: State, optimisticValue: State) => State} update A pure function that takes the current state and the optimistic value passed to updateOptimistic and returns the resulting optimistic state
 * @returns {UseOptimisticReturn<State>} The resulting optimistic state, and the function to update it
 *
 * @example
 * const [optimisticValue, updateOptimistic] = useOptimistic<number>(count, (currentState, optimisticValue) => currentState + optimisticValue);
 */
export declare const useOptimistic: <State, OptimisticState = State>(externalState: State, update: (currentState: State, optimisticState: OptimisticState) => State) => readonly [State, (optimisticValue: OptimisticState, promise: Promise<any>) => Promise<any>];
