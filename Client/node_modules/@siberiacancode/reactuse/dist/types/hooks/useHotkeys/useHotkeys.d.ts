import { StateRef } from '../useRefState/useRefState';
/** The use hotkeys params type */
export interface UseHotkeysOptions {
    /** Alias map for hotkeys */
    alias?: Record<string, string>;
    /** Enable or disable the event listeners */
    enabled?: boolean;
}
export declare const isHotkeyMatch: (hotkey: string, keys: UseHotkeysKey[]) => boolean;
/** The hotkeys string type */
export type UseHotkeysHotkeys = string;
/** The hotkey key information */
export interface UseHotkeysKey {
    /** The alias for the key */
    alias: string;
    /** The key code */
    code: string;
    /** The key value */
    key: string;
}
/** The use hotkeys target type */
export type UseHotkeysTarget = Element | React.RefObject<Element | null | undefined>;
export interface UseHotkeys {
    (target: UseHotkeysTarget, hotkeys: UseHotkeysHotkeys, callback: (event: KeyboardEvent) => void, options?: UseHotkeysOptions): void;
    <Target extends Element>(hotkeys: UseHotkeysHotkeys, callback: (event: KeyboardEvent) => void, options?: UseHotkeysOptions, target?: never): StateRef<Target>;
}
/**
 * @name useHotkeys
 * @description - Hook that listens for hotkeys
 * @category Sensors
 *
 * @overload
 * @param {HookTarget} [target=window] The target element to attach the event listener to
 * @param {string} hotkeys The hotkey to listen for
 * @param {(event: KeyboardEvent) => void} callback The callback function to execute when hotkey is pressed
 * @param {Record<string, string>} [options.alias] Alias map for hotkeys
 * @param {boolean} [options.enabled=true] Enable or disable the event listeners
 * @returns {void}
 *
 * @example
 * useHotkeys(ref, 'ctrl+a', () => console.log('hotkey pressed'));
 * @example
 * useHotkeys(ref, 'ctrl+a, ctrl+b', () => console.log('hotkey pressed'));
 *
 * @overload
 * @template Target The target element
 * @param {string} hotkeys The hotkey to listen for
 * @param {(event: KeyboardEvent) => void} callback The callback function to execute when hotkey is pressed
 * @param {Record<string, string>} [options.alias] Alias map for hotkeys
 * @param {boolean} [options.enabled=true] Enable or disable the event listeners
 * @returns {StateRef<Target>} A reference to the target element
 *
 * @example
 * const ref = useHotkeys('ctrl+a', () => console.log('hotkey pressed'));
 * @example
 * const ref = useHotkeys('ctrl+a, ctrl+b', () => console.log('hotkey pressed'));
 */
export declare const useHotkeys: UseHotkeys;
