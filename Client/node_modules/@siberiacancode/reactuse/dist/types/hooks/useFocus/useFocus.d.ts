import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
/** The use focus options type */
export interface UseFocusOptions {
    /** The initial focus state of the target */
    initialValue?: boolean;
    /** The on blur callback */
    onBlur?: (event: FocusEvent) => void;
    /** The on focus callback */
    onFocus?: (event: FocusEvent) => void;
}
/** The use focus return type */
export interface UseFocusReturn {
    /** The boolean state value of the target */
    focused: boolean;
    /** Blur the target */
    blur: () => void;
    /** Focus the target */
    focus: () => void;
}
export interface UseFocus {
    (target: HookTarget, options?: UseFocusOptions): UseFocusReturn;
    <Target extends Element>(options?: UseFocusOptions, target?: never): UseFocusReturn & {
        ref: StateRef<Target>;
    };
}
/**
 * @name useFocus
 * @description - Hook that allows you to focus on a specific element
 * @category Elements
 *
 * @overload
 * @param {HookTarget} target The target element to focus
 * @param {boolean} [options.initialValue=false] The initial focus state of the target
 * @param {(event: FocusEvent) => void} [options.onFocus] The callback function to be invoked on focus
 * @param {(event: FocusEvent) => void} [options.onBlur] The callback function to be invoked on blur
 * @returns {UseFocusReturn} An object with focus state and methods
 *
 * @example
 * const { focus, blur, focused } = useFocus(ref);
 *
 * @overload
 * @template Target The target element
 * @param {boolean} [options.initialValue=false] The initial focus state of the target
 * @param {(event: FocusEvent) => void} [options.onFocus] The callback function to be invoked on focus
 * @param {(event: FocusEvent) => void} [options.onBlur] The callback function to be invoked on blur
 * @returns {UseFocusReturn & { ref: StateRef<Target> }} An object with focus state, methods and ref
 *
 * @example
 * const { ref, focus, blur, focused } = useFocus();
 */
export declare const useFocus: UseFocus;
