import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
export type DropZoneDataTypes = ((types: string[]) => boolean) | string[];
export interface UseDropZoneOptions {
    /** The data types for drop zone */
    dataTypes?: DropZoneDataTypes;
    /** The multiple mode for drop zone */
    multiple?: boolean;
    /** The on drop callback */
    onDrop?: (files: File[] | null, event: DragEvent) => void;
    /** The on enter callback */
    onEnter?: (event: DragEvent) => void;
    /** The on leave callback */
    onLeave?: (event: DragEvent) => void;
    /** The on over callback */
    onOver?: (event: DragEvent) => void;
}
export interface UseDropZoneReturn {
    /** The files that was dropped in drop zone */
    files: File[] | null;
    /** The over drop zone status */
    overed: boolean;
}
export interface UseDropZone {
    (target: HookTarget, callback?: (files: File[] | null, event: DragEvent) => void): UseDropZoneReturn;
    <Target extends Element>(callback?: (files: File[] | null, event: DragEvent) => void, target?: never): UseDropZoneReturn & {
        ref: StateRef<Target>;
    };
    (target: HookTarget, options?: UseDropZoneOptions): UseDropZoneReturn;
    <Target extends Element>(options?: UseDropZoneOptions, target?: never): UseDropZoneReturn & {
        ref: StateRef<Target>;
    };
}
/**
 * @name useDropZone
 * @description - Hook that provides drop zone functionality
 * @category Elements
 *
 * @overload
 * @template Target The target element
 * @param {Target} target The target element drop zone's
 * @param {DataTypes} [options.dataTypes] The data types
 * @param {boolean} [options.multiple] The multiple mode
 * @param {(files: File[] | null, event: DragEvent) => void} [options.onDrop] The on drop callback function
 * @param {(event: DragEvent) => void} [options.onEnter] The on enter callback function
 * @param {(event: DragEvent) => void} [options.onLeave] The on leave callback function
 * @param {(event: DragEvent) => void} [options.onOver] The on over callback function
 * @returns {UseDropZoneReturn} The object with drop zone states
 *
 * @example
 * const { overed, files } = useDropZone(ref, options);
 *
 * @overload
 * @param {Target} target The target element drop zone's
 * @param {(files: File[] | null, event: DragEvent) => void} [callback] The callback function to be invoked on drop
 * @returns {UseDropZoneReturn} The object with drop zone states
 *
 * @example
 * const { overed, files } = useDropZone(ref, () => console.log('callback'));
 *
 * @overload
 * @param {DataTypes} [options.dataTypes] The data types
 * @param {boolean} [options.multiple] The multiple mode
 * @param {(files: File[] | null, event: DragEvent) => void} [options.onDrop] The on drop callback function
 * @param {(event: DragEvent) => void} [options.onEnter] The on enter callback function
 * @param {(event: DragEvent) => void} [options.onLeave] The on leave callback function
 * @param {(event: DragEvent) => void} [options.onOver] The on over callback function
 * @returns {UseDropZoneReturn & { ref: StateRef<Target> }} The object with drop zone states and ref
 *
 * @example
 * const { ref, overed, files } = useDropZone(options);
 *
 * @overload
 * @param {(files: File[] | null, event: DragEvent) => void} [callback] The callback function to be invoked on drop
 * @returns {UseDropZoneReturn & { ref: StateRef<Target> }} The object with drop zone states and ref
 *
 * @example
 * const { ref, overed, files } = useDropZone(() => console.log('callback'));
 */
export declare const useDropZone: UseDropZone;
