import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
/** The use display media return type */
export interface UseDisplayMediaReturn {
    /** Whether screen sharing is currently active */
    sharing: boolean;
    /** The media stream object */
    stream: MediaStream | null;
    /** Whether the display media API is supported */
    supported: boolean;
    /** Start screen sharing */
    start: () => Promise<void>;
    /** Stop screen sharing */
    stop: () => void;
}
/** The use display media options type */
export interface UseDisplayMediaOptions {
    /** Whether to enable audio sharing */
    audio?: boolean | MediaTrackConstraints;
    /** Whether to start immediately */
    immediately?: boolean;
    /** Whether to enable video sharing */
    video?: boolean | MediaTrackConstraints;
}
export interface UseDisplayMedia {
    (target: HookTarget, options?: UseDisplayMediaOptions): UseDisplayMediaReturn;
    <Target extends HTMLVideoElement>(options?: UseDisplayMediaOptions, target?: never): {
        ref: StateRef<Target>;
    } & UseDisplayMediaReturn;
}
/**
 * @name useDisplayMedia
 * @description - Hook that provides screen sharing functionality
 * @category Browser
 *
 * @browserapi mediaDevices.getDisplayMedia https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia
 *
 * @overload
 * @param {HookTarget} target The target video element to display the media stream
 * @param {boolean | MediaTrackConstraints} [options.audio] Whether to enable audio sharing
 * @param {boolean} [options.immediately=false] Whether to start immediately
 * @param {boolean | MediaTrackConstraints} [options.video] Whether to enable video sharing
 * @returns {UseDisplayMediaReturn} Object containing stream, sharing status and control methods
 *
 * @example
 * const { stream, sharing, start, stop } = useDisplayMedia(ref);
 *
 * @overload
 * @template Target The target video element
 * @param {boolean | MediaTrackConstraints} [options.audio] Whether to enable audio sharing
 * @param {boolean} [options.immediately=false] Whether to start immediately
 * @param {boolean | MediaTrackConstraints} [options.video] Whether to enable video sharing
 * @returns {UseDisplayMediaReturn & { ref: StateRef<HTMLVideoElement> }} Object containing stream, sharing status, control methods and ref
 *
 * @example
 * const { ref, stream, sharing, start, stop } = useDisplayMedia<HTMLVideoElement>();
 */
export declare const useDisplayMedia: UseDisplayMedia;
