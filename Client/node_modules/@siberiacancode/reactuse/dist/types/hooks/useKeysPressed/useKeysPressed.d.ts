import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
/** The use keys pressed options type */
export interface UseKeysPressedOptions {
    /** Enable or disable the event listeners */
    enabled?: boolean;
}
export interface UseKeysPressed {
    (target: HookTarget | Window, options?: UseKeysPressedOptions): Array<{
        key: string;
        code: string;
    }>;
    <Target extends Element>(options?: UseKeysPressedOptions): {
        value: Array<{
            key: string;
            code: string;
        }>;
        ref: StateRef<Target>;
    };
}
/**
 * Hook that tracks which keyboard keys are currently pressed
 *
 * @name useKeysPressed
 * @description Tracks all currently pressed keyboard keys and their codes
 * @category Sensors
 *
 * @overload
 * @param {HookTarget | Window} target DOM element or ref to attach keyboard listeners to
 * @param {UseKeysPressedOptions} [options.enabled=true] Enable or disable the event listeners
 * @returns {Array<{ key: string; code: string }>} Array of currently pressed keys with their key and code values
 *
 * @example
 * const pressedKeys = useKeysPressed(ref);
 *
 * @overload
 * @template Target - Type of the target DOM element
 * @param {UseKeysPressedOptions} [options] - Optional configuration options
 * @returns {{ keys: Array<{ key: string; code: string }>; ref: StateRef<Target> }} Object containing pressed keys array and ref to attach to a DOM element
 *
 * @example
 * const { value, ref } = useKeysPressed();
 */
export declare const useKeysPressed: UseKeysPressed;
