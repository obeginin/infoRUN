import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
/** The use fullscreen options type */
export interface UseFullScreenOptions {
    /** initial value */
    initialValue?: boolean;
    /** on enter fullscreen */
    onEnter?: () => void;
    /** on exit fullscreen */
    onExit?: () => void;
}
/** The use click outside return type */
export interface UseFullScreenReturn {
    /** The fullscreen state */
    value: boolean;
    /** The fullscreen enter method */
    enter: () => void;
    /** The fullscreen exit method */
    exit: () => void;
    /** The fullscreen toggle method */
    toggle: () => void;
}
export interface UseFullScreen {
    (target: HookTarget, options?: UseFullScreenOptions): UseFullScreenReturn;
    <Target extends Element>(options?: UseFullScreenOptions, target?: never): UseFullScreenReturn & {
        ref: StateRef<Target>;
    };
}
/**
 * @name useFullscreen
 * @description - Hook to handle fullscreen events
 * @category Browser
 *
 * @overload
 * @param {HookTarget} target The target element for fullscreen
 * @param {boolean} [options.initialValue=false] initial value of fullscreen
 * @param {() => void} [options.onEnter] on enter fullscreen
 * @param {() => void} [options.onExit] on exit fullscreen
 * @returns {UseFullScreenReturn} An object with the fullscreen state and methods
 *
 * @example
 * const { enter, exit, toggle, value } = useFullscreen(ref);
 *
 * @overload
 * @template Target The target element for fullscreen
 * @param {boolean} [options.initialValue=false] initial value of fullscreen
 * @param {() => void} [options.onEnter] on enter fullscreen
 * @param {() => void} [options.onExit] on exit fullscreen
 * @returns {UseFullScreenReturn & { ref: RefObject<Target> }} An object with the fullscreen state and methods
 *
 * @example
 * const { ref, enter, exit, toggle, value } = useFullscreen();
 */
export declare const useFullscreen: UseFullScreen;
