import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
/** The use mouse return type */
export interface UseMouseReturn {
    /** The current mouse client x position */
    clientX: number;
    /** The current mouse client y position */
    clientY: number;
    /** The current element position x */
    elementPositionX: number;
    /** The current element position y */
    elementPositionY: number;
    /** The current element x position */
    elementX: number;
    /** The current element y position */
    elementY: number;
    /** The current mouse x position */
    x: number;
    /** The current mouse y position */
    y: number;
}
export interface UseMouse {
    (target: HookTarget): UseMouseReturn;
    <Target extends Element>(target?: never): UseMouseReturn & {
        ref: StateRef<Target>;
    };
    (target?: Window): UseMouseReturn;
}
/**
 * @name useMouse
 * @description - Hook that manages a mouse position
 * @category Sensors
 *
 * @overload
 * @param {HookTarget} [target=window] The target element to manage the mouse position for
 * @returns {UseMouseReturn} An object with the current mouse position
 *
 * @example
 * const { x, y, clientX, clientY, elementX, elementY, elementPositionX, elementPositionY } = useMouse(ref);
 *
 * @overload
 * @template Target The target element
 * @returns {UseMouseReturn & { ref: StateRef<Target> }} An object with the current mouse position and a ref
 *
 * @example
 * const { ref, x, y, clientX, clientY, elementX, elementY, elementPositionX, elementPositionY } = useMouse();
 */
export declare const useMouse: UseMouse;
