/** The use vibrate pattern type */
export type UseVibratePattern = number | number[];
/** The use vibrate return type */
export interface UseVibrateReturn {
    /** The support indicator */
    supported: boolean;
    /** The vibrating indicator */
    vibrating: boolean;
    /** The pause function */
    pause: () => void;
    /** The resume function */
    resume: () => void;
    /** The start function */
    start: (interval: number) => void;
    /** The vibrate function */
    trigger: (pattern?: UseVibratePattern) => void;
}
/**
 * @name useVibrate
 * @description - Hook that provides vibrate api
 * @category Browser
 *
 * @browserapi navigator.vibrate https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vibrate
 *
 * @overload
 * @param {UseVibratePattern} options.pattern The pattern for vibration
 * @param {number} [options.interval=0] Time in milliseconds between vibrations
 * @returns {UseVibrateReturn} An object containing support indicator, start vibration and stop vibration functions
 *
 * @example
 * const { supported, active, vibrate, stop, pause, resume } = useVibrate(1000);
 */
export declare const useVibrate: (pattern: UseVibratePattern, interval?: number) => {
    supported: boolean;
    trigger: (internalPattern?: UseVibratePattern) => void;
    stop: () => void;
    active: boolean;
    pause: () => void;
    resume: (intervalInterval?: number) => void;
};
