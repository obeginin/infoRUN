/** The use map return type */
export interface UseMapReturn<Key, Value> {
    /** The size of the map */
    size: number;
    /** The current map */
    value: Map<Key, Value>;
    /** Function to clear the map */
    clear: () => void;
    /** Function to check if a value exists in the map */
    has: (key: Key) => boolean;
    /** Function to remove a value from the map */
    remove: (key: Key) => void;
    /** Function to toggle a value in the map */
    reset: () => void;
    /** Function to add a value to the map */
    set: (key: Key, value: Value) => void;
}
/**
 * @name useMap
 * @description - Hook that manages a map structure
 * @category State
 *
 * @template Value The type of the value
 * @param {Value[]} [values] The initial array of the map
 * @returns {UseMapReturn<Key, Value>} An object containing the current map and functions to interact with the map
 *
 * @example
 * const { value, set, remove, clear, reset, size, has } = useMap([1, 'one'], [2, 'two']);
 */
export declare const useMap: <Key, Value>(values?: [Key, Value][]) => UseMapReturn<Key, Value>;
