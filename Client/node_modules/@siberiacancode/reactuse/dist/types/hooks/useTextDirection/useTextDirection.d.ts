import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
/** The use text direction value type */
export type UseTextDirectionValue = 'auto' | 'ltr' | 'rtl';
/** The use text direction return type */
export interface UseTextDirectionReturn {
    /** The current direction */
    value: UseTextDirectionValue;
    /*** The function to remove the direction */
    remove: () => void;
    /*** The function to set the direction */
    set: (value: UseTextDirectionValue | null) => void;
}
export interface UseTextDirection {
    (target: HookTarget, initialValue?: UseTextDirectionValue): UseTextDirectionReturn;
    <Target extends Element>(initialValue?: UseTextDirectionValue, target?: never): UseTextDirectionReturn & {
        ref: StateRef<Target>;
    };
}
/**
 * @name useTextDirection
 * @description - Hook that can get and set the direction of the element
 * @category Elements
 *
 * @overload
 * @param {HookTarget} [target=document.querySelector('html')] The target element to observe
 * @param {UseTextDirectionValue} [initialValue = 'ltr'] The initial direction of the element
 * @returns {UseTextDirectionReturn} An object containing the current text direction of the element
 *
 * @example
 * const { value, set, remove } = useTextDirection(ref);
 *
 * @overload
 * @template Target The target element type
 * @param {UseTextDirectionValue} [initialValue = 'ltr'] The initial direction of the element
 * @returns { { ref: StateRef<Target> } & UseTextDirectionReturn } An object containing the current text direction of the element
 *
 * @example
 * const { ref, value, set, remove } = useTextDirection();
 */
export declare const useTextDirection: UseTextDirection;
