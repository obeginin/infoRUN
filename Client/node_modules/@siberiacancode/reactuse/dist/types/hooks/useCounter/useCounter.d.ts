import { Dispatch, SetStateAction } from 'react';
/** The use counter options */
export interface UseCounterOptions {
    /** The max of count value */
    max?: number;
    /** The min of count value */
    min?: number;
}
/** The use counter return type */
export interface UseCounterReturn {
    /** Function to set a specific value to the counter */
    set: Dispatch<SetStateAction<number>>;
    /** The current count value */
    value: number;
    /** Function to decrement the counter */
    dec: (value?: number) => void;
    /** Function to increment the counter */
    inc: (value?: number) => void;
    /** Function to reset the counter to its initial value. */
    reset: () => void;
}
export interface UseCounter {
    (initialValue?: number, options?: UseCounterOptions): UseCounterReturn;
    (options: UseCounterOptions & {
        initialValue?: number;
    }, initialValue?: never): UseCounterReturn;
}
/**
 * @name useCounter
 * @description - Hook that manages a counter
 * @category State
 *
 * @overload
 * @param {number} [initialValue=0] The initial number value
 * @param {number} [options.min=Number.NEGATIVE_INFINITY] The min of count value
 * @param {number} [options.max=Number.POSITIVE_INFINITY] The max of count value
 * @returns {UseCounterReturn} An object containing the current count and functions to interact with the counter

 * @overload
 * @param {number} [params.initialValue=0] The initial number value
 * @param {number} [params.min=Number.NEGATIVE_INFINITY] The min of count value
 * @param {number} [params.max=Number.POSITIVE_INFINITY] The max of count value
 * @returns {UseCounterReturn} An object containing the current count and functions to interact with the counter
 *
 * @example
 * const { count, dec, inc, reset, set } = useCounter(5);
 *
 * @example
 * const { count, dec, inc, reset, set } = useCounter({ initialValue: 5, min: 0, max: 10 });
 */
export declare const useCounter: UseCounter;
