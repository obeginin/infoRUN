export type PositiveInteger<Value extends number> = `${Value}` extends `-${any}` | `${any}.${any}` ? never : Value;
export declare const getTimeFromSeconds: (timestamp: number) => {
    seconds: number;
    minutes: number;
    hours: number;
    days: number;
};
/** The use timer options type */
export interface UseTimerOptions {
    /** Whether the timer should start automatically */
    immediately?: boolean;
    /** The function to be executed when the timer is expired */
    onExpire?: () => void;
    /** The function to be executed when the timer is started */
    onStart?: () => void;
    /** Callback function to be executed on each tick of the timer */
    onTick?: (seconds: number) => void;
}
/** The use timer return type */
export interface UseTimerReturn {
    /** flag to indicate if timer is active or not */
    active: boolean;
    /** The total count of the timer */
    count: number;
    /** The day count of the timer */
    days: number;
    /** The hour count of the timer */
    hours: number;
    /** The minute count of the timer */
    minutes: number;
    /** The second count of the timer */
    seconds: number;
    /** The function to clear the timer */
    clear: () => void;
    /** The function to decrease the timer */
    decrease: (seconds: PositiveInteger<number>) => void;
    /** The function to increase the timer */
    increase: (seconds: PositiveInteger<number>) => void;
    /** The function to pause the timer */
    pause: () => void;
    /** The function to restart the timer */
    restart: (time: PositiveInteger<number>, immediately?: boolean) => void;
    /** The function to resume the timer */
    resume: () => void;
    /** The function to start the timer */
    start: () => void;
    /** The function to toggle the timer */
    toggle: () => void;
}
export interface UseTimer {
    (): UseTimerReturn;
    (seconds: PositiveInteger<number>, callback: () => void): UseTimerReturn;
    (seconds: PositiveInteger<number>, options?: UseTimerOptions): UseTimerReturn;
}
/**
 * @name useTimer
 * @description - Hook that creates a timer functionality
 * @category Time
 *
 * @overload
 * @returns {UseTimerReturn} An object containing the timer properties and functions
 *
 * @example
 * const { days, hours, minutes, seconds, toggle, pause, start, restart, resume, active, decrease, increase } = useTimer();
 *
 * @overload
 * @param {number} seconds The seconds value that define for how long the timer will be running
 * @param {() => void} callback The function to be executed once countdown timer is expired
 * @returns {UseTimerReturn} An object containing the timer properties and functions
 *
 * @example
 * const { days, hours, minutes, seconds, toggle, pause, start, restart, resume, active, decrease, increase } = useTimer(1000, () => console.log('ready'));
 *
 * @overload
 * @param {number} seconds The seconds value that define for how long the timer will be running
 * @param {boolean} [options.immediately=true] The flag to decide if timer should start automatically
 * @param {() => void} [options.onExpire] The function to be executed when the timer is expired
 * @param {(timestamp: number) => void} [options.onTick] The function to be executed on each tick of the timer
 * @returns {UseTimerReturn} An object containing the timer properties and functions
 *
 * @example
 * const { days, hours, minutes, seconds, toggle, pause, start, restart, resume, active, decrease, increase } = useTimer(1000);
 */
export declare const useTimer: UseTimer;
