import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
export interface UseClickOutside {
    (target: HookTarget, callback: (event: Event) => void): void;
    <Target extends Element>(callback: (event: Event) => void, target?: never): StateRef<Target>;
}
/**
 * @name useClickOutside
 * @description - Hook to handle click events outside the specified target element(s)
 * @category Elements
 *
 * @overload
 * @param {HookTarget} target The target element(s) to detect outside clicks for
 * @param {(event: Event) => void} callback The callback to execute when a click outside the target is detected
 * @returns {void}
 *
 * @example
 * useClickOutside(ref, () => console.log('click outside'));
 *
 * @overload
 * @template Target The target element(s)
 * @param {(event: Event) => void} callback The callback to execute when a click outside the target is detected
 * @returns {(node: Target) => void} A React ref to attach to the target element
 *
 * @example
 * const ref = useClickOutside<HTMLDivElement>(() => console.log('click outside'));
 *
 * @see {@link https://siberiacancode.github.io/reactuse/functions/hooks/useClickOutside.html}
 */
export declare const useClickOutside: UseClickOutside;
