/** The use step params type */
export interface UseStepParams {
    /** Initial value for step */
    initial: number;
    /** Maximum value for step */
    max: number;
}
/** The use step return type */
export interface UseStepReturn {
    /** Counts of steps */
    counts: number;
    /** Current value of step */
    currentStep: number;
    /** Boolean value if current step is first */
    isFirst: boolean;
    /** Boolean value if current step is last */
    isLast: boolean;
    /** Go to back step */
    back: () => void;
    /** Go to next step */
    next: () => void;
    /** Reset current step to initial value */
    reset: () => void;
    /** Go to custom step */
    set: (value: number | 'first' | 'last') => void;
}
/**
 * @name useStep
 * @description - Hook that create stepper
 * @category State
 *
 * @overload
 * @param {number} max Maximum number of steps
 * @returns {UseStepReturn} An object contains variables and functions to change the step
 *
 * @example
 * const stepper = useStep(5);
 *
 * @overload
 * @param {number} params.max Maximum number of steps
 * @param {number} params.initial Initial value for step
 * @returns {UseStepReturn} An object contains variables and functions to change the step
 *
 * @example
 * const stepper = useStep({ initial: 2, max: 5 });
 */
export declare const useStep: (params: number | UseStepParams) => UseStepReturn;
