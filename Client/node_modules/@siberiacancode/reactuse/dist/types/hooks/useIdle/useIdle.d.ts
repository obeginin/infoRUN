/** The use idle options type */
export interface UseIdleOptions {
    /** The idle events */
    events?: Array<keyof DocumentEventMap>;
    /** The idle state */
    initialValue?: boolean;
}
/** The use idle return type */
export interface UseIdleReturn {
    /** The idle state */
    idle: boolean;
    /** The last active time */
    lastActive: number;
}
/**
 * @name useIdle
 * @description - Hook that defines the logic when the user is idle
 * @category Sensors
 *
 * @param {number} [milliseconds=ONE_MINUTE] The idle time in milliseconds
 * @param {boolean} [options.initialState=false] The options for the hook
 * @param {Array<keyof WindowEventMap>} [options.events=IDLE_EVENTS]
 * @returns {UseIdleReturn} An object containing the idle state and the last active time
 *
 * @example
 * const { idle, lastActive } = useIdle();
 */
export declare const useIdle: (milliseconds?: number, { initialValue, events }?: UseIdleOptions) => UseIdleReturn;
