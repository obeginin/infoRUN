export type UseStorageInitialValue<Value> = (() => Value) | Value;
export interface UseStorageOptions<Value> {
    initialValue?: UseStorageInitialValue<Value>;
    storage?: Storage;
    deserializer?: (value: string) => Value;
    serializer?: (value: Value) => string;
}
export interface UseStorageReturn<Value> {
    value: Value;
    remove: () => void;
    set: (value: Value) => void;
}
export interface UseStorage {
    <Value>(key: string, options?: UseStorageOptions<Value>): UseStorageReturn<Value | undefined>;
    <Value>(key: string, initialValue?: UseStorageInitialValue<Value>): UseStorageReturn<Value | undefined>;
}
export declare const STORAGE_EVENT = "reactuse-storage";
export declare const dispatchStorageEvent: (params: Partial<StorageEvent>) => boolean;
/**
 * @name useStorage
 * @description - Hook that manages storage value
 * @category State
 *
 * @overload
 * @param {string} key The key of the storage
 * @param {UseStorageInitialValue<Value>} [initialValue] The initial value of the storage
 * @returns {UseStorageReturn<Value>} The value and the set function
 *
 * @overload
 * @param {string} key The key of the storage
 * @param {(value: Value) => string} [params.serializer] The serializer function
 * @param {(value: string) => Value} [params.deserializer] The deserializer function
 * @param {Storage} [params.storage] The storage
 * @param {UseStorageInitialValue<Value>} [params.initialValue] The initial value of the storage
 * @returns {UseStorageReturn<Value>} The value and the set function
 *
 * @example
 * const { value, set, remove } = useStorage('key', 'value');
 */
export declare const useStorage: UseStorage;
