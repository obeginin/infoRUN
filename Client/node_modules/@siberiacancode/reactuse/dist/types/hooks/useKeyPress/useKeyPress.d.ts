import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
/** The key or keys to listen for */
export type UseKeyPressKey = string | string[];
/** The callback function to be invoked when key is pressed */
export type UseKeyPressCallback = (pressed: boolean, event: KeyboardEvent) => void;
export interface UseKeyPress {
    (target: HookTarget | Window, key: UseKeyPressKey, callback?: UseKeyPressCallback): boolean;
    <Target extends Element>(key: UseKeyPressKey, callback?: UseKeyPressCallback, target?: never): {
        pressed: boolean;
        ref: StateRef<Target>;
    };
}
/**
 * @name useKeyPress
 * @description - Hook that listens for key press events
 * @category Sensors
 *
 * @overload
 * @param {HookTarget} [target=window] The target to attach the event listeners to
 * @param {UseKeyPressKey} key The key or keys to listen for
 * @param {(pressed: boolean, event: KeyboardEvent) => void} [callback] Callback function invoked when key is pressed
 * @returns {boolean} The pressed state of the key
 *
 * @example
 * const isKeyPressed = useKeyPress(ref, 'a');
 *
 * @overload
 * @template Target The target element type
 * @param {UseKeyPressKey} key The key or keys to listen for
 * @param {(pressed: boolean, event: KeyboardEvent) => void} [callback] Callback function invoked when key is pressed
 * @returns {{ pressed: boolean; ref: StateRef<Target> }} An object containing the pressed state and ref
 *
 * @example
 * const { pressed, ref } = useKeyPress('a');
 */
export declare const useKeyPress: UseKeyPress;
