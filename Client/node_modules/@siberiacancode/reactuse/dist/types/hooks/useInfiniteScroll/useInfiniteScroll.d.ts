import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
/** The use infinite scroll options type */
export interface UseInfiniteScrollOptions {
    /** The direction to trigger the callback */
    direction?: 'bottom' | 'left' | 'right' | 'top';
    /** The distance in pixels to trigger the callback */
    distance?: number;
}
export interface UseInfiniteScroll {
    (target: HookTarget, callback: (event: Event) => void, options?: UseInfiniteScrollOptions): boolean;
    <Target extends Element>(callback: (event: Event) => void, options?: UseInfiniteScrollOptions, target?: never): {
        ref: StateRef<Target>;
        loading: boolean;
    };
}
/**
 * @name useInfiniteScroll
 * @description - Hook that defines the logic for infinite scroll
 * @category Sensors
 *
 * @overload
 * @template Target The target element
 * @param {(event: Event) => void} callback The callback to execute when a click outside the target is detected
 * @param {number} [options.distance=10] The distance in pixels to trigger the callback
 * @param {string} [options.direction='bottom'] The direction to trigger the callback
 * @returns {{ ref: StateRef<Target>, loading: boolean }} An object containing the ref and loading
 *
 * @example
 * const { ref, loading } = useInfiniteScroll(() => console.log('infinite scroll'));
 *
 * @overload
 * @param {HookTarget} target The target element to detect infinite scroll for
 * @param {(event: Event) => void} callback The callback to execute when a click outside the target is detected
 * @param {number} [options.distance=10] The distance in pixels to trigger the callback
 * @param {string} [options.direction='bottom'] The direction to trigger the callback
 * @returns {boolean} A loading indicator of the infinite scroll
 *
 * @example
 * const loading = useInfiniteScroll(ref, () => console.log('infinite scroll'));
 */
export declare const useInfiniteScroll: UseInfiniteScroll;
