import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
export type LongPressEvents = MouseEvent | TouchEvent;
export interface UseLongPressOptions {
    threshold?: number;
    onCancel?: (event: LongPressEvents) => void;
    onFinish?: (event: LongPressEvents) => void;
    onStart?: (event: LongPressEvents) => void;
}
export interface UseLongPress {
    (target: HookTarget, callback: (event: LongPressEvents) => void, options?: UseLongPressOptions): boolean;
    <Target extends Element>(callback: (event: LongPressEvents) => void, options?: UseLongPressOptions, target?: never): {
        ref: StateRef<Target>;
        pressed: boolean;
    };
}
/**
 * @name useLongPress
 * @description - Hook that defines the logic when long pressing an element
 * @category Elements
 *
 * @overload
 * @param {HookTarget} target The target element to be long pressed
 * @param {(event: LongPressEvents) => void} callback The callback function to be invoked on long press
 * @param {UseLongPressOptions} [options] The options for the long press
 * @returns {boolean} The long pressing state
 *
 * @example
 * const pressed = useLongPress(ref, () => console.log('callback'));
 *
 * @overload
 * @template Target The target element
 * @param {(event: LongPressEvents) => void} callback The callback function to be invoked on long press
 * @param {UseLongPressOptions} [options] The options for the long press
 * @returns {boolean} The long pressing state
 *
 * @example
 * const { ref, pressed } = useLongPress(() => console.log('callback'));
 */
export declare const useLongPress: UseLongPress;
