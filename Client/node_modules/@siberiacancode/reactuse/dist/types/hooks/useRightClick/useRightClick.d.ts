import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
export type RightClickEvent = MouseEvent | TouchEvent;
export interface RightClickPositions {
    x: number;
    y: number;
}
export interface UseRightClickOptions {
    onEnd?: (event: RightClickEvent) => void;
    onStart?: (event: RightClickEvent) => void;
}
export interface UseRightClick {
    (target: HookTarget, callback: (event: Event) => void, options?: UseRightClickOptions): void;
    <Target extends Element>(callback: (positions: RightClickPositions, event: Event) => void, options?: UseRightClickOptions, target?: never): StateRef<Target>;
}
/**
 * @name useRightClick
 * @description - Hook that handles right-click events and long press on mobile devices
 * @category Elements
 *
 * @overload
 * @param {HookTarget} target The target element for right-click handling
 * @param {(event: RightClickEvents) => void} callback The callback function to be invoked on right click
 * @returns {void}
 *
 * @example
 * useRightClick(ref, () => console.log('clicked'));
 *
 * @overload
 * @template Target The target element
 * @param {(event: RightClickEvents) => void} callback The callback function to be invoked on right click
 * @returns {StateRef<Target>} Ref to attach to the element
 *
 * @example
 * const ref = useRightClick(() => console.log('clicked'));
 */
export declare const useRightClick: UseRightClick;
