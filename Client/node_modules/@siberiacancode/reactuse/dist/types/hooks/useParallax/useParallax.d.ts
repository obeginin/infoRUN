import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
/** The use parallax value type */
export interface UseParallaxValue {
    /** Roll value. Scaled to `-0.5 ~ 0.5` */
    roll: number;
    /** Sensor source, can be `mouse` or `deviceOrientation` */
    source: 'deviceOrientation' | 'mouse';
    /** Tilt value. Scaled to `-0.5 ~ 0.5` */
    tilt: number;
}
/** The use parallax options type */
export interface UseParallaxOptions {
    /** Device orientation roll adjust function */
    deviceOrientationRollAdjust?: (value: number) => number;
    /** Device orientation tilt adjust function */
    deviceOrientationTiltAdjust?: (value: number) => number;
    /** Mouse roll adjust function */
    mouseRollAdjust?: (value: number) => number;
    /** Mouse tilt adjust function */
    mouseTiltAdjust?: (value: number) => number;
}
interface UseParallaxReturn {
    value: UseParallaxValue;
}
export interface UseParallax {
    (target: HookTarget, options?: UseParallaxOptions): UseParallaxReturn;
    <Target extends Element>(options?: UseParallaxOptions, target?: never): UseParallaxReturn & {
        ref: StateRef<Target>;
    };
}
/**
 * @name useParallax
 * @description - Hook to help create parallax effect
 * @category Sensors
 *
 * @overload
 * @param {HookTarget} target The target element for the parallax effect
 * @param {UseParallaxOptions} options The options for the parallax effect
 * @returns {UseParallaxReturn} An object of parallax values
 *
 * @example
 * const { value } = useParallax(ref);
 *
 * @overload
 * @template Target The target element for the parallax effect
 * @param {UseParallaxOptions} options The options for the parallax effect
 * @returns {UseParallaxReturn & { ref: StateRef<Target> }} An object of parallax values
 *
 * @example
 * const { ref, value } = useParallax();
 */
export declare const useParallax: UseParallax;
export {};
