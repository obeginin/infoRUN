import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
export interface UseScrollOptions {
    /** The on scroll callback */
    onScroll?: (params: UseScrollCallbackParams, event: Event) => void;
    /** The on end scroll callback */
    onStop?: (event: Event) => void;
    /** Offset arrived states by x pixels. */
    offset?: {
        left?: number;
        right?: number;
        top?: number;
        bottom?: number;
    };
}
export interface UseScrollCallbackParams {
    /** The element x position */
    x: number;
    /** The element y position */
    y: number;
    /** State of scroll arrived */
    arrived: {
        left: boolean;
        right: boolean;
        top: boolean;
        bottom: boolean;
    };
    /** State of scroll direction */
    directions: {
        left: boolean;
        right: boolean;
        top: boolean;
        bottom: boolean;
    };
}
export interface UseScroll {
    (target: HookTarget, callback?: (params: UseScrollCallbackParams, event: Event) => void): boolean;
    (target: HookTarget, options?: UseScrollOptions): boolean;
    <Target extends Element>(callback?: (params: UseScrollCallbackParams, event: Event) => void, target?: never): {
        ref: StateRef<Target>;
        scrolling: boolean;
    };
    <Target extends Element>(options?: UseScrollOptions, target?: never): {
        ref: StateRef<Target>;
        scrolling: boolean;
    };
}
/**
 * @name useScroll
 * @description - Hook that allows you to control scroll a element
 * @category Sensors
 *
 * @overload
 * @template Target The target element
 * @param {ScrollBehavior} [options.behavior=auto] The behavior of scrolling
 * @param {number} [options.offset.left=0] The left offset for arrived states
 * @param {number} [options.offset.right=0]  The right offset for arrived states
 * @param {number} [options.offset.top=0] The top offset for arrived states
 * @param {number} [options.offset.bottom=0] The bottom offset for arrived states
 * @param {(params: UseScrollCallbackParams, event: Event) => void} [options.onScroll] The callback function to be invoked on scroll
 * @param {(event: Event) => void} [options.onStop] The callback function to be invoked on scroll end
 * @returns {boolean} The state of scrolling
 *
 * @example
 * const scrolling = useScroll(ref, options);
 *
 * @overload
 * @template Target The target element
 * @param {(params: UseScrollCallbackParams, event: Event) => void} [callback] The callback function to be invoked on scroll
 * @returns {boolean} The state of scrolling
 *
 * @example
 * const scrolling = useScroll(ref, () => console.log('callback'));
 *
 * @overload
 * @template Target The target element
 * @param {Target} target The target element to scroll
 * @param {ScrollBehavior} [options.behavior=auto] The behavior of scrolling
 * @param {number} [options.offset.left=0] The left offset for arrived states
 * @param {number} [options.offset.right=0]  The right offset for arrived states
 * @param {number} [options.offset.top=0] The top offset for arrived states
 * @param {number} [options.offset.bottom=0] The bottom offset for arrived states
 * @param {(params: UseScrollCallbackParams, event: Event) => void} [options.onScroll] The callback function to be invoked on scroll
 * @param {(event: Event) => void} [options.onStop] The callback function to be invoked on scroll end
 * @returns {[StateRef<Target>, boolean]} The state of scrolling
 *
 * @example
 * const { ref, scrolling } = useScroll(options);
 *
 * @overload
 * @template Target The target element
 * @param {Target} target The target element to scroll
 * @param {(params: UseScrollCallbackParams, event: Event) => void} [callback] The callback function to be invoked on scroll
 * @returns {[StateRef<Target>, boolean]} The state of scrolling
 *
 * @example
 * const { ref, scrolling } = useScroll(() => console.log('callback'));
 */
export declare const useScroll: UseScroll;
