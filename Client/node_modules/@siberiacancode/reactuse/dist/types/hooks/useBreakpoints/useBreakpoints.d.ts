/** The breakpoints type */
export type Breakpoints<Breakpoint extends string = string> = Record<Breakpoint, number>;
/** The use breakpoints strategy */
export type UseBreakpointsStrategy = 'desktop-first' | 'mobile-first';
/** The use breakpoints return type */
export type UseBreakpointsReturn<Breakpoint extends string = string> = {
    /** The function that checks if the current breakpoint is greater than to the given breakpoint */
    greater: (breakpoint: Breakpoint) => boolean;
    /** The function that checks if the current breakpoint is greater than or equal to the given breakpoint */
    greaterOrEqual: (breakpoint: Breakpoint) => boolean;
    /** The function that checks if the current breakpoint is smaller than to the given breakpoint */
    smaller: (breakpoint: Breakpoint) => boolean;
    /** The function that checks if the current breakpoint is smaller than or equal to the given breakpoint */
    smallerOrEqual: (breakpoint: Breakpoint) => boolean;
    /** The function that checks if the current breakpoint is between to the given breakpoints */
    between: (a: Breakpoint, b: Breakpoint) => boolean;
    /** The function that checks if the current breakpoint is greater than to the given breakpoint */
    isGreater: (breakpoint: Breakpoint) => boolean;
    /** The function that checks if the current breakpoint is greater than or equal to the given breakpoint */
    isGreaterOrEqual: (breakpoint: Breakpoint) => boolean;
    /** The function that checks if the current breakpoint is smaller than to the given breakpoint */
    isSmaller: (breakpoint: Breakpoint) => boolean;
    /** The function that checks if the current breakpoint is smaller than or equal to the given breakpoint */
    isSmallerOrEqual: (breakpoint: Breakpoint) => boolean;
    /** The function that checks if the current breakpoint is between to the given breakpoints */
    isInBetween: (a: Breakpoint, b: Breakpoint) => boolean;
    /** The function that returns the current breakpoints */
    current: () => Breakpoint[];
    /** The function that returns the current active breakpoint */
    active: () => Breakpoint;
} & Record<Breakpoint, boolean>;
/**
 * @name useBreakpoints
 * @description - Hook that manages breakpoints
 * @category Browser
 *
 * @template {string} Breakpoint The name of the breakpoint
 * @param {Breakpoints<Breakpoint>} breakpoints The breakpoints to use
 * @param {UseBreakpointsStrategy} [strategy=min-width] The strategy to use for matching
 * @returns {UseBreakpointsReturn<Breakpoint>} An object containing the current breakpoint
 *
 * @example
 * const { greaterOrEqual, smallerOrEqual, current } = useBreakpoints({ mobile: 0, tablet: 640, laptop: 1024, desktop: 1280 });
 */
export declare const useBreakpoints: <Breakpoint extends string>(breakpoints: Breakpoints<Breakpoint>, strategy?: UseBreakpointsStrategy) => UseBreakpointsReturn<Breakpoint>;
/** Breakpoints from Material UI */
export declare const BREAKPOINTS_MATERIAL_UI: {
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
};
/** Breakpoints from Mantine */
export declare const BREAKPOINTS_MANTINE: {
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
};
/** Breakpoints from Tailwind */
export declare const BREAKPOINTS_TAILWIND: {
    sm: number;
    md: number;
    lg: number;
    xl: number;
    '2xl': number;
};
/**  Breakpoints from Bootstrap V5 */
export declare const BREAKPOINTS_BOOTSTRAP_V5: {
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
    xxl: number;
};
/** Breakpoints from Ant Design */
export declare const BREAKPOINTS_ANT_DESIGN: {
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
    xxl: number;
};
/** Breakpoints from Quasar V2 */
export declare const BREAKPOINTS_QUASAR_V2: {
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
};
/** Sematic Breakpoints */
export declare const BREAKPOINTS_SEMANTIC: {
    mobileS: number;
    mobileM: number;
    mobileL: number;
    tablet: number;
    laptop: number;
    laptopL: number;
    desktop4K: number;
};
/**  Breakpoints from Master CSS  */
export declare const BREAKPOINTS_MASTER_CSS: {
    '3xs': number;
    '2xs': number;
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
    '2xl': number;
    '3xl': number;
    '4xl': number;
};
/** Breakpoints from PrimeFlex */
export declare const BREAKPOINTS_PRIME_FLEX: {
    sm: number;
    md: number;
    lg: number;
    xl: number;
};
