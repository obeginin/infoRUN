/** The url search params mode type */
export type UrlSearchParamMode = 'hash-params' | 'hash' | 'history';
/** The use url search param options type */
export interface UseUrlSearchParamOptions<Value> {
    /** The initial value of the search param */
    initialValue?: Value;
    /** The mode to use for writing to the URL */
    mode?: UrlSearchParamMode;
    /** The mode to use for writing to the URL */
    write?: 'push' | 'replace';
    /** The deserializer function to be invoked */
    deserializer?: (value: string) => Value;
    /** The serializer function to be invoked */
    serializer?: (value: Value) => string;
}
/** The use url search params set options type */
export interface UseUrlSearchParamsActionOptions {
    /** The mode to use for writing to the URL */
    write?: 'push' | 'replace';
}
/** The use url search param return type */
export interface UseUrlSearchParamReturn<Value> {
    /** Current search param value */
    value: Value | undefined;
    /** Function to remove the search param */
    remove: (options?: UseUrlSearchParamsActionOptions) => void;
    /** Function to update search param */
    set: (value: Value, options?: UseUrlSearchParamsActionOptions) => void;
}
export declare const URL_SEARCH_PARAMS_EVENT = "reactuse-url-search-params-event";
export declare const getUrlSearchParams: (mode?: UrlSearchParamMode) => URLSearchParams;
export declare const createQueryString: (searchParams: URLSearchParams, mode: UrlSearchParamMode) => string;
export declare const dispatchUrlSearchParamsEvent: () => boolean;
export interface UseUrlSearchParam {
    <Value>(key: string, options: UseUrlSearchParamOptions<Value> & {
        initialValue: Value;
    }): UseUrlSearchParamReturn<Value>;
    <Value>(key: string, options?: UseUrlSearchParamOptions<Value>): UseUrlSearchParamReturn<Value | undefined>;
    <Value>(key: string, initialValue: Value): UseUrlSearchParamReturn<Value>;
    <Value>(key: string): UseUrlSearchParamReturn<Value | undefined>;
}
/**
 * @name useUrlSearchParam
 * @description - Hook that provides reactive URLSearchParams for a single key
 * @category State
 *
 * @overload
 * @template Value The type of the url param values
 * @param {string} key The key of the url param
 * @param {UseUrlSearchParamOptions<Value> & { initialValue: Value }} options The options object with required initialValue
 * @param {Value} options.initialValue The initial value for the url param
 * @param {UrlSearchParamsMode} [options.mode='history'] The mode to use for the URL ('history' | 'hash-params' | 'hash')
 * @param {'push' | 'replace'} [options.write='replace'] The mode to use for writing to the URL
 * @param {(value: Value) => string} [options.serializer] Custom serializer function to convert value to string
 * @param {(value: string) => Value} [options.deserializer] Custom deserializer function to convert string to value
 * @returns {UseUrlSearchParamReturn<Value>} The object with value and function for change value
 *
 * @example
 * const { value, set } = useUrlSearchParam('page', { initialValue: 1 });
 *
 * @overload
 * @template Value The type of the url param values
 * @param {string} key The key of the url param
 * @param {Value} [initialValue] The initial value for the url param
 * @returns {UseUrlSearchParamReturn<Value>} The object with value and function for change value
 *
 * @example
 * const { value, set } = useUrlSearchParam('page', 1);
 */
export declare const useUrlSearchParam: UseUrlSearchParam;
