import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
/** The use lock scroll options type */
export interface UseLockScrollOptions {
    /** Enable or disable scroll locking. Default: true */
    enabled?: boolean;
}
/** The use lock scroll return type */
export interface UseLockScrollReturn<Target extends Element> {
    /** The ref to attach to the element */
    ref: StateRef<Target>;
    /** The value of the lock state */
    value: boolean;
    /** Lock the scroll */
    lock: () => void;
    /** Toggle the scroll lock */
    toggle: () => void;
    /** Unlock the scroll */
    unlock: () => void;
}
export interface UseLockScroll {
    (target: HookTarget, options?: UseLockScrollOptions): UseLockScrollReturn<Element>;
    <Target extends Element>(options?: UseLockScrollOptions, target?: never): UseLockScrollReturn<Target> & {
        ref: StateRef<Target>;
    };
}
/**
 * @name useLockScroll
 * @description - Hook that locks scroll on an element or document body
 * @category Elements
 *
 *
 * @overload
 * @param {HookTarget} [target=document.body] The target element to lock scroll on
 * @param {UseLockScrollOptions} [options] The options for scroll locking
 * @returns {void}
 *
 * @example
 * const { lock, unlock, value, toggle } = useLockScroll(ref);
 *
 * @overload
 * @template Target The target element
 * @param {UseLockScrollOptions} [options] The options for scroll locking
 * @returns {StateRef<Target>} Ref to attach to element, or locks body scroll by default
 *
 * @example
 * const { ref, lock, unlock, value, toggle } = useLockScroll();
 */
export declare const useLockScroll: UseLockScroll;
