import { HookTarget } from '../../utils/helpers';
import { StateRef } from '../useRefState/useRefState';
/** The use sticky return type */
export interface UseStickyReturn {
    stuck: boolean;
}
/** The use sticky axis type */
export type UseStickyAxis = 'horizontal' | 'vertical';
/** The use sticky options type */
export interface UseStickyOptions {
    axis?: UseStickyAxis;
    root?: HookTarget;
}
export interface UseSticky {
    (target: HookTarget, options?: UseStickyOptions): boolean;
    <Target extends Element>(options?: UseStickyOptions, target?: never): {
        ref: StateRef<Target>;
    } & UseStickyReturn;
}
/**
 * @name UseSticky
 * @description - Hook that allows you to detect that your sticky component is stuck
 * @category Elements
 *
 * @overload
 * @param {HookTarget} target The target sticky element
 * @param {UseStickyAxis} [options.axis='vertical'] The axis of motion of the sticky component
 * @param {UseStickyRoot} [options.root=document] The element that contains your sticky component
 * @returns {UseStickyReturn} The state of the sticky
 *
 * @example
 * const stuck  = useSticky(ref);
 *
 * @overload
 * @param {UseStickyAxis} [options.axis='vertical'] The axis of motion of the sticky component
 * @param {UseStickyRoot} [options.root=document] The element that contains your sticky component
 * @returns {{ stickyRef: StateRef<Target> } & UseStickyReturn} The state of the sticky
 *
 * @example
 * const { stuck, ref } = useSticky();
 */
export declare const useSticky: UseSticky;
