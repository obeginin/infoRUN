/** The permission name */
export type UsePermissionName = 'accelerometer' | 'accessibility-events' | 'ambient-light-sensor' | 'background-sync' | 'camera' | 'clipboard-read' | 'clipboard-write' | 'gyroscope' | 'magnetometer' | 'microphone' | 'notifications' | 'payment-handler' | 'persistent-storage' | 'push' | 'speaker' | PermissionName;
/** The use permission options type */
export interface UsePermissionOptions {
    /** Whether the permission is enabled */
    enabled: boolean;
}
/** The use permission return type */
export interface UsePermissionReturn {
    /** The permission state */
    state: PermissionState;
    /** The permission supported status */
    supported: boolean;
    /** The permission query function */
    query: () => Promise<PermissionState>;
}
/**
 *  @name usePermission
 *  @description - Hook that gives you the state of permission
 *  @category Browser
 *
 *  @browserapi navigator.permissions https://developer.mozilla.org/en-US/docs/Web/API/Navigator/permissions
 *
 *  @param {UsePermissionName} permissionDescriptorName - The permission name
 *  @param {boolean} [options.enabled=true] - Whether the permission is enabled
 *  @returns {UsePermissionReturn} An object containing the state and the supported status
 *
 *  @example
 *  const { state, supported, query } = usePermission('microphone');
 */
export declare const usePermission: (permissionDescriptorName: UsePermissionName, options?: UsePermissionOptions) => {
    state: PermissionState;
    supported: boolean;
    query: () => Promise<PermissionState>;
};
