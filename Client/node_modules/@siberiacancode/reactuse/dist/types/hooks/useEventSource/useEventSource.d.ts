/** The use event source options type */
export interface UseEventSourceOptions<QueryData, Data> extends EventSourceInit {
    /** Immediately open the connection when calling this hook */
    immediately?: boolean;
    placeholderData?: (() => Data) | Data;
    retry?: boolean | number;
    retryDelay?: ((retry: number, event: Event) => number) | number;
    onError?: (error: Event) => void;
    onMessage?: (event: Event & {
        data?: Data;
    }) => void;
    onOpen?: () => void;
    select?: (data: QueryData) => Data;
}
/** The use event source return type */
interface UseEventSourceReturn<Data = any> {
    /** The latest data received via the EventSource */
    data?: Data;
    /** The current error */
    error?: Event;
    /** The instance of the EventSource */
    instance?: EventSource;
    isConnecting: boolean;
    isError: boolean;
    isOpen: boolean;
    /** Closes the EventSource connection gracefully */
    close: () => void;
    /** Reopen the EventSource connection */
    open: () => void;
}
/**
 * @name useEventSource
 * @description - Hook that provides a reactive wrapper for event source
 * @category Browser
 *
 * @browserapi EventSource https://developer.mozilla.org/en-US/docs/Web/API/EventSource
 *
 * @param {string | URL} url The URL of the EventSource
 * @param {string[]} [events=[]] List of events to listen to
 * @param {UseEventSourceOptions} [options={}] Configuration options
 * @returns {UseEventSourceReturn<Data>} The EventSource state and controls
 *
 * @example
 * const { instance, data, isConnecting, isOpen, isError, close, open } = useEventSource('url', ['message']);
 */
export declare const useEventSource: <QueryData = any, Data = QueryData>(url: string | URL, events?: string[], options?: UseEventSourceOptions<QueryData, Data>) => UseEventSourceReturn<Data>;
export {};
