from pydantic import BaseModel, Field
from datetime import datetime
from typing import Optional
from enum import Enum
from fastapi import Query
from pydantic import ConfigDict
# Schemas\students.py
''' –î–∞–Ω–Ω—ã–µ —Å—Ö–µ–º—ã –æ–ø–∏—Å—ã–≤–∞—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ–ª—É—á–∞–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON –∏ –æ–±—Ä–∞—Ç–Ω–æ)
'''




# –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å StudentTask
class StudentTaskBase(BaseModel):
    StudentTaskID: int
    StudentID: int
    SubTaskID: int
    CompletionStatus: Optional[str] = None
    Score: Optional[float] = None
    CompletionDate: Optional[datetime] = None
    StudentAnswer: Optional[str] = None

    model_config = ConfigDict(
        from_attributes=True,
        json_encoders={datetime: lambda v: v.isoformat() if v else None}
    )

# üîç –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ (–Ω–∞—Å–ª–µ–¥—É–µ–º –æ—Ç StudentTaskBase)
class StudentTaskRead(BaseModel):
    StudentTaskID: int
    StudentID: int
    SubTaskID: int
    StudentAnswer: Optional[str] = None
    CompletionStatus: Optional[str] = None
    Score: Optional[int] = None
    StartDate: Optional[datetime] = None
    ModifiedDate: Optional[datetime] = None
    CompletionDate: Optional[datetime] = None
    DeadlineDate: Optional[datetime] = None
    Attempts: Optional[int] = None
    Login: Optional[str] = None
    ID: Optional[int] = None
    Name: Optional[str] = None
    TaskID: Optional[int] = None
    TaskTitle: Optional[str] = None
    SubTaskNumber: Optional[int] = None
    ImagePath: Optional[str] = None
    SolutionStudentPath: Optional[str] = None
    Description: Optional[str] = None
    VariantID: Optional[int] = None
    VariantName: Optional[str] = None
    TypeVariant: Optional[str] = None
    YearVariant: Optional[int] = None
    NumberVarinat: Optional[int] = None
    DifficultyLevel: Optional[int] = None
    Comment: Optional[str] = None

#  (–Ω–∞—Å–ª–µ–¥—É–µ–º –æ—Ç StudentTaskRead)
#class StudentTaskDetails(StudentTaskRead):

class SortableFields(str, Enum):
    StudentTaskID = "StudentTaskID"
    StudentID = "StudentID"
    SubTaskID = "SubTaskID"
    TaskID = "TaskID"
    SubjectID = "SubjectID"
    VariantID = "VariantID"
    StartDate = "StartDate"
    ModifiedDate = "ModifiedDate"
    CompletionDate = "CompletionDate"
    DeadlineDate = "DeadlineDate"
    TypeVariant = "TypeVariant"
    YearVariant = "YearVariant"
    NumberVarinat = "NumberVarinat"
    DifficultyLevel = "DifficultyLevel"
    Attempts = "Attempts"

# –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
class SortDirection(str, Enum):
    ASC = "ASC"
    DESC = "DESC"

class StudentTasksQueryParams(BaseModel):
    StudentTaskID: Optional[int] = None
    SubTaskID: Optional[int] = None
    TaskID: Optional[int] = None
    SubjectID: Optional[int] = None
    VariantID: Optional[int] = None
    CompletionStatus: Optional[int] = None
    Search: Optional[str] = Field(default='–ö—Ä—ã–ª–æ–≤', description="–ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—é")
    SortColumn1: Optional[SortableFields] = Field(default=SortableFields.StartDate, description="–ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è 1")
    SortColumn2: Optional[SortableFields] = Field(default=None, description="–ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è 1")
    SortDirection1: Optional[SortDirection] = Field(default="ASC", description="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (ASC –∏–ª–∏ DESC) –¥–ª—è —É—Ä–æ–≤–Ω—è 1")
    SortDirection2: Optional[SortDirection] = Field(default=None, description="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (ASC –∏–ª–∏ DESC) –¥–ª—è —É—Ä–æ–≤–Ω—è 2")
    limit: Optional[int] = None # —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –≤–µ—Ä–Ω—É—Ç—å
    offset: Optional[int] = None # —Å –∫–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞—á–∏–Ω–∞—Ç—å



class AnswerInput(BaseModel):
    subtaskId: int
    studentId: int
    student_answer: str

class SolutionInput(BaseModel):
    student_id: int
    subtask_id: int
    solution_text: Optional[str] = None