from Service.config_app import TEMPLATES_DIR, LOG_LEVEL, LOG_FILE
from fastapi import FastAPI, Depends, Request, HTTPException
from Service.Routers import tasks, subtasks,students,auth,files  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –∑–∞–¥–∞—á
from fastapi.openapi.docs import get_swagger_ui_html, get_redoc_html
from fastapi.staticfiles import StaticFiles
from Service.Crud.auth import get_swagger_user
import uvicorn
from sqlalchemy import text
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.responses import RedirectResponse
from utils.log import setup_logging
from Service.middlewares import LoggingMiddleware
from fastapi.middleware.cors import CORSMiddleware
import logging
from Service.Database import engine, log_engine
from Service.producer import get_kafka_producer
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
import os
from fastapi.openapi.utils import get_openapi
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from fastapi import Request
from starlette.status import HTTP_400_BAD_REQUEST
# main.py
'''–≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞'''

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
setup_logging(log_file=LOG_FILE)
logging.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º: {LOG_FILE}")

app = FastAPI(debug=LOG_LEVEL, docs_url=None, redoc_url=None)

origins = [
    "http://localhost:5173",       # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ—Ä–æ–Ω—Ç (Vite)
    "http://127.0.0.1:5173",       # –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–µ–Ω —ç—Ç–æ—Ç
    "http://localhost:3000",       # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ—Ä–æ–Ω—Ç (Vite)
    "http://127.0.0.1:3000",
    "http://10.8.0.9:3000",
    "https://info-run.ru",         # –µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç –±—É–¥–µ—Ç –Ω–∞ –ø—Ä–æ–¥–µ
]
# –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ñ—Ä–æ–Ω—Ç–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,                   # ‚úÖ —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ—Ä–æ–Ω—Ç–∞
    allow_credentials=True,                  # ‚úÖ —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –∫—É–∫–∏ / –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    allow_methods=["GET", "POST", "PATCH", "PUT", "DELETE", "OPTIONS"],                     # ‚úÖ —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –ª—é–±—ã–µ HTTP-–º–µ—Ç–æ–¥—ã (GET, POST, PUT –∏ —Ç.–¥.)
    allow_headers=["*"],                     # ‚úÖ —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –ª—é–±—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Authorization)
)
app.add_middleware(LoggingMiddleware) # Middleware –¥–ª—è –ª–æ–≥–æ–≤ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
# –ü—É—Ç—å –¥–æ –±–∏–ª–¥-—Ñ—Ä–æ–Ω—Ç–∞
#frontend_path = os.path.join(os.path.dirname(__file__), "..", "Client", "dist")
#dist_static_dir = os.path.join(os.path.dirname(__file__), "..", "Client", "dist", "_next")


producer = get_kafka_producer()
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
app.include_router(auth.auth_router) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.include_router(auth.admin_router)
app.include_router(auth.home_router)
app.include_router(tasks.subject_router)  # –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
app.include_router(tasks.task_router) # –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ routers/tasks.py.
app.include_router(subtasks.subtask_router)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–¥–∑–∞–¥–∞—á
app.include_router(tasks.task_js_router) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è html —Ñ–∞–π–ª–æ–≤ —Å js
app.include_router(tasks.varinant_router) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è html —Ñ–∞–π–ª–æ–≤ —Å jinja2

app.include_router(students.students_router)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
app.include_router(students.students_subtasks_router) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∑–∞–¥–∞—á —Å—Ç—É–¥–µ–Ω—Ç–æ–≤



#app.include_router(files.router)

#app.include_router(web_auth.router) # –ø–æ–¥–∫–ª—é—á–∞–µ–º home
#app.mount("/static", StaticFiles(directory="Templates/Static"), name="static") # –¥–ª—è CSS —Ñ–∞–π–ª–æ–≤
app.mount("/Uploads", StaticFiles(directory="Uploads"), name="uploads") # –¥–ª—è —Ñ–∞–π–ª–æ–≤
templates = Jinja2Templates(directory=TEMPLATES_DIR)



# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏–∫—É
#app.mount("/", StaticFiles(directory=frontend_path, html=True), name="frontend")
#app.mount("/_next", StaticFiles(directory=dist_static_dir), name="next")



def check_db_connection(engine, name):
    try:
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        logging.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö '{name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ '{name}': {e}")

@app.on_event("startup")
def startup_event():
    logging.info("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
    check_db_connection(engine, "infoDB")
    check_db_connection(log_engine, "LogDB")

# –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è kafka
@app.on_event("shutdown")
def shutdown_event():
    producer = get_kafka_producer()
    if producer:
        producer.close()


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    errors = exc.errors()

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ ctx, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    for error in errors:
        if "ctx" in error:
            del error["ctx"]

    logging.warning(f"[400 VALIDATION ERROR] {request.method} {request.url} - –æ—à–∏–±–∫–∏: {errors}")

    return JSONResponse(
        status_code=HTTP_400_BAD_REQUEST,
        content={"detail": errors},
    )

"""Swagger"""

@app.get("/api/docs", dependencies=[Depends(get_swagger_user)])
async def get_documentation():
    return get_swagger_ui_html(
        openapi_url="/api/openapi.json",  # <- –≤–∞–∂–Ω–æ
        title="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API"
    )

@app.get("/api/redoc", dependencies=[Depends(get_swagger_user)])
async def get_redoc_documentation():
    return get_redoc_html(
        openapi_url="/api/openapi.json",
        title="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API"
    )

# openapi.json –±–µ–∑ –∑–∞—â–∏—Ç—ã
@app.get("/api/openapi.json")
async def openapi():
    return app.openapi()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–µ—Å–ª–∏ SPA)
'''@app.get("/{full_path:path}")
def read_spa(full_path: str):
    excluded_paths = ("api", "docs", "openapi.json", "redoc")
    if any(full_path == p or full_path.startswith(p + "/") for p in excluded_paths):
        raise HTTPException(status_code=404)
    return FileResponse(os.path.join(frontend_path, "index.html"))'''

'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ SWAGGER'''
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema

    openapi_schema = get_openapi(
        title="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API",
        version="1.0.0",
        description="–û–ø–∏—Å–∞–Ω–∏–µ API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π",
        routes=app.routes,
    )

    openapi_schema["components"]["securitySchemes"] = {
        "BearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
        }
    }

    # –î–æ–±–∞–≤–∏–º —Å—Ö–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ –≤—Å–µ–º –º–µ—Ç–æ–¥–∞–º (–º–æ–∂–Ω–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    for path in openapi_schema["paths"].values():
        for method in path.values():
            method.setdefault("security", [{"BearerAuth": []}])

    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

"""–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
if __name__ == "__main__":
    uvicorn.run("main:app", host="localhost", port=9000)