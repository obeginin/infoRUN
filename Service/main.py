from config import TEMPLATES_DIR, LOG_LEVEL
from fastapi import FastAPI, Depends, Request, HTTPException
from Routers import tasks,students,auth,files  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –∑–∞–¥–∞—á
from fastapi.openapi.docs import get_swagger_ui_html, get_redoc_html
from fastapi.staticfiles import StaticFiles
from Crud.auth import get_swagger_user
import uvicorn
from sqlalchemy import text
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.responses import RedirectResponse
from log import setup_logging
from middlewares import LoggingMiddleware
from fastapi.middleware.cors import CORSMiddleware
import logging
from Database import engine, log_engine
from producer import get_kafka_producer
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
import os

# main.py
'''–≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞'''

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
setup_logging()





app = FastAPI(debug=LOG_LEVEL, docs_url=None, redoc_url=None)
producer = get_kafka_producer()
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
app.include_router(auth.auth_router) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.include_router(auth.home_router)
app.include_router(tasks.task_router) # –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ routers/tasks.py.
app.include_router(tasks.subtask_router)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–¥–∑–∞–¥–∞—á
app.include_router(tasks.task_js_router) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è html —Ñ–∞–π–ª–æ–≤ —Å js
app.include_router(tasks.varinant_router) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è html —Ñ–∞–π–ª–æ–≤ —Å jinja2
app.include_router(tasks.subject_router)  # –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
app.include_router(students.students_router)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
app.include_router(students.students_subtasks_router) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∑–∞–¥–∞—á —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

app.include_router(auth.admin_router)
app.add_middleware(LoggingMiddleware) # Middleware –¥–ª—è –ª–æ–≥–æ–≤ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
#app.include_router(files.router)

#app.include_router(web_auth.router) # –ø–æ–¥–∫–ª—é—á–∞–µ–º home
#app.mount("/static", StaticFiles(directory="Templates/Static"), name="static") # –¥–ª—è CSS —Ñ–∞–π–ª–æ–≤
app.mount("/Uploads", StaticFiles(directory="Uploads"), name="uploads") # –¥–ª—è —Ñ–∞–π–ª–æ–≤
templates = Jinja2Templates(directory=TEMPLATES_DIR)

# –ü—É—Ç—å –¥–æ –±–∏–ª–¥-—Ñ—Ä–æ–Ω—Ç–∞
frontend_path = os.path.join(os.path.dirname(__file__), "..", "Client", "dist")
# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏–∫—É
app.mount("/assets", StaticFiles(directory=os.path.join(frontend_path, "assets")), name="assets")

'''origins = [
    "http://localhost:5174",   # —Ç–≤–æ–π frontend (vite)
    "https://info-run.ru",     # –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
]'''
origins = [
    "*"    # –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
]
# –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ñ—Ä–æ–Ω—Ç–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,  # ‚úÖ —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ—Ä–æ–Ω—Ç–∞
    allow_credentials=True,                  # ‚úÖ —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –∫—É–∫–∏ / –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    allow_methods=["*"],                     # ‚úÖ —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –ª—é–±—ã–µ HTTP-–º–µ—Ç–æ–¥—ã (GET, POST, PUT –∏ —Ç.–¥.)
    allow_headers=["*"],                     # ‚úÖ —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –ª—é–±—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Authorization)
)


def check_db_connection(engine, name):
    try:
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        logging.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö '{name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ '{name}': {e}")

@app.on_event("startup")
def startup_event():
    logging.info("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
    check_db_connection(engine, "infoDB")
    check_db_connection(log_engine, "LogDB")

# –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è kafka
@app.on_event("shutdown")
def shutdown_event():
    producer = get_kafka_producer()
    if producer:
        producer.close()

# üìÑ –û—Ç–¥–∞—á–∞ index.html –ø—Ä–∏ –ª—é–±–æ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º GET-–∑–∞–ø—Ä–æ—Å–µ (–∫—Ä–æ–º–µ /api)


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
'''@app.get("/")
def read_index():
    return FileResponse(os.path.join(frontend_path, "index.html"))
'''

"""Swagger"""

@app.get("/docs", dependencies=[Depends(get_swagger_user)])
async def get_documentation():
    return get_swagger_ui_html(openapi_url=app.openapi_url, title="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API")
'''
@app.get("/docs", response_class=HTMLResponse)
def swagger_ui_html(username: str = Depends(get_swagger_user)):
    return get_swagger_ui_html(
        openapi_url="/openapi.json",
        title="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API",
        swagger_js_url="https://cdn.jsdelivr.net/npm/swagger-ui-dist@4/swagger-ui-bundle.js",
        swagger_css_url="https://cdn.jsdelivr.net/npm/swagger-ui-dist@4/swagger-ui.css",
    )'''

@app.get("/redoc", dependencies=[Depends(get_swagger_user)])
async def get_redoc_documentation():
    return get_redoc_html(openapi_url=app.openapi_url, title="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API")

# openapi.json –±–µ–∑ –∑–∞—â–∏—Ç—ã
@app.get("/openapi.json")
async def openapi():
    return app.openapi()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–µ—Å–ª–∏ SPA)
@app.get("/{full_path:path}")
def read_spa(full_path: str):
    excluded_paths = ("api", "docs", "openapi.json", "redoc")
    if any(full_path == p or full_path.startswith(p + "/") for p in excluded_paths):
        raise HTTPException(status_code=404)
    return FileResponse(os.path.join(frontend_path, "index.html"))


# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ—Ä–Ω—è (–û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞)
'''@app.get("/")
def read():
    return RedirectResponse(url="/home/login_in/")'''



"""–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
if __name__ == "__main__":
    uvicorn.run("main:app", host="localhost", port=9000)