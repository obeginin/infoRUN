
import os
import logging
import uvicorn
import time
from sqlalchemy import text
from fastapi import FastAPI, Depends, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, HTMLResponse, RedirectResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from fastapi.exceptions import RequestValidationError
from starlette.status import HTTP_400_BAD_REQUEST

from utils.config import settings
from utils.log import setup_logging
from utils.exceptions import app_exception_handler, validation_exception_handler, general_exception_handler
from fastapi.openapi.docs import get_swagger_ui_html, get_redoc_html
from fastapi.openapi.utils import get_openapi
from Service.api import tasks, subtasks,students,auth,subjects, variants  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –∑–∞–¥–∞—á
from Service.api.swagger import swagger_router
from Service.Crud.auth import get_swagger_user
from Service.Database import engine
from Service.producer import get_kafka_producer
from Service.middlewares import LoggingMiddleware

# main.py
'''–≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞'''

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
setup_logging(log_file=settings.LOG_FILE)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(debug=settings.LOG_LEVEL, docs_url=None, redoc_url=None)

# CORS (–¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ñ—Ä–æ–Ω—Ç–∞)
origins = [
    "http://localhost:5173",       # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ—Ä–æ–Ω—Ç (Vite)
    "http://127.0.0.1:5173",       # –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–µ–Ω —ç—Ç–æ—Ç
    "http://localhost:3000",       # –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ—Ä–æ–Ω—Ç (Vite)
    "http://127.0.0.1:3000",
    "http://10.8.0.9:3000",
    "https://info-run.ru",         # –µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç –±—É–¥–µ—Ç –Ω–∞ –ø—Ä–æ–¥–µ
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,                   # ‚úÖ —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ—Ä–æ–Ω—Ç–∞
    allow_credentials=True,                  # ‚úÖ —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –∫—É–∫–∏ / –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    allow_methods=["GET", "POST", "PATCH", "PUT", "DELETE", "OPTIONS"],                     # ‚úÖ —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –ª—é–±—ã–µ HTTP-–º–µ—Ç–æ–¥—ã (GET, POST, PUT –∏ —Ç.–¥.)
    allow_headers=["*"],                     # ‚úÖ —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –ª—é–±—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Authorization)
)
app.add_middleware(LoggingMiddleware) # Middleware –¥–ª—è –ª–æ–≥–æ–≤ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

# –ü—É—Ç—å –¥–æ –±–∏–ª–¥-—Ñ—Ä–æ–Ω—Ç–∞
#frontend_path = os.path.join(os.path.dirname(__file__), "..", "Client", "dist")
#dist_static_dir = os.path.join(os.path.dirname(__file__), "..", "Client", "dist", "_next")

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è
app.add_exception_handler(HTTPException, app_exception_handler)
app.add_exception_handler(RequestValidationError, validation_exception_handler)
app.add_exception_handler(Exception, general_exception_handler)


# Kafka
producer = get_kafka_producer()
# –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è kafka
@app.on_event("shutdown")
def shutdown_event():
    if producer:
        producer.close()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.auth_router) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.include_router(auth.admin_router)
app.include_router(auth.home_router)
app.include_router(subjects.subject_router)  # –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
app.include_router(tasks.task_router) # –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ routers/tasks.py.
app.include_router(subtasks.subtask_router)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–¥–∑–∞–¥–∞—á
app.include_router(variants.variant_router)
app.include_router(students.students_router)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
app.include_router(students.students_subtasks_router) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∑–∞–¥–∞—á —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
app.include_router(swagger_router)


# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏–∫—É
app.mount("/Uploads", StaticFiles(directory=settings.UPLOADS_DIR), name="uploads") # –¥–ª—è —Ñ–∞–π–ª–æ–≤
#app.mount("/static", StaticFiles(directory="Templates/Static"), name="static") # –¥–ª—è CSS —Ñ–∞–π–ª–æ–≤
#templates = Jinja2Templates(directory=settings.TEMPLATES_DIR) # –¥–ª—è Jinja




async def check_db_connection(engine, name: str, retries: int = 5, delay: int = 3):
    for attempt in range(1, retries + 1):
        try:
            async with engine.connect() as conn:
                await conn.execute(text("SELECT 1"))
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö '{name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ '{name}' (–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {e}")
            if attempt < retries:
                await time.sleep(delay)
            else:
                logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ '{name}' –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫.")
                raise

@app.on_event("startup")
async def startup_event():
    logging.info("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
    check_db_connection(engine, "infoDB")
    #check_db_connection(log_engine, "LogDB") # –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π –±–∞–∑—ã –ª–æ–≥–æ–≤



# Health check endpoint
@app.get("/api/health", tags=["Health"], summary="—Ä–æ—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
    return {
        "status": "healthy",
        "service": settings.APP_NAME,
        "version": "1.0",
        "environment": settings.ENVIRONMENT
    }

"""Swagger"""

@app.get("/api/docs", dependencies=[Depends(get_swagger_user)])
async def get_documentation():
    return get_swagger_ui_html(
        openapi_url="/api/openapi.json",  # <- –≤–∞–∂–Ω–æ
        title="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API"
    )

@app.get("/api/redoc", dependencies=[Depends(get_swagger_user)])
async def get_redoc_documentation():
    return get_redoc_html(
        openapi_url="/api/openapi.json",
        title="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API"
    )

# openapi.json –±–µ–∑ –∑–∞—â–∏—Ç—ã
@app.get("/api/openapi.json")
async def openapi():
    return app.openapi()



'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ SWAGGER'''
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema

    openapi_schema = get_openapi(
        title="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API",
        version="1.0.0",
        description="–û–ø–∏—Å–∞–Ω–∏–µ API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π",
        routes=app.routes,
    )

    openapi_schema["components"]["securitySchemes"] = {
        "BearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
        }
    }

    # –î–æ–±–∞–≤–∏–º —Å—Ö–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ –≤—Å–µ–º –º–µ—Ç–æ–¥–∞–º (–º–æ–∂–Ω–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    for path in openapi_schema["paths"].values():
        for method in path.values():
            method.setdefault("security", [{"BearerAuth": []}])

    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

"""–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
if __name__ == "__main__":
    uvicorn.run(
        "Service.main:app",  # –ø—É—Ç—å –∫ –æ–±—ä–µ–∫—Ç—É app
        host="0.0.0.0",
        port=9000,
        reload=True  # —Ç–æ–ª—å–∫–æ –¥–ª—è dev
    )